This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Alert/
  AlertContainer.tsx
Layout/
  DarkModeSwitcher/
    DarkModeSelect/
      DarkModeSelect.tsx
    DarkModeSwitcher.tsx
  Footer/
    Footer.tsx
  Navbar/
    Navbar.tsx
  Layout.tsx
UI/
  Button.tsx
  Card.tsx
  index.tsx
  LoadingOverlay.tsx
  LoadingSpinner.tsx
  Stats.tsx
ChatInterface.tsx
DocumentUpload.tsx
DynamicForm.tsx
index.tsx
LoadingStates.tsx
Notification.tsx
StatusTracker.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Alert/AlertContainer.tsx">
import React from 'react'
import { useAlertStore, AlertType } from '@/lib/stores/alert.store'

interface AlertItemProps {
  id: string
  type: AlertType
  message: string
  onRemove: (id: string) => void
}

const AlertItem: React.FC<AlertItemProps> = ({ id, type, message, onRemove }) => {
  const getAlertClasses = (type: AlertType) => {
    const baseClasses = "alert w-auto max-w-md shadow-lg transition-all duration-300"
    
    switch (type) {
      case 'success':
        return `${baseClasses} alert-success`
      case 'error':
        return `${baseClasses} alert-error`
      case 'warning':
        return `${baseClasses} alert-warning`
      case 'info':
      default:
        return `${baseClasses} alert-info`
    }
  }

  const getIcon = (type: AlertType) => {
    switch (type) {
      case 'success':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
      case 'error':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
      case 'warning':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        )
      case 'info':
      default:
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
    }
  }

  return (
    <div className={getAlertClasses(type)}>
      {getIcon(type)}
      <span>{message}</span>
      <button 
        className="btn btn-sm btn-ghost btn-circle ml-2"
        onClick={() => onRemove(id)}
      >
        ✕
      </button>
    </div>
  )
}

const AlertContainer: React.FC = () => {
  const { alerts, removeAlert } = useAlertStore()

  if (alerts.length === 0) return null

  return (
    <div className="fixed bottom-4 right-4 pointer-events-none z-50">
      <div className="flex flex-col space-y-2">
        {alerts.map((alert, index) => (
          <div 
            key={alert.id}
            className="pointer-events-auto transform transition-all duration-300 ease-in-out"
            style={{ 
              zIndex: 1000 - index 
            }}
          >
            <AlertItem
              id={alert.id}
              type={alert.type}
              message={alert.message}
              onRemove={removeAlert}
            />
          </div>
        ))}
      </div>
    </div>
  )
}

export default AlertContainer
</file>

<file path="Layout/DarkModeSwitcher/DarkModeSelect/DarkModeSelect.tsx">
import React from "react"

interface DarkModeSelectProps {
	themeSwitch: Function
}

const DarkModeSelect = ({ themeSwitch }: DarkModeSelectProps) => {
	return (
		<ul tabIndex={0} className="menu menu-compact dropdown-content mt-3 p-2 shadow rounded-box w-52">
			<li>
				<span onClick={() => themeSwitch("default")}>System Default</span>
			</li>
			<li>
				<span onClick={() => themeSwitch("light")}>Light</span>
			</li>
			<li>
				<span onClick={() => themeSwitch("dark")}>Dark</span>
			</li>
		</ul>
	)
}

export default DarkModeSelect
</file>

<file path="Layout/DarkModeSwitcher/DarkModeSwitcher.tsx">
import React, { useEffect, useState } from "react"
import { THEMES } from "@/lib/constants/theme.constants"
import DarkModeSelect from "./DarkModeSelect/DarkModeSelect"

const DarkModeSwitcher = () => {
	const [showMoon, setShowMoon] = useState(true)
	const [isSystemDark, setIsSystemDark] = useState(
		typeof window !== "undefined" && window.matchMedia("screen and (prefers-color-scheme: dark)").matches
	)

	typeof window !== "undefined" &&
		window.matchMedia("screen and (prefers-color-scheme: dark)").addEventListener("change", (event) => {
			setIsSystemDark(window.matchMedia("screen and (prefers-color-scheme: dark)").matches)
		})

	useEffect(() => {
		const userTheme = localStorage.getItem("theme")

		if (userTheme === "dark") applyDark()
		if (userTheme === "light") applyLight()

		if (!userTheme || userTheme === "default") {
			if (isSystemDark) applyDark()
			else applyLight()
		}
	}, [isSystemDark])

	const applyDark = () => {
		document.body.setAttribute("data-theme", THEMES.DARK)
		setShowMoon(false)
	}

	const applyLight = () => {
		document.body.setAttribute("data-theme", THEMES.LIGHT)
		setShowMoon(true)
	}

	const themeSwitch = (theme: string) => {
		if (document.activeElement instanceof HTMLElement) {
			document.activeElement.blur()
		}
		localStorage.setItem("theme", theme)

		if (theme === "default") {
			if (isSystemDark) applyDark()
			else applyLight()
		}

		if (theme === "dark") applyDark()
		if (theme === "light") applyLight()
	}

	return (
		<div className="flex-none">
			<div tabIndex={0} className="dropdown dropdown-end">
				{showMoon ? (
					<button tabIndex={0} className="btn btn-ghost btn-circle">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							strokeWidth={2}
							stroke="currentColor"
							className="w-6 h-6">
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z"
							/>
						</svg>
					</button>
				) : (
					<button tabIndex={0} className="btn btn-ghost btn-circle">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							strokeWidth={2}
							stroke="currentColor"
							className="w-6 h-6">
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
							/>
						</svg>
					</button>
				)}
				<DarkModeSelect themeSwitch={themeSwitch} />
			</div>
		</div>
	)
}

export default DarkModeSwitcher
</file>

<file path="Layout/Footer/Footer.tsx">
import React from "react"

const Footer = () => {
	return (
		<footer className="footer flex flex-row flex-wrap justify-between p-5 opacity-50 gap-y-2 mb-2 md:mb-0">
			<div className="text-sm">
				© 2025 SKS Trainer. Sportküstenschifferschein Prüfungsvorbereitung.
			</div>
		</footer>
	)
}

export default Footer
</file>

<file path="Layout/Navbar/Navbar.tsx">
"use client"

import { useRouter, usePathname } from "next/navigation"
import React from "react"
import DarkModeSwitcher from "@/components/Layout/DarkModeSwitcher/DarkModeSwitcher"

const Navbar = () => {
  const router = useRouter()
  const pathname = usePathname()

  return (
    <div className="navbar">
      <div className="flex-1">
        {pathname === "/" ? (
          <button className="btn btn-ghost normal-case text-2xl logo" onClick={() => window.location.reload()}>
            ⚓ SKS Trainer
          </button>
        ) : (
          <button className="btn btn-ghost normal-case text-2xl logo" onClick={() => router.push("/")}>
            ⚓ SKS Trainer
          </button>
        )}
      </div>
      
      <div className="flex-none gap-2">
        <DarkModeSwitcher />
      </div>
    </div>
  )
}

export default Navbar
</file>

<file path="Layout/Layout.tsx">
import React, { ReactNode } from "react"
import AlertContainer from "@/components/Alert/AlertContainer"
import Footer from "./Footer/Footer"
import Navbar from "./Navbar/Navbar"

interface LayoutProps {
  children: ReactNode
}

const Layout = (props: LayoutProps) => {
  return (
    <div className="flex flex-col min-h-screen justify-between">
      <Navbar />
      <AlertContainer />
      <div className="container pt-14 pb-24">{props.children}</div>
      <Footer />
    </div>
  )
}

export default Layout
</file>

<file path="UI/Button.tsx">
import React from 'react'

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

export default Button
</file>

<file path="UI/Card.tsx">
import React from 'react'

interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
}

const Card: React.FC<CardProps> = ({ children, className = '', title }) => {
  return (
    <div className={`card bg-base-200 shadow ${className}`}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

export default Card
</file>

<file path="UI/index.tsx">
import React from 'react'

// Button Component
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline' | 'success' | 'warning' | 'error'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

export const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline',
    success: 'btn-success',
    warning: 'btn-warning',
    error: 'btn-error'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

// Card Component
interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
  compact?: boolean
  bordered?: boolean
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  className = '', 
  title, 
  compact = false,
  bordered = false 
}) => {
  const cardClasses = [
    'card',
    'bg-base-100',
    'shadow-lg',
    bordered ? 'card-bordered' : '',
    compact ? 'card-compact' : '',
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={cardClasses}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

// Loading Spinner Component
interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

// Loading Overlay Component
interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="loading-overlay">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

// Stats Components
interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

export const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

export const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

// Badge Component
interface BadgeProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'success' | 'warning' | 'error' | 'info'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  className?: string
}

export const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = ''
}) => {
  const variantClasses = {
    primary: 'badge-primary',
    secondary: 'badge-secondary',
    accent: 'badge-accent',
    ghost: 'badge-ghost',
    success: 'badge-success',
    warning: 'badge-warning',
    error: 'badge-error',
    info: 'badge-info'
  }
  
  const sizeClasses = {
    xs: 'badge-xs',
    sm: 'badge-sm',
    md: '',
    lg: 'badge-lg'
  }

  const badgeClasses = [
    'badge',
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={badgeClasses}>
      {children}
    </div>
  )
}
</file>

<file path="UI/LoadingOverlay.tsx">
import React from 'react'
import LoadingSpinner from './LoadingSpinner'

interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="absolute inset-0 bg-base-100/80 backdrop-blur-sm flex flex-col justify-center items-center z-50">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

export default LoadingOverlay
</file>

<file path="UI/LoadingSpinner.tsx">
import React from 'react'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

export default LoadingSpinner
</file>

<file path="UI/Stats.tsx">
import React from 'react'

interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

export { Stats, Stat }
</file>

<file path="ChatInterface.tsx">
'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Bot, User, Sparkles } from 'lucide-react'
import { Message, VisaType } from '@/types'
import { api } from '@/utils/api'
import { Button, Badge } from '@/components/UI'

interface ChatInterfaceProps {
  onVisaTypeSelected?: (visaType: VisaType) => void
}

export default function ChatInterface({ onVisaTypeSelected }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hi! I'm AVA, your AI visa assistant. I can help you find the right visa and guide you through the application process. What type of travel are you planning? 🛂✈️",
      sender: 'ava',
      timestamp: new Date()
    }
  ])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: input.trim(),
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      const response = await api.chat(input.trim())
      
      const avaMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response.response,
        sender: 'ava',
        timestamp: new Date(),
        metadata: {
          suggestedVisaType: response.suggestedVisaType,
          nextAction: response.nextAction,
          confidence: response.confidence
        }
      }

      setMessages(prev => [...prev, avaMessage])

      // If AVA suggests starting a form, trigger the callback
      if (response.nextAction === 'start_form' && response.suggestedVisaType && onVisaTypeSelected) {
        setTimeout(() => {
          onVisaTypeSelected(response.suggestedVisaType!)
        }, 1000)
      }
    } catch (error) {
      console.error('Error sending message:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "I'm sorry, I'm having trouble connecting right now. Please try again in a moment.",
        sender: 'ava',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const quickReplies = [
    "I need a tourist visa",
    "Business visa application", 
    "Student visa help",
    "Family visit visa"
  ]

  return (
    <div className="flex flex-col h-full bg-base-100 rounded-lg shadow-lg overflow-hidden border border-base-300">
      {/* Header */}
      <div className="bg-gradient-to-r from-primary to-secondary text-white p-4">
        <div className="flex items-center gap-3">
          <div className="relative">
            <div className="avatar">
              <div className="w-10 rounded-full bg-base-100">
                <Bot className="w-6 h-6 text-primary m-2" />
              </div>
            </div>
            <div className="absolute -top-1 -right-1 w-3 h-3 bg-success rounded-full animate-pulse" />
          </div>
          <div>
            <h3 className="font-semibold text-lg flex items-center gap-2">
              AVA - AI Visa Assistant
              <Badge variant="ghost" className="text-xs bg-white/20 text-white border-white/30">
                <Sparkles className="w-3 h-3 mr-1" />
                AI
              </Badge>
            </h3>
            <p className="text-primary-content/70 text-sm">Online • Ready to help</p>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-base-50">
        {messages.map(message => (
          <div
            key={message.id}
            className={`chat ${message.sender === 'user' ? 'chat-end' : 'chat-start'} chat-message`}
          >
            <div className="chat-image avatar">
              <div className="w-8 rounded-full">
                {message.sender === 'ava' ? (
                  <div className="bg-primary text-white rounded-full flex items-center justify-center w-8 h-8">
                    <Bot className="w-5 h-5" />
                  </div>
                ) : (
                  <div className="bg-neutral text-white rounded-full flex items-center justify-center w-8 h-8">
                    <User className="w-5 h-5" />
                  </div>
                )}
              </div>
            </div>
            
            <div className={`chat-bubble ${
              message.sender === 'user' 
                ? 'chat-bubble-primary' 
                : 'chat-bubble-secondary'
            }`}>
              <p className="whitespace-pre-wrap leading-relaxed">{message.text}</p>
              
              {/* Show confidence for AVA messages */}
              {message.sender === 'ava' && message.metadata?.confidence && (
                <div className="mt-2 pt-2 border-t border-white/20">
                  <Badge variant="ghost" size="xs" className="bg-white/20 text-white border-white/30">
                    <Sparkles className="w-3 h-3 mr-1" />
                    {Math.round(message.metadata.confidence * 100)}% confident
                  </Badge>
                </div>
              )}
            </div>
            
            <div className="chat-footer opacity-50 text-xs">
              {message.timestamp.toLocaleTimeString()}
            </div>
          </div>
        ))}

        {/* Loading indicator */}
        {isLoading && (
          <div className="chat chat-start">
            <div className="chat-image avatar">
              <div className="w-8 rounded-full">
                <div className="bg-primary text-white rounded-full flex items-center justify-center w-8 h-8">
                  <Bot className="w-5 h-5" />
                </div>
              </div>
            </div>
            <div className="chat-bubble chat-bubble-secondary">
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-current rounded-full animate-bounce" />
                <div 
                  className="w-2 h-2 bg-current rounded-full animate-bounce" 
                  style={{ animationDelay: '0.1s' }} 
                />
                <div 
                  className="w-2 h-2 bg-current rounded-full animate-bounce" 
                  style={{ animationDelay: '0.2s' }} 
                />
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Replies */}
      {messages.length === 1 && (
        <div className="px-4 py-3 bg-base-200 border-t border-base-300">
          <p className="text-xs opacity-60 mb-2">Quick options:</p>
          <div className="flex flex-wrap gap-2">
            {quickReplies.map((reply, index) => (
              <Button
                key={index}
                variant="ghost"
                size="xs"
                onClick={() => {
                  setInput(reply)
                  setTimeout(sendMessage, 100)
                }}
                className="text-xs"
              >
                {reply}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="p-4 bg-base-100 border-t border-base-300">
        <div className="flex gap-2">
          <div className="flex-1">
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask AVA anything about visas..."
              className="textarea textarea-bordered w-full resize-none"
              rows={1}
              disabled={isLoading}
            />
          </div>
          <Button
            onClick={sendMessage}
            disabled={!input.trim() || isLoading}
            loading={isLoading}
            className="btn-circle"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        <p className="text-xs opacity-50 mt-2 text-center">
          AVA can make mistakes. Please verify important information.
        </p>
      </div>
    </div>
  )
}
</file>

<file path="DocumentUpload.tsx">
'use client'

import { useState, useRef, useCallback } from 'react'
import { Upload, FileText, CheckCircle2, AlertCircle, X, Camera, Trash2 } from 'lucide-react'
import { Document, DocumentType, VisaType } from '@/types'

interface DocumentUploadProps {
  visaType: VisaType
  onDocumentsChange?: (documents: Document[]) => void
  onComplete?: () => void
}

const REQUIRED_DOCUMENTS: Record<VisaType, DocumentType[]> = {
  tourist: ['passport', 'photo', 'bank_statement', 'travel_insurance'],
  business: ['passport', 'photo', 'invitation_letter', 'employment_letter'],
  student: ['passport', 'photo', 'bank_statement', 'invitation_letter'],
  work: ['passport', 'photo', 'employment_letter', 'invitation_letter'],
  family_visit: ['passport', 'photo', 'invitation_letter', 'bank_statement'],
  transit: ['passport', 'photo', 'flight_itinerary']
}

const DOCUMENT_NAMES: Record<DocumentType, string> = {
  passport: 'Passport (Photo Page)',
  photo: 'Passport Photo',
  bank_statement: 'Bank Statement',
  invitation_letter: 'Invitation Letter',
  travel_insurance: 'Travel Insurance',
  employment_letter: 'Employment Letter',
  flight_itinerary: 'Flight Itinerary'
}

const DOCUMENT_DESCRIPTIONS: Record<DocumentType, string> = {
  passport: 'Clear photo of your passport information page',
  photo: 'Recent passport-sized photo (white background)',
  bank_statement: 'Last 3 months bank statements showing sufficient funds',
  invitation_letter: 'Official invitation letter from host organization',
  travel_insurance: 'Valid travel insurance covering your entire stay',
  employment_letter: 'Letter from employer confirming your employment',
  flight_itinerary: 'Flight booking confirmation or itinerary'
}

export default function DocumentUpload({ visaType, onDocumentsChange, onComplete }: DocumentUploadProps) {
  const [documents, setDocuments] = useState<Document[]>([])
  const [uploadingDocs, setUploadingDocs] = useState<Set<string>>(new Set())
  const [draggedOver, setDraggedOver] = useState<string | null>(null)
  const fileInputRefs = useRef<Record<string, HTMLInputElement | null>>({})

  const requiredDocs = REQUIRED_DOCUMENTS[visaType] || []

  // Simulate document verification
  const verifyDocument = async (file: File, docType: DocumentType): Promise<boolean> => {
    // Simulate upload and verification time
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000))
    
    // Simulate verification results (90% success rate)
    return Math.random() > 0.1
  }

  const handleFileUpload = useCallback(async (file: File, docType: DocumentType) => {
    const docId = `${docType}_${Date.now()}`
    
    setUploadingDocs(prev => new Set([...prev, docId]))

    try {
      const verified = await verifyDocument(file, docType)
      
      const newDocument: Document = {
        id: docId,
        name: file.name,
        type: docType,
        size: file.size,
        uploadedAt: new Date(),
        verified,
        url: URL.createObjectURL(file) // For preview
      }

      setDocuments(prev => {
        // Remove any existing document of the same type
        const filtered = prev.filter(doc => doc.type !== docType)
        const updated = [...filtered, newDocument]
        onDocumentsChange?.(updated)
        return updated
      })
    } catch (error) {
      console.error('Error uploading document:', error)
    } finally {
      setUploadingDocs(prev => {
        const newSet = new Set(prev)
        newSet.delete(docId)
        return newSet
      })
    }
  }, [onDocumentsChange])

  const handleDrop = useCallback((e: React.DragEvent, docType: DocumentType) => {
    e.preventDefault()
    setDraggedOver(null)
    
    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      handleFileUpload(files[0], docType)
    }
  }, [handleFileUpload])

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>, docType: DocumentType) => {
    const files = e.target.files
    if (files && files.length > 0) {
      handleFileUpload(files[0], docType)
    }
  }

  const removeDocument = (docType: DocumentType) => {
    setDocuments(prev => {
      const updated = prev.filter(doc => doc.type !== docType)
      onDocumentsChange?.(updated)
      return updated
    })
  }

  const getDocumentForType = (docType: DocumentType) => {
    return documents.find(doc => doc.type === docType)
  }

  const isUploading = (docType: DocumentType) => {
    return Array.from(uploadingDocs).some(id => id.startsWith(docType))
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const allRequiredUploaded = requiredDocs.every(docType => 
    getDocumentForType(docType)?.verified
  )

  const uploadProgress = (documents.filter(doc => doc.verified).length / requiredDocs.length) * 100

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white p-6">
        <h2 className="text-xl font-bold mb-2">Upload Required Documents</h2>
        <p className="text-green-100 text-sm">
          Please upload the following documents for your {visaType} visa application
        </p>
        
        {/* Progress */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-green-100 mb-2">
            <span>Upload Progress</span>
            <span>{Math.round(uploadProgress)}% complete</span>
          </div>
          <div className="w-full bg-green-500 bg-opacity-30 rounded-full h-2">
            <div 
              className="bg-white h-2 rounded-full transition-all duration-500"
              style={{ width: `${uploadProgress}%` }}
            />
          </div>
        </div>
      </div>

      <div className="p-6">
        {/* Document grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {requiredDocs.map(docType => {
            const document = getDocumentForType(docType)
            const uploading = isUploading(docType)
            
            return (
              <div
                key={docType}
                className={`border-2 border-dashed rounded-lg p-6 transition-all ${
                  draggedOver === docType
                    ? 'border-blue-500 bg-blue-50'
                    : document?.verified
                    ? 'border-green-500 bg-green-50'
                    : document && !document.verified
                    ? 'border-red-500 bg-red-50'
                    : 'border-gray-300 hover:border-blue-400'
                }`}
                onDragOver={(e) => {
                  e.preventDefault()
                  setDraggedOver(docType)
                }}
                onDragLeave={() => setDraggedOver(null)}
                onDrop={(e) => handleDrop(e, docType)}
              >
                <input
                  ref={el => fileInputRefs.current[docType] = el}
                  type="file"
                  accept="image/*,.pdf"
                  onChange={(e) => handleFileInput(e, docType)}
                  className="hidden"
                />

                <div className="text-center">
                  {uploading ? (
                    <div className="space-y-3">
                      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                      <p className="text-blue-600 font-medium">Uploading & Verifying...</p>
                      <p className="text-sm text-gray-600">Please wait while we process your document</p>
                    </div>
                  ) : document ? (
                    <div className="space-y-3">
                      <div className="flex items-center justify-center">
                        {document.verified ? (
                          <CheckCircle2 className="w-12 h-12 text-green-500" />
                        ) : (
                          <AlertCircle className="w-12 h-12 text-red-500" />
                        )}
                      </div>
                      
                      <div>
                        <p className="font-medium text-gray-800">{document.name}</p>
                        <p className="text-sm text-gray-600">{formatFileSize(document.size)}</p>
                        <p className={`text-sm font-medium ${
                          document.verified ? 'text-green-600' : 'text-red-600'
                        }`}>
                          {document.verified ? 'Verified ✓' : 'Verification Failed ✗'}
                        </p>
                      </div>

                      <div className="flex gap-2 justify-center">
                        <button
                          onClick={() => fileInputRefs.current[docType]?.click()}
                          className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
                        >
                          Replace
                        </button>
                        <button
                          onClick={() => removeDocument(docType)}
                          className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      <Upload className="w-12 h-12 text-gray-400 mx-auto" />
                      <div>
                        <h3 className="font-medium text-gray-800 mb-1">
                          {DOCUMENT_NAMES[docType]}
                        </h3>
                        <p className="text-sm text-gray-600 mb-3">
                          {DOCUMENT_DESCRIPTIONS[docType]}
                        </p>
                      </div>
                      
                      <div className="space-y-2">
                        <button
                          onClick={() => fileInputRefs.current[docType]?.click()}
                          className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                        >
                          <FileText className="w-4 h-4 inline mr-2" />
                          Choose File
                        </button>
                        
                        <button
                          onClick={() => fileInputRefs.current[docType]?.click()}
                          className="w-full px-4 py-2 border border-blue-500 text-blue-500 rounded-lg hover:bg-blue-50 transition-colors"
                        >
                          <Camera className="w-4 h-4 inline mr-2" />
                          Take Photo
                        </button>
                      </div>
                      
                      <p className="text-xs text-gray-500">
                        Drag & drop or click to upload<br />
                        Supports: JPG, PNG, PDF (max 10MB)
                      </p>
                    </div>
                  )}
                </div>
              </div>
            )
          })}
        </div>

        {/* Tips */}
        <div className="mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-medium text-blue-900 mb-2">📝 Document Tips</h4>
          <ul className="text-sm text-blue-800 space-y-1">
            <li>• Ensure documents are clear and all text is readable</li>
            <li>• Photos should be in color with good lighting</li>
            <li>• Bank statements must be recent (within 3 months)</li>
            <li>• All documents should be in high resolution</li>
            <li>• Upload official documents only - no screenshots</li>
          </ul>
        </div>

        {/* Complete button */}
        {allRequiredUploaded && (
          <div className="mt-6 text-center">
            <button
              onClick={onComplete}
              className="px-8 py-3 bg-green-500 text-white text-lg font-medium rounded-lg hover:bg-green-600 transition-colors"
            >
              <CheckCircle2 className="w-5 h-5 inline mr-2" />
              All Documents Verified - Continue
            </button>
          </div>
        )}

        {/* Status summary */}
        <div className="mt-6 bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-3">Upload Status</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {requiredDocs.map(docType => {
              const document = getDocumentForType(docType)
              const uploading = isUploading(docType)
              
              return (
                <div key={docType} className="flex items-center justify-between py-2">
                  <span className="text-sm text-gray-700">{DOCUMENT_NAMES[docType]}</span>
                  <div className="flex items-center gap-2">
                    {uploading ? (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-xs text-blue-600">Processing...</span>
                      </>
                    ) : document?.verified ? (
                      <>
                        <CheckCircle2 className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-green-600">Verified</span>
                      </>
                    ) : document ? (
                      <>
                        <AlertCircle className="w-4 h-4 text-red-500" />
                        <span className="text-xs text-red-600">Failed</span>
                      </>
                    ) : (
                      <>
                        <div className="w-4 h-4 border-2 border-gray-300 rounded-full"></div>
                        <span className="text-xs text-gray-500">Pending</span>
                      </>
                    )}
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="DynamicForm.tsx">
'use client'

import { useState, useEffect } from 'react'
import { ChevronLeft, ChevronRight, Save, Send, AlertCircle, CheckCircle2 } from 'lucide-react'
import { Question, VisaType } from '@/types'
import { api } from '@/utils/api'

interface DynamicFormProps {
  visaType: VisaType
  onSubmit?: (answers: Record<string, any>) => void
  onBack?: () => void
}

export default function DynamicForm({ visaType, onSubmit, onBack }: DynamicFormProps) {
  const [questions, setQuestions] = useState<Question[]>([])
  const [answers, setAnswers] = useState<Record<string, any>>({})
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)

  // Load questions when visa type changes
  useEffect(() => {
    loadQuestions()
  }, [visaType])

  // Auto-save answers
  useEffect(() => {
    if (Object.keys(answers).length > 0) {
      autoSave()
    }
  }, [answers])

  const loadQuestions = async () => {
    setIsLoading(true)
    try {
      const loadedQuestions = await api.getFormQuestions(visaType, answers)
      setQuestions(loadedQuestions)
    } catch (error) {
      console.error('Error loading questions:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const autoSave = async () => {
    setIsSaving(true)
    // Simulate auto-save
    setTimeout(() => setIsSaving(false), 500)
  }

  const validateAnswer = (question: Question, value: any): string | null => {
    if (question.required && (!value || value.toString().trim() === '')) {
      return 'This field is required'
    }

    if (question.validation) {
      if (question.type === 'number') {
        const numValue = parseFloat(value)
        if (question.validation.min && numValue < question.validation.min) {
          return question.validation.message || `Minimum value is ${question.validation.min}`
        }
        if (question.validation.max && numValue > question.validation.max) {
          return question.validation.message || `Maximum value is ${question.validation.max}`
        }
      }

      if (question.validation.pattern) {
        const regex = new RegExp(question.validation.pattern)
        if (!regex.test(value.toString())) {
          return question.validation.message || 'Invalid format'
        }
      }
    }

    return null
  }

  const handleAnswer = (questionId: string, value: any) => {
    const question = questions.find(q => q.id === questionId)
    if (!question) return

    // Validate the answer
    const error = validateAnswer(question, value)
    
    setErrors(prev => ({
      ...prev,
      [questionId]: error || ''
    }))

    setAnswers(prev => ({
      ...prev,
      [questionId]: value
    }))
  }

  const currentQuestion = questions[currentQuestionIndex]
  const progress = questions.length > 0 ? ((currentQuestionIndex + 1) / questions.length) * 100 : 0
  const canProceed = currentQuestion && answers[currentQuestion.id] && !errors[currentQuestion.id]
  const isLastQuestion = currentQuestionIndex === questions.length - 1

  const goToNext = () => {
    if (canProceed && !isLastQuestion) {
      setCurrentQuestionIndex(prev => prev + 1)
    }
  }

  const goToPrevious = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1)
    }
  }

  const handleSubmit = () => {
    if (onSubmit) {
      onSubmit(answers)
    }
  }

  const getVisaTypeTitle = (type: VisaType): string => {
    const titles = {
      tourist: 'Tourist Visa Application',
      business: 'Business Visa Application',
      student: 'Student Visa Application',
      work: 'Work Visa Application',
      family_visit: 'Family Visit Visa Application',
      transit: 'Transit Visa Application'
    }
    return titles[type] || 'Visa Application'
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your personalized form...</p>
        </div>
      </div>
    )
  }

  if (!currentQuestion) {
    return (
      <div className="text-center p-8">
        <AlertCircle className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-800 mb-2">No questions available</h3>
        <p className="text-gray-600">Please try again or contact support.</p>
      </div>
    )
  }

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-bold">{getVisaTypeTitle(visaType)}</h2>
            <p className="text-blue-100 text-sm mt-1">
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </div>
          <div className="flex items-center gap-2 text-sm">
            {isSaving && (
              <>
                <Save className="w-4 h-4 animate-pulse" />
                <span>Saving...</span>
              </>
            )}
          </div>
        </div>

        {/* Progress bar */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-blue-100 mb-2">
            <span>Progress</span>
            <span>{Math.round(progress)}% complete</span>
          </div>
          <div className="w-full bg-blue-500 bg-opacity-30 rounded-full h-2">
            <div 
              className="bg-white h-2 rounded-full transition-all duration-500 ease-out"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
      </div>

      {/* Question content */}
      <div className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {currentQuestion.text}
          </h3>

          {/* Answer input based on question type */}
          <div className="space-y-4">
            {currentQuestion.type === 'text' && (
              <div>
                <input
                  type="text"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Enter your answer..."
                />
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}

            {currentQuestion.type === 'select' && (
              <div className="grid gap-3">
                {currentQuestion.options?.map(option => (
                  <button
                    key={option}
                    onClick={() => handleAnswer(currentQuestion.id, option)}
                    className={`p-4 text-left border rounded-lg transition-all ${
                      answers[currentQuestion.id] === option
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-300 hover:border-blue-300 hover:bg-blue-50'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <span>{option}</span>
                      {answers[currentQuestion.id] === option && (
                        <CheckCircle2 className="w-5 h-5 text-blue-500" />
                      )}
                    </div>
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'number' && (
              <div>
                <input
                  type="number"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  min={currentQuestion.validation?.min}
                  max={currentQuestion.validation?.max}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Enter number..."
                />
                {currentQuestion.validation && (
                  <p className="text-gray-500 text-sm mt-2">
                    {currentQuestion.validation.min && currentQuestion.validation.max
                      ? `Enter a number between ${currentQuestion.validation.min} and ${currentQuestion.validation.max}`
                      : currentQuestion.validation.min
                      ? `Minimum: ${currentQuestion.validation.min}`
                      : currentQuestion.validation.max
                      ? `Maximum: ${currentQuestion.validation.max}`
                      : ''
                    }
                  </p>
                )}
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}

            {currentQuestion.type === 'date' && (
              <div>
                <input
                  type="date"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center pt-6 border-t">
          <button
            onClick={onBack || goToPrevious}
            className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
            disabled={currentQuestionIndex === 0 && !onBack}
          >
            <ChevronLeft className="w-4 h-4" />
            {currentQuestionIndex === 0 && onBack ? 'Back to Chat' : 'Previous'}
          </button>

          <div className="flex gap-3">
            {!isLastQuestion ? (
              <button
                onClick={goToNext}
                disabled={!canProceed}
                className="flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                Next
                <ChevronRight className="w-4 h-4" />
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                disabled={!canProceed}
                className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-4 h-4" />
                Submit Application
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Form summary sidebar (for larger screens) */}
      <div className="hidden lg:block fixed right-4 top-24 w-64 bg-white rounded-lg shadow-lg p-4 max-h-96 overflow-y-auto">
        <h4 className="font-semibold text-gray-800 mb-3">Your Answers</h4>
        <div className="space-y-2">
          {questions.slice(0, currentQuestionIndex + 1).map((q, index) => (
            <div key={q.id} className="text-sm">
              <p className="text-gray-600 font-medium">{q.text}</p>
              <p className="text-gray-800">{answers[q.id] || 'Not answered'}</p>
              {index < currentQuestionIndex && (
                <div className="w-full h-px bg-gray-200 my-2" />
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="index.tsx">
import React from 'react'

// Button Component
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline' | 'success' | 'warning' | 'error'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

export const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline',
    success: 'btn-success',
    warning: 'btn-warning',
    error: 'btn-error'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

// Card Component
interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
  compact?: boolean
  bordered?: boolean
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  className = '', 
  title, 
  compact = false,
  bordered = false 
}) => {
  const cardClasses = [
    'card',
    'bg-base-100',
    'shadow-lg',
    bordered ? 'card-bordered' : '',
    compact ? 'card-compact' : '',
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={cardClasses}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

// Loading Spinner Component
interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

// Loading Overlay Component
interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="loading-overlay">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

// Stats Components
interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

export const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

export const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

// Badge Component
interface BadgeProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'success' | 'warning' | 'error' | 'info'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  className?: string
}

export const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = ''
}) => {
  const variantClasses = {
    primary: 'badge-primary',
    secondary: 'badge-secondary',
    accent: 'badge-accent',
    ghost: 'badge-ghost',
    success: 'badge-success',
    warning: 'badge-warning',
    error: 'badge-error',
    info: 'badge-info'
  }
  
  const sizeClasses = {
    xs: 'badge-xs',
    sm: 'badge-sm',
    md: '',
    lg: 'badge-lg'
  }

  const badgeClasses = [
    'badge',
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={badgeClasses}>
      {children}
    </div>
  )
}
</file>

<file path="LoadingStates.tsx">
'use client'

import { Loader2, Bot, FileText, Upload, CheckCircle2 } from 'lucide-react'

// Generic loading spinner
export function LoadingSpinner({ size = 'md', className = '' }: { 
  size?: 'sm' | 'md' | 'lg', 
  className?: string 
}) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  }

  return (
    <Loader2 
      className={`animate-spin ${sizeClasses[size]} ${className}`} 
    />
  )
}

// Loading skeleton for text
export function TextSkeleton({ lines = 3, className = '' }: { 
  lines?: number, 
  className?: string 
}) {
  return (
    <div className={`space-y-2 ${className}`}>
      {Array.from({ length: lines }).map((_, i) => (
        <div
          key={i}
          className={`h-4 bg-gray-200 rounded animate-pulse ${
            i === lines - 1 ? 'w-3/4' : 'w-full'
          }`}
        />
      ))}
    </div>
  )
}

// Loading card skeleton
export function CardSkeleton({ className = '' }: { className?: string }) {
  return (
    <div className={`bg-white rounded-lg shadow p-6 ${className}`}>
      <div className="space-y-4">
        <div className="h-6 bg-gray-200 rounded w-1/3 animate-pulse" />
        <div className="space-y-2">
          <div className="h-4 bg-gray-200 rounded animate-pulse" />
          <div className="h-4 bg-gray-200 rounded w-5/6 animate-pulse" />
        </div>
        <div className="flex space-x-2">
          <div className="h-8 bg-gray-200 rounded w-20 animate-pulse" />
          <div className="h-8 bg-gray-200 rounded w-16 animate-pulse" />
        </div>
      </div>
    </div>
  )
}

// Chat loading animation
export function ChatLoading() {
  return (
    <div className="flex gap-3 justify-start">
      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
        <Bot className="w-5 h-5 text-white" />
      </div>
      <div className="bg-white px-4 py-3 rounded-2xl rounded-bl-sm shadow-sm border">
        <div className="flex gap-1">
          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
          <div 
            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" 
            style={{ animationDelay: '0.1s' }} 
          />
          <div 
            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" 
            style={{ animationDelay: '0.2s' }} 
          />
        </div>
      </div>
    </div>
  )
}

// Form loading overlay
export function FormLoading({ message = 'Loading...' }: { message?: string }) {
  return (
    <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10 rounded-lg">
      <div className="text-center">
        <LoadingSpinner size="lg" className="text-blue-500 mx-auto mb-4" />
        <p className="text-gray-600 font-medium">{message}</p>
      </div>
    </div>
  )
}

// Document upload loading
export function DocumentLoading({ fileName }: { fileName: string }) {
  return (
    <div className="space-y-3">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto" />
      <div className="text-center">
        <p className="text-blue-600 font-medium">Uploading & Verifying...</p>
        <p className="text-sm text-gray-600">{fileName}</p>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div className="bg-blue-500 h-2 rounded-full animate-pulse w-3/4" />
      </div>
    </div>
  )
}

// Progress loading with steps
export function StepLoading({ 
  steps, 
  currentStep 
}: { 
  steps: string[], 
  currentStep: number 
}) {
  return (
    <div className="space-y-4">
      <div className="text-center">
        <LoadingSpinner size="lg" className="text-blue-500 mx-auto mb-4" />
        <p className="text-lg font-medium text-gray-800">Processing...</p>
      </div>
      
      <div className="space-y-2">
        {steps.map((step, index) => (
          <div
            key={index}
            className={`flex items-center gap-3 p-2 rounded ${
              index < currentStep
                ? 'text-green-600'
                : index === currentStep
                ? 'text-blue-600 bg-blue-50'
                : 'text-gray-400'
            }`}
          >
            {index < currentStep ? (
              <CheckCircle2 className="w-5 h-5" />
            ) : index === currentStep ? (
              <LoadingSpinner size="sm" />
            ) : (
              <div className="w-5 h-5 border-2 border-gray-300 rounded-full" />
            )}
            <span className="text-sm">{step}</span>
          </div>
        ))}
      </div>
    </div>
  )
}

// Page loading screen
export function PageLoading({ message = 'Loading...' }: { message?: string }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center">
      <div className="text-center">
        <div className="relative">
          <div className="w-20 h-20 border-4 border-blue-200 rounded-full animate-spin" />
          <div className="absolute inset-0 w-20 h-20 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" />
        </div>
        <h2 className="text-2xl font-bold text-gray-800 mt-6 mb-2">VisaVerge</h2>
        <p className="text-gray-600">{message}</p>
      </div>
    </div>
  )
}

// Application submission loading
export function SubmissionLoading() {
  const steps = [
    'Validating your information',
    'Uploading documents',
    'Running security checks',
    'Generating application ID',
    'Submitting to embassy'
  ]

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
        <div className="text-center mb-6">
          <div className="w-16 h-16 border-4 border-blue-200 rounded-full animate-spin mx-auto mb-4">
            <div className="w-16 h-16 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" />
          </div>
          <h3 className="text-xl font-bold text-gray-800">Submitting Application</h3>
          <p className="text-gray-600 text-sm mt-2">This may take a few moments...</p>
        </div>

        <div className="space-y-3">
          {steps.map((step, index) => (
            <div key={index} className="flex items-center gap-3">
              <div className="w-6 h-6 flex items-center justify-center">
                {index < 2 ? (
                  <CheckCircle2 className="w-5 h-5 text-green-500" />
                ) : index === 2 ? (
                  <LoadingSpinner size="sm" className="text-blue-500" />
                ) : (
                  <div className="w-3 h-3 border-2 border-gray-300 rounded-full" />
                )}
              </div>
              <span className={`text-sm ${
                index < 2 ? 'text-green-600' : 
                index === 2 ? 'text-blue-600' : 
                'text-gray-400'
              }`}>
                {step}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="Notification.tsx">
'use client'

import { useState, useEffect, createContext, useContext, ReactNode } from 'react'
import { CheckCircle2, AlertCircle, Info, X, AlertTriangle } from 'lucide-react'

type NotificationType = 'success' | 'error' | 'warning' | 'info'

interface Notification {
  id: string
  type: NotificationType
  title: string
  message?: string
  duration?: number
  action?: {
    label: string
    onClick: () => void
  }
}

interface NotificationContextType {
  notifications: Notification[]
  addNotification: (notification: Omit<Notification, 'id'>) => void
  removeNotification: (id: string) => void
  clearAll: () => void
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined)

export function NotificationProvider({ children }: { children: ReactNode }) {
  const [notifications, setNotifications] = useState<Notification[]>([])

  const addNotification = (notification: Omit<Notification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9)
    const newNotification = { ...notification, id }
    
    setNotifications(prev => [...prev, newNotification])

    // Auto remove after duration (default 5 seconds)
    const duration = notification.duration ?? 5000
    if (duration > 0) {
      setTimeout(() => {
        removeNotification(id)
      }, duration)
    }
  }

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id))
  }

  const clearAll = () => {
    setNotifications([])
  }

  return (
    <NotificationContext.Provider value={{
      notifications,
      addNotification,
      removeNotification,
      clearAll
    }}>
      {children}
      <NotificationContainer />
    </NotificationContext.Provider>
  )
}

export function useNotifications() {
  const context = useContext(NotificationContext)
  if (!context) {
    throw new Error('useNotifications must be used within NotificationProvider')
  }
  return context
}

function NotificationContainer() {
  const { notifications } = useNotifications()

  return (
    <div className="fixed top-4 right-4 z-50 space-y-3 max-w-sm">
      {notifications.map(notification => (
        <NotificationItem key={notification.id} notification={notification} />
      ))}
    </div>
  )
}

function NotificationItem({ notification }: { notification: Notification }) {
  const { removeNotification } = useNotifications()
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    // Trigger entrance animation
    setTimeout(() => setIsVisible(true), 50)
  }, [])

  const handleClose = () => {
    setIsVisible(false)
    setTimeout(() => removeNotification(notification.id), 300)
  }

  const getIcon = () => {
    switch (notification.type) {
      case 'success':
        return <CheckCircle2 className="w-5 h-5 text-green-500" />
      case 'error':
        return <AlertCircle className="w-5 h-5 text-red-500" />
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />
      case 'info':
        return <Info className="w-5 h-5 text-blue-500" />
    }
  }

  const getBorderColor = () => {
    switch (notification.type) {
      case 'success':
        return 'border-l-green-500'
      case 'error':
        return 'border-l-red-500'
      case 'warning':
        return 'border-l-yellow-500'
      case 'info':
        return 'border-l-blue-500'
    }
  }

  return (
    <div
      className={`
        transform transition-all duration-300 ease-in-out
        ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}
        bg-white border-l-4 ${getBorderColor()} shadow-lg rounded-lg p-4 min-w-80
      `}
    >
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 pt-0.5">
          {getIcon()}
        </div>
        
        <div className="flex-1 min-w-0">
          <h4 className="text-sm font-semibold text-gray-900">
            {notification.title}
          </h4>
          {notification.message && (
            <p className="text-sm text-gray-600 mt-1">
              {notification.message}
            </p>
          )}
          {notification.action && (
            <button
              onClick={notification.action.onClick}
              className="text-sm text-blue-600 hover:text-blue-800 font-medium mt-2 underline"
            >
              {notification.action.label}
            </button>
          )}
        </div>

        <button
          onClick={handleClose}
          className="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  )
}

// Convenience hooks for different notification types
export function useSuccessNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'success', title, message })
  }
}

export function useErrorNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'error', title, message })
  }
}

export function useWarningNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'warning', title, message })
  }
}

export function useInfoNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'info', title, message })
  }
}

// Alert component for inline notifications
export function Alert({ 
  type, 
  title, 
  message, 
  onClose,
  className = ''
}: {
  type: NotificationType
  title: string
  message?: string
  onClose?: () => void
  className?: string
}) {
  const getIcon = () => {
    switch (type) {
      case 'success':
        return <CheckCircle2 className="w-5 h-5 text-green-500" />
      case 'error':
        return <AlertCircle className="w-5 h-5 text-red-500" />
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />
      case 'info':
        return <Info className="w-5 h-5 text-blue-500" />
    }
  }

  const getBgColor = () => {
    switch (type) {
      case 'success':
        return 'bg-green-50 border-green-200'
      case 'error':
        return 'bg-red-50 border-red-200'
      case 'warning':
        return 'bg-yellow-50 border-yellow-200'
      case 'info':
        return 'bg-blue-50 border-blue-200'
    }
  }

  return (
    <div className={`border rounded-lg p-4 ${getBgColor()} ${className}`}>
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 pt-0.5">
          {getIcon()}
        </div>
        
        <div className="flex-1 min-w-0">
          <h4 className="text-sm font-semibold text-gray-900">
            {title}
          </h4>
          {message && (
            <p className="text-sm text-gray-600 mt-1">
              {message}
            </p>
          )}
        </div>

        {onClose && (
          <button
            onClick={onClose}
            className="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>
    </div>
  )
}

// Banner component for important site-wide notifications
export function Banner({ 
  type, 
  message, 
  action,
  onClose 
}: {
  type: NotificationType
  message: string
  action?: {
    label: string
    onClick: () => void
  }
  onClose?: () => void
}) {
  const getBgColor = () => {
    switch (type) {
      case 'success':
        return 'bg-green-600'
      case 'error':
        return 'bg-red-600'
      case 'warning':
        return 'bg-yellow-600'
      case 'info':
        return 'bg-blue-600'
    }
  }

  return (
    <div className={`${getBgColor()} text-white`}>
      <div className="max-w-7xl mx-auto py-3 px-4">
        <div className="flex items-center justify-between flex-wrap">
          <div className="flex items-center gap-3">
            <div className="flex-shrink-0">
              {type === 'success' && <CheckCircle2 className="w-5 h-5" />}
              {type === 'error' && <AlertCircle className="w-5 h-5" />}
              {type === 'warning' && <AlertTriangle className="w-5 h-5" />}
              {type === 'info' && <Info className="w-5 h-5" />}
            </div>
            <p className="text-sm font-medium">{message}</p>
          </div>
          
          <div className="flex items-center gap-3">
            {action && (
              <button
                onClick={action.onClick}
                className="text-sm underline hover:no-underline font-medium"
              >
                {action.label}
              </button>
            )}
            {onClose && (
              <button
                onClick={onClose}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="StatusTracker.tsx">
'use client'

import { useState, useEffect } from 'react'
import { CheckCircle2, Clock, AlertCircle, FileText, Shield, Eye, Award } from 'lucide-react'
import { VisaApplication, ApplicationStatus } from '@/types'
import { api } from '@/utils/api'

interface StatusTrackerProps {
  applicationId: string
  onNewApplication?: () => void
}

interface StatusStep {
  status: ApplicationStatus
  title: string
  description: string
  icon: React.ReactNode
  estimatedDays?: number
  completed: boolean
  current: boolean
  timestamp?: Date
}

export default function StatusTracker({ applicationId, onNewApplication }: StatusTrackerProps) {
  const [application, setApplication] = useState<VisaApplication | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())

  useEffect(() => {
    loadApplicationStatus()
    
    // Poll for updates every 30 seconds for demo
    const interval = setInterval(loadApplicationStatus, 30000)
    return () => clearInterval(interval)
  }, [applicationId])

  const loadApplicationStatus = async () => {
    try {
      const data = await api.getApplicationStatus(applicationId)
      setApplication(data)
      setLastUpdate(new Date())
    } catch (error) {
      console.error('Error loading application status:', error)
    } finally {
      setIsLoading(false)
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading application status...</p>
        </div>
      </div>
    )
  }

  if (!application) {
    return (
      <div className="text-center p-8">
        <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-800 mb-2">Application not found</h3>
        <p className="text-gray-600 mb-4">Unable to load application status.</p>
        <button
          onClick={onNewApplication}
          className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
        >
          Start New Application
        </button>
      </div>
    )
  }

  // Define status steps
  const statusSteps: StatusStep[] = [
    {
      status: 'submitted',
      title: 'Application Submitted',
      description: 'Your application has been received and is in the queue for processing',
      icon: <FileText className="w-6 h-6" />,
      completed: ['submitted', 'document_review', 'background_check', 'officer_review', 'approved', 'rejected'].includes(application.status),
      current: application.status === 'submitted'
    },
    {
      status: 'document_review',
      title: 'Document Review',
      description: 'Our team is verifying your documents and checking for completeness',
      icon: <Eye className="w-6 h-6" />,
      estimatedDays: 2,
      completed: ['document_review', 'background_check', 'officer_review', 'approved', 'rejected'].includes(application.status),
      current: application.status === 'document_review'
    },
    {
      status: 'background_check',
      title: 'Background Verification',
      description: 'Security and background checks are being conducted',
      icon: <Shield className="w-6 h-6" />,
      estimatedDays: 5,
      completed: ['background_check', 'officer_review', 'approved', 'rejected'].includes(application.status),
      current: application.status === 'background_check'
    },
    {
      status: 'officer_review',
      title: 'Officer Review',
      description: 'A consular officer is reviewing your application for final decision',
      icon: <Eye className="w-6 h-6" />,
      estimatedDays: 3,
      completed: ['officer_review', 'approved', 'rejected'].includes(application.status),
      current: application.status === 'officer_review'
    },
    {
      status: 'approved',
      title: 'Decision Made',
      description: application.status === 'approved' ? 'Congratulations! Your visa has been approved' : 'A decision has been made on your application',
      icon: application.status === 'approved' ? <Award className="w-6 h-6" /> : <AlertCircle className="w-6 h-6" />,
      completed: ['approved', 'rejected'].includes(application.status),
      current: ['approved', 'rejected'].includes(application.status)
    }
  ]

  const currentStep = statusSteps.find(step => step.current)
  const completedSteps = statusSteps.filter(step => step.completed).length
  const progress = (completedSteps / statusSteps.length) * 100

  const getStatusColor = (status: ApplicationStatus) => {
    switch (status) {
      case 'approved': return 'text-green-600'
      case 'rejected': return 'text-red-600'
      case 'requires_interview': return 'text-yellow-600'
      default: return 'text-blue-600'
    }
  }

  const getStatusBg = (status: ApplicationStatus) => {
    switch (status) {
      case 'approved': return 'bg-green-50 border-green-200'
      case 'rejected': return 'bg-red-50 border-red-200'
      case 'requires_interview': return 'bg-yellow-50 border-yellow-200'
      default: return 'bg-blue-50 border-blue-200'
    }
  }

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className={`p-6 border-b ${getStatusBg(application.status)}`}>
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Application Status</h2>
            <p className="text-gray-600">Application ID: <span className="font-mono">{application.id}</span></p>
            <p className="text-gray-600">Visa Type: <span className="capitalize font-medium">{application.visaType}</span></p>
          </div>
          <div className="text-right">
            <p className={`text-lg font-semibold capitalize ${getStatusColor(application.status)}`}>
              {application.status.replace('_', ' ')}
            </p>
            <p className="text-sm text-gray-500">
              Last updated: {lastUpdate.toLocaleString()}
            </p>
          </div>
        </div>
      </div>

      {/* Progress Overview */}
      <div className="p-6 bg-gray-50 border-b">
        <div className="flex justify-between items-center mb-4">
          <h3 className="font-semibold text-gray-800">Processing Progress</h3>
          <span className="text-2xl font-bold text-blue-600">{Math.round(progress)}%</span>
        </div>
        
        <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
          <div 
            className={`h-3 rounded-full transition-all duration-1000 ${
              application.status === 'approved' ? 'bg-green-500' :
              application.status === 'rejected' ? 'bg-red-500' : 'bg-blue-500'
            }`}
            style={{ width: `${progress}%` }}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
          <div className="bg-white rounded-lg p-4">
            <p className="text-2xl font-bold text-blue-600">{completedSteps}</p>
            <p className="text-sm text-gray-600">Steps Completed</p>
          </div>
          {application.estimatedDecision && (
            <div className="bg-white rounded-lg p-4">
              <p className="text-2xl font-bold text-green-600">
                {Math.ceil((application.estimatedDecision.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))}
              </p>
              <p className="text-sm text-gray-600">Days Remaining</p>
            </div>
          )}
          {application.approvalProbability && (
            <div className="bg-white rounded-lg p-4">
              <p className="text-2xl font-bold text-green-600">{application.approvalProbability}%</p>
              <p className="text-sm text-gray-600">Approval Probability</p>
            </div>
          )}
        </div>
      </div>

      {/* Status Timeline */}
      <div className="p-6">
        <h3 className="font-semibold text-gray-800 mb-6">Application Timeline</h3>
        
        <div className="space-y-6">
          {statusSteps.map((step, index) => (
            <div key={step.status} className="flex gap-4">
              {/* Icon */}
              <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${
                step.completed 
                  ? application.status === 'approved' && step.status === 'approved'
                    ? 'bg-green-500 text-white'
                    : application.status === 'rejected' && step.status === 'approved'
                    ? 'bg-red-500 text-white'
                    : 'bg-blue-500 text-white'
                  : step.current
                  ? 'bg-blue-100 text-blue-600 border-2 border-blue-500'
                  : 'bg-gray-100 text-gray-400'
              }`}>
                {step.completed ? (
                  application.status === 'rejected' && step.status === 'approved' ? (
                    <AlertCircle className="w-6 h-6" />
                  ) : (
                    <CheckCircle2 className="w-6 h-6" />
                  )
                ) : step.current ? (
                  <Clock className="w-6 h-6 animate-pulse" />
                ) : (
                  step.icon
                )}
              </div>

              {/* Content */}
              <div className="flex-1 pb-6">
                <div className="flex justify-between items-start mb-2">
                  <h4 className={`font-medium ${
                    step.completed || step.current ? 'text-gray-800' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </h4>
                  {step.current && step.estimatedDays && (
                    <span className="text-sm text-blue-600 font-medium">
                      ~{step.estimatedDays} days
                    </span>
                  )}
                </div>
                
                <p className={`text-sm ${
                  step.completed || step.current ? 'text-gray-600' : 'text-gray-400'
                }`}>
                  {step.description}
                </p>

                {step.completed && step.timestamp && (
                  <p className="text-xs text-green-600 mt-1">
                    Completed on {step.timestamp.toLocaleDateString()}
                  </p>
                )}

                {step.current && (
                  <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-800">
                      <strong>Current Status:</strong> This step is currently being processed. 
                      {step.estimatedDays && ` Expected completion in ${step.estimatedDays} days.`}
                    </p>
                  </div>
                )}
              </div>

              {/* Connecting line */}
              {index < statusSteps.length - 1 && (
                <div className="absolute left-[68px] mt-12 w-px h-6 bg-gray-300" />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Next Steps */}
      <div className="p-6 bg-gray-50 border-t">
        <h3 className="font-semibold text-gray-800 mb-3">What happens next?</h3>
        
        {application.status === 'approved' && (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <p className="text-green-800">
              🎉 <strong>Congratulations!</strong> Your visa has been approved. You should receive your passport with the visa within 5-7 business days.
            </p>
          </div>
        )}

        {application.status === 'rejected' && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-800">
              <strong>Application Decision:</strong> Unfortunately, your visa application was not approved. You will receive a detailed explanation letter shortly.
            </p>
          </div>
        )}

        {!['approved', 'rejected'].includes(application.status) && (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-blue-800">
              <strong>No action required.</strong> We're processing your application and will notify you of any updates. 
              You can check this page anytime for the latest status.
            </p>
          </div>
        )}

        <div className="mt-4 flex gap-3">
          <button
            onClick={loadApplicationStatus}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            Refresh Status
          </button>
          
          <button
            onClick={onNewApplication}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            New Application
          </button>
        </div>
      </div>
    </div>
  )
}
</file>

</files>
