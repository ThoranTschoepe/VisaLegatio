This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
app/
  backend/
    routes/
      __init__.py
      analytics.py
      applications.py
      chat.py
      documents.py
      officers.py
    database.py
    main.py
    models.py
    README.md
    requirements.txt
    run.py
    utils.py
  frontend/
    visaverge-user/
      app/
        embassy/
          layout.tsx
          loading.tsx
          page.tsx
        globals.css
        layout.tsx
        page.tsx
      components/
        Alert/
          AlertContainer.tsx
        Embassy/
          AnalyticsDashboard.tsx
          ApplicationReview.tsx
          EmbassyDashboard.tsx
          EmbassyLogin.tsx
          index.tsx
        Layout/
          DarkModeSwitcher/
            DarkModeSelect/
              DarkModeSelect.tsx
            DarkModeSwitcher.tsx
          Footer/
            Footer.tsx
          Navbar/
            Navbar.tsx
          Layout.tsx
        UI/
          Button.tsx
          Card.tsx
          index.tsx
          LoadingOverlay.tsx
          LoadingSpinner.tsx
          Stats.tsx
        ApplicationSubmitted.tsx
        ChatInterface.tsx
        DocumentUpload.tsx
        DynamicForm.tsx
        index.tsx
        LoadingStates.tsx
        Notification.tsx
        QRScannerPopup.tsx
        StatusLogin.tsx
        StatusTracker.tsx
      lib/
        constants/
          theme.constants.ts
        stores/
          alert.store.ts
      public/
        file.svg
        globe.svg
        next.svg
        vercel.svg
        window.svg
      types/
        embassy.types.ts
        index.ts
      utils/
        api.ts
        helpers.ts
      .gitignore
      eslint.config.mjs
      next.config.ts
      package.json
      postcss.config.mjs
      README.md
      tailwind.config.js
      tsconfig.json
    package.json
.gitignore
features_2.md
features.md
notion_page.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/frontend/visaverge-user/components/ApplicationSubmitted.tsx">
import React, { useState, useEffect } from 'react'
import { CheckCircle2, Copy, Download, Upload, ArrowRight, QrCode, Lock, Eye, EyeOff, AlertTriangle, Clock, Shield, FileText } from 'lucide-react'

interface ApplicationSubmittedProps {
  applicationId: string
  onContinueToDocuments: () => void
  onSkipToTracking: () => void
}

export default function ApplicationSubmitted({ 
  applicationId, 
  onContinueToDocuments, 
  onSkipToTracking 
}: ApplicationSubmittedProps) {
  const [qrCodeUrl, setQrCodeUrl] = useState('')
  const [copied, setCopied] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  
  // Generate access URL and QR code with correct format
  const accessUrl = `${typeof window !== 'undefined' ? window.location.origin : ''}/?step=status-login&id=${applicationId}`
  const documentUploadUrl = `${typeof window !== 'undefined' ? window.location.origin : ''}/?step=status-login&id=${applicationId}&action=upload-documents`
  const password = localStorage.getItem(`app_${applicationId}_password`) || 'TEMP123'

  useEffect(() => {
    // Generate QR code using a free QR code API with the document upload URL
    const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=${encodeURIComponent(documentUploadUrl)}`
    setQrCodeUrl(qrApiUrl)
  }, [documentUploadUrl])

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy:', err)
    }
  }

  const downloadQRCode = () => {
    const link = document.createElement('a')
    link.href = qrCodeUrl
    link.download = `visa-application-${applicationId}.png`
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
  }

  // Test QR code by opening it
  const testQRCode = () => {
    window.open(documentUploadUrl, '_blank')
  }

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Success Header */}
      <div className="bg-gradient-to-r from-green-500 to-emerald-600 text-white p-8 text-center">
        <div className="flex justify-center mb-4">
          <div className="w-16 h-16 bg-white rounded-full flex items-center justify-center">
            <CheckCircle2 className="w-10 h-10 text-green-500" />
          </div>
        </div>
        
        <h1 className="text-3xl font-bold mb-2">Application Submitted Successfully!</h1>
        <p className="text-green-100 text-lg">
          Your visa application has been received and is in our system
        </p>
        
        <div className="mt-4 bg-white/20 rounded-lg p-4 inline-block">
          <p className="text-sm text-green-100 mb-1">Application ID</p>
          <p className="text-2xl font-mono font-bold">{applicationId}</p>
        </div>
      </div>

      {/* Processing Status Alert */}
      <div className="bg-orange-50 border-b-4 border-orange-200 p-6">
        <div className="flex items-start gap-4">
          <div className="flex-shrink-0">
            <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
              <AlertTriangle className="w-6 h-6 text-orange-600" />
            </div>
          </div>
          <div className="flex-1">
            <h3 className="text-lg font-semibold text-orange-900 mb-2">
              Processing On Hold - Documents Required
            </h3>
            <p className="text-orange-800 mb-3">
              Your application has been successfully submitted and assigned a unique ID. However, 
              <strong> processing cannot begin until you upload the required documents</strong>.
            </p>
            <div className="bg-orange-100 rounded-lg p-3 mb-3">
              <h4 className="font-semibold text-orange-900 text-sm mb-2">Current Status:</h4>
              <ul className="text-orange-800 text-sm space-y-1">
                <li className="flex items-center gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-600" />
                  Application received and ID assigned
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle2 className="w-4 h-4 text-green-600" />
                  QR code and access credentials generated
                </li>
                <li className="flex items-center gap-2">
                  <AlertTriangle className="w-4 h-4 text-orange-600" />
                  Waiting for required documents to start processing
                </li>
                <li className="flex items-center gap-2">
                  <Clock className="w-4 h-4 text-gray-500" />
                  Processing timer will start after document upload
                </li>
              </ul>
            </div>
            <div className="flex flex-col sm:flex-row gap-3">
              <button
                onClick={onContinueToDocuments}
                className="px-6 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors font-medium"
              >
                <Upload className="w-4 h-4 inline mr-2" />
                Upload Required Documents Now
              </button>
              <button
                onClick={onSkipToTracking}
                className="px-6 py-2 border border-orange-300 text-orange-700 rounded-lg hover:bg-orange-50 transition-colors"
              >
                Skip For Now (Processing Blocked)
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="p-8">
        {/* QR Code and Access Info */}
        <div className="grid md:grid-cols-2 gap-8 mb-8">
          <div className="text-center">
            <h3 className="text-xl font-semibold mb-4 flex items-center justify-center gap-2">
              <QrCode className="w-6 h-6 text-blue-600" />
              Quick Access QR Code
            </h3>
            
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-6">
              {qrCodeUrl ? (
                <img 
                  src={qrCodeUrl} 
                  alt="QR Code for Application Access"
                  className="w-48 h-48 mx-auto mb-4"
                />
              ) : (
                <div className="w-48 h-48 bg-gray-200 rounded-lg flex items-center justify-center mx-auto mb-4">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                </div>
              )}
              
              <p className="text-sm text-gray-600 mb-4">
                Scan this QR code to quickly access your application and upload required documents
              </p>
              
              <div className="space-y-2">
                <button
                  onClick={testQRCode}
                  className="btn btn-primary btn-sm w-full"
                >
                  <QrCode className="w-4 h-4 mr-2" />
                  Test QR Code Link
                </button>
                <button
                  onClick={downloadQRCode}
                  className="btn btn-outline btn-sm w-full"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download QR Code
                </button>
              </div>
            </div>
          </div>

          <div>
            <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
              <Lock className="w-6 h-6 text-blue-600" />
              Access Information
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Application URL
                </label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    value={accessUrl}
                    readOnly
                    className="input input-bordered flex-1 text-sm"
                  />
                  <button
                    onClick={() => copyToClipboard(accessUrl)}
                    className={`btn ${copied ? 'btn-success' : 'btn-outline'}`}
                  >
                    <Copy className="w-4 h-4" />
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Access Password
                </label>
                <div className="flex gap-2">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    readOnly
                    className="input input-bordered flex-1 font-mono"
                  />
                  <button
                    onClick={() => setShowPassword(!showPassword)}
                    className="btn btn-outline btn-square"
                  >
                    {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                  </button>
                  <button
                    onClick={() => copyToClipboard(password)}
                    className={`btn ${copied ? 'btn-success' : 'btn-outline'}`}
                  >
                    <Copy className="w-4 h-4" />
                  </button>
                </div>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-900 text-sm mb-2">📱 QR Code Usage</h4>
                <ul className="text-blue-800 text-sm space-y-1">
                  <li>• Save the QR code image to your phone</li>
                  <li>• Scan it with any QR code scanner app</li>
                  <li>• It will take you directly to the status page</li>
                  <li>• Enter your password to access your application</li>
                  <li>• Upload documents directly from your phone</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Processing Pipeline */}
        <div className="bg-gray-50 rounded-lg p-6 mb-6">
          <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
            <Shield className="w-6 h-6 text-blue-600" />
            Processing Pipeline
          </h3>
          
          <div className="space-y-4">
            {/* Step 1 - Complete */}
            <div className="flex items-center gap-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <div className="w-10 h-10 bg-green-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
                <CheckCircle2 className="w-6 h-6" />
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-green-900">Step 1: Application Submitted</h4>
                <p className="text-green-800 text-sm">
                  Your application has been received and assigned ID {applicationId}
                </p>
              </div>
              <span className="text-green-600 font-semibold text-sm">✓ Complete</span>
            </div>

            {/* Step 2 - Blocked */}
            <div className="flex items-center gap-4 p-4 bg-red-50 border border-red-200 rounded-lg">
              <div className="w-10 h-10 bg-red-500 text-white rounded-full flex items-center justify-center flex-shrink-0">
                <AlertTriangle className="w-6 h-6" />
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-red-900">Step 2: Required Documents</h4>
                <p className="text-red-800 text-sm">
                  Upload mandatory documents to enable processing to continue
                </p>
              </div>
              <span className="text-red-600 font-semibold text-sm">⚠ Blocked</span>
            </div>

            {/* Step 3 - Waiting */}
            <div className="flex items-center gap-4 p-4 bg-gray-50 border border-gray-200 rounded-lg opacity-60">
              <div className="w-10 h-10 bg-gray-300 text-white rounded-full flex items-center justify-center flex-shrink-0">
                <Clock className="w-6 h-6" />
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-gray-700">Step 3: Document Review</h4>
                <p className="text-gray-600 text-sm">
                  Embassy officers will verify your documents
                </p>
              </div>
              <span className="text-gray-500 font-semibold text-sm">Waiting</span>
            </div>

            {/* Step 4 - Waiting */}
            <div className="flex items-center gap-4 p-4 bg-gray-50 border border-gray-200 rounded-lg opacity-60">
              <div className="w-10 h-10 bg-gray-300 text-white rounded-full flex items-center justify-center flex-shrink-0">
                <Clock className="w-6 h-6" />
              </div>
              <div className="flex-1">
                <h4 className="font-semibold text-gray-700">Step 4: Processing & Decision</h4>
                <p className="text-gray-600 text-sm">
                  Background checks and final decision making
                </p>
              </div>
              <span className="text-gray-500 font-semibold text-sm">Waiting</span>
            </div>
          </div>

          <div className="mt-4 p-4 bg-orange-100 border border-orange-200 rounded-lg">
            <p className="text-orange-800 text-sm">
              <strong>⚠ Processing Note:</strong> Your application will remain in "Document Collection" 
              status until all required documents are uploaded and verified. The processing timeline 
              only begins after document requirements are satisfied.
            </p>
          </div>
        </div>

        {/* Timeline Information */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold mb-3 flex items-center gap-2">
              <FileText className="w-5 h-5 text-blue-600" />
              Document Requirements
            </h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Required Documents</span>
                <span className="font-bold text-red-600">0/3 uploaded</span>
              </div>
              <div className="flex justify-between">
                <span>Optional Documents</span>
                <span className="font-bold text-blue-600">0/2 uploaded</span>
              </div>
              <div className="flex justify-between">
                <span>Processing Status</span>
                <span className="font-bold text-orange-600">On Hold</span>
              </div>
              <div className="flex justify-between border-t pt-2 mt-2">
                <span>Next Action Required</span>
                <span className="font-bold text-red-600">Upload Documents</span>
              </div>
            </div>
          </div>

          <div className="bg-white border border-gray-200 rounded-lg p-4">
            <h4 className="font-semibold mb-3">Estimated Timeline (After Documents)</h4>
            <div className="space-y-2 text-sm">
              <div className="flex justify-between">
                <span>Document Review</span>
                <span className="text-blue-600 font-medium">1-2 days</span>
              </div>
              <div className="flex justify-between">
                <span>Background Check</span>
                <span className="text-blue-600 font-medium">3-5 days</span>
              </div>
              <div className="flex justify-between">
                <span>Officer Review</span>
                <span className="text-blue-600 font-medium">2-3 days</span>
              </div>
              <div className="flex justify-between">
                <span>Final Decision</span>
                <span className="text-blue-600 font-medium">1-2 days</span>
              </div>
              <div className="border-t pt-2 mt-2">
                <div className="flex justify-between">
                  <span>Total Time</span>
                  <span className="text-green-600 font-bold">7-12 days</span>
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  *Timeline starts after required documents uploaded
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <button
            onClick={onContinueToDocuments}
            className="btn btn-error btn-lg text-white"
          >
            <Upload className="w-5 h-5 mr-2" />
            Upload Required Documents Now
          </button>
          
          <button
            onClick={onSkipToTracking}
            className="btn btn-outline btn-lg"
          >
            View Status (Processing Blocked)
            <ArrowRight className="w-5 h-5 ml-2" />
          </button>
        </div>

        <div className="text-center mt-6">
          <p className="text-sm text-gray-600">
            <strong>Important:</strong> You can upload documents later using your QR code, 
            but processing cannot begin until all required documents are provided.
          </p>
        </div>

        {/* Important Notes */}
        <div className="mt-8 bg-red-50 border border-red-200 rounded-lg p-4">
          <h4 className="font-semibold text-red-900 mb-2">🚨 Critical Information</h4>
          <ul className="text-red-800 text-sm space-y-1">
            <li>• <strong>Processing is currently blocked</strong> until required documents are uploaded</li>
            <li>• Your application will remain in "Document Collection" status</li>
            <li>• The official processing timeline begins after document verification</li>
            <li>• Required documents are mandatory - optional documents may improve approval chances</li>
            <li>• You can check status anytime, but processing won't advance without documents</li>
            <li>• Keep your QR code and password secure for future access</li>
          </ul>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/QRScannerPopup.tsx">
import React, { useState } from 'react'
import { QrCode, Camera, X, FileText, GraduationCap, Briefcase, Upload } from 'lucide-react'

interface QRScannerPopupProps {
  onScanResult: (applicationId: string, password: string) => void
  onClose: () => void
}

export default function QRScannerPopup({ onScanResult, onClose }: QRScannerPopupProps) {
  const [isScanning, setIsScanning] = useState(false)
  const [manualEntry, setManualEntry] = useState('')

  const handleDemoScan = (appId: string, password: string, type: string) => {
    setIsScanning(true)
    
    // Simulate scanning delay
    setTimeout(() => {
      onScanResult(appId, password)
      setIsScanning(false)
    }, 1500)
  }

  const handleManualEntry = () => {
    if (!manualEntry.trim()) {
      alert('Please enter a QR code URL')
      return
    }

    try {
      const url = new URL(manualEntry)
      const appId = url.searchParams.get('id')
      
      if (appId) {
        setIsScanning(true)
        setTimeout(() => {
          onScanResult(appId, '')
          setIsScanning(false)
        }, 1000)
      } else {
        alert('Invalid QR code URL - no application ID found')
      }
    } catch (error) {
      alert('Invalid URL format. Please enter a valid VisaVerge QR code URL.')
    }
  }

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      // In a real app, this would process the QR code image
      // For demo, we'll simulate reading it
      setIsScanning(true)
      setTimeout(() => {
        // Simulate extracting data from QR code image - use existing demo ID
        const demoId = 'VSV-240104-G7H8'
        onScanResult(demoId, 'DEMO999')
        setIsScanning(false)
      }, 2000)
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-t-lg">
          <div className="flex items-center gap-2">
            <QrCode className="w-6 h-6" />
            <h2 className="text-lg font-semibold">QR Code Scanner</h2>
          </div>
          <button
            onClick={onClose}
            className="btn btn-ghost btn-sm btn-circle text-white hover:bg-white/20"
          >
            <X className="w-4 h-4" />
          </button>
        </div>

        <div className="p-6">
          {/* Scanner Area */}
          <div className="relative mb-6">
            <div className="w-80 h-80 border-4 border-dashed border-blue-300 rounded-lg bg-blue-50 flex items-center justify-center mx-auto relative overflow-hidden">
              {isScanning ? (
                <div className="text-center">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                  <p className="text-blue-600 font-medium">Scanning QR Code...</p>
                  <p className="text-sm text-gray-600">Please wait</p>
                </div>
              ) : (
                <div className="text-center">
                  <Camera className="w-16 h-16 text-blue-400 mx-auto mb-4" />
                  <p className="text-gray-600 font-medium">Position QR code here</p>
                  <p className="text-sm text-gray-500">Camera would activate in real app</p>
                </div>
              )}
              
              {/* Scanning overlay effect */}
              {isScanning && (
                <div className="absolute inset-0">
                  <div className="w-full h-1 bg-red-500 opacity-80 animate-pulse absolute top-1/2 transform -translate-y-1/2"></div>
                </div>
              )}
            </div>
          </div>

          {/* Manual Entry Section */}
          <div className="mb-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
            <h3 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
              <Upload className="w-5 h-5 text-blue-600" />
              Manual Entry Options
            </h3>
            
            <div className="space-y-3">
              {/* URL Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Paste QR Code URL:
                </label>
                <div className="flex gap-2">
                  <input
                    type="text"
                    placeholder="https://visaverge.com/?step=status-login&id=..."
                    className="input input-bordered input-sm flex-1 text-xs"
                    value={manualEntry}
                    onChange={(e) => setManualEntry(e.target.value)}
                    disabled={isScanning}
                  />
                  <button
                    onClick={handleManualEntry}
                    disabled={isScanning || !manualEntry.trim()}
                    className="btn btn-primary btn-sm"
                  >
                    Scan
                  </button>
                </div>
              </div>

              {/* File Upload */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Upload QR Code Image:
                </label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleFileUpload}
                  disabled={isScanning}
                  className="file-input file-input-bordered file-input-sm w-full"
                />
              </div>
            </div>
          </div>

          {/* Demo Buttons */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
            <div className="flex items-center gap-2 mb-3">
              <QrCode className="w-5 h-5 text-yellow-600" />
              <h3 className="font-semibold text-yellow-900">Demo QR Codes</h3>
            </div>
            <p className="text-yellow-800 text-sm mb-3">
              In a real implementation, you would scan actual QR codes. For demo purposes, try these:
            </p>
            
            <div className="space-y-2">
              <button
                onClick={() => handleDemoScan('VSV-240101-A1B2', 'DEMO123', 'business')}
                disabled={isScanning}
                className="w-full p-3 bg-white border border-yellow-300 rounded-lg hover:bg-yellow-50 transition-colors text-left flex items-center gap-3"
              >
                <Briefcase className="w-5 h-5 text-blue-600" />
                <div>
                  <p className="font-medium text-gray-900">Business Visa Application</p>
                  <p className="text-sm text-gray-600">VSV-240101-A1B2</p>
                </div>
              </button>

              <button
                onClick={() => handleDemoScan('VSV-240102-C3D4', 'DEMO456', 'tourist')}
                disabled={isScanning}
                className="w-full p-3 bg-white border border-yellow-300 rounded-lg hover:bg-yellow-50 transition-colors text-left flex items-center gap-3"
              >
                <FileText className="w-5 h-5 text-green-600" />
                <div>
                  <p className="font-medium text-gray-900">Tourist Visa Application</p>
                  <p className="text-sm text-gray-600">VSV-240102-C3D4</p>
                </div>
              </button>

              <button
                onClick={() => handleDemoScan('VSV-240103-E5F6', 'DEMO789', 'student')}
                disabled={isScanning}
                className="w-full p-3 bg-white border border-yellow-300 rounded-lg hover:bg-yellow-50 transition-colors text-left flex items-center gap-3"
              >
                <GraduationCap className="w-5 h-5 text-purple-600" />
                <div>
                  <p className="font-medium text-gray-900">Student Visa Application</p>
                  <p className="text-sm text-gray-600">VSV-240103-E5F6</p>
                </div>
              </button>

              <button
                onClick={() => handleDemoScan('VSV-240104-G7H8', 'DEMO999', 'work')}
                disabled={isScanning}
                className="w-full p-3 bg-white border border-yellow-300 rounded-lg hover:bg-yellow-50 transition-colors text-left flex items-center gap-3"
              >
                <Briefcase className="w-5 h-5 text-orange-600" />
                <div>
                  <p className="font-medium text-gray-900">Work Visa Application</p>
                  <p className="text-sm text-gray-600">VSV-240104-G7H8</p>
                </div>
              </button>
            </div>
          </div>

          {/* Instructions */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-semibold text-blue-900 text-sm mb-2">📱 QR Code Instructions</h4>
            <ul className="text-blue-800 text-sm space-y-1">
              <li>• <strong>Camera Scanning:</strong> Real app would request camera permission</li>
              <li>• <strong>Manual Entry:</strong> Paste the URL from your QR code above</li>
              <li>• <strong>File Upload:</strong> Upload a saved QR code image</li>
              <li>• <strong>Demo Mode:</strong> Use the demo buttons for testing</li>
              <li>• <strong>Auto-Extract:</strong> Application ID extracted automatically</li>
              <li>• <strong>Security:</strong> All QR codes are validated before processing</li>
            </ul>
          </div>

          {/* Additional Features Info */}
          <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
            <h4 className="font-semibold text-green-900 text-sm mb-2">✨ Features</h4>
            <div className="text-green-800 text-xs space-y-1">
              <p>• Works with any VisaVerge QR code</p>
              <p>• Validates URL format and application ID</p>
              <p>• Supports both URL and image scanning</p>
              <p>• Secure processing with error handling</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/StatusLogin.tsx">
import React, { useState, useEffect } from 'react'
import { Search, Lock, Eye, EyeOff, QrCode, FileText, Shield, AlertCircle } from 'lucide-react'

// QR Scanner Popup Component (inline for demo)
const QRScannerPopup = ({ onScanResult, onClose }) => {
  const [isScanning, setIsScanning] = useState(false)

  const handleDemoScan = (appId, password) => {
    setIsScanning(true)
    setTimeout(() => {
      onScanResult(appId, password)
      setIsScanning(false)
    }, 1500)
  }

  const handleManualQREntry = () => {
    const qrUrl = prompt('Paste your QR code URL here:')
    if (qrUrl) {
      try {
        const url = new URL(qrUrl)
        const appId = url.searchParams.get('id')
        if (appId) {
          onScanResult(appId, '')
        } else {
          alert('Invalid QR code URL - no application ID found')
        }
      } catch (error) {
        alert('Invalid URL format')
      }
    }
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div className="flex items-center justify-between p-4 border-b">
          <div className="flex items-center gap-2">
            <QrCode className="w-6 h-6 text-blue-600" />
            <h2 className="text-lg font-semibold">QR Code Scanner</h2>
          </div>
          <button onClick={onClose} className="btn btn-ghost btn-sm btn-circle">✕</button>
        </div>

        <div className="p-6">
          <div className="w-64 h-64 border-4 border-dashed border-blue-300 rounded-lg bg-blue-50 flex items-center justify-center mx-auto mb-6">
            {isScanning ? (
              <div className="text-center">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
                <p className="text-blue-600 font-medium">Scanning...</p>
              </div>
            ) : (
              <div className="text-center">
                <QrCode className="w-16 h-16 text-blue-400 mx-auto mb-2" />
                <p className="text-gray-600 text-sm">Position QR code here</p>
              </div>
            )}
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
            <h3 className="font-semibold text-yellow-900 mb-2">Test Options</h3>
            <div className="space-y-2">
              <button
                onClick={() => handleDemoScan('VSV-240101-A1B2', 'DEMO123')}
                disabled={isScanning}
                className="w-full p-2 bg-white border rounded text-left text-sm"
              >
                📄 Business Visa (VSV-240101-A1B2)
              </button>
              <button
                onClick={() => handleDemoScan('VSV-240102-C3D4', 'DEMO456')}
                disabled={isScanning}
                className="w-full p-2 bg-white border rounded text-left text-sm"
              >
                🏖️ Tourist Visa (VSV-240102-C3D4)
              </button>
              <button
                onClick={handleManualQREntry}
                disabled={isScanning}
                className="w-full p-2 bg-blue-100 border border-blue-300 rounded text-left text-sm"
              >
                📱 Paste QR URL Manually
              </button>
            </div>
          </div>

          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
            <h4 className="font-semibold text-blue-900 text-sm mb-2">💡 How to Use</h4>
            <ul className="text-blue-800 text-xs space-y-1">
              <li>• Use demo buttons above for testing</li>
              <li>• Or paste a real QR code URL manually</li>
              <li>• Real camera scanning would work in production</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  )
}

interface StatusLoginProps {
  onAccessApplication: (applicationId: string, password: string) => Promise<void>
  onBack: () => void
  prefilledApplicationId?: string
}

export default function StatusLogin({ onAccessApplication, onBack, prefilledApplicationId = '' }: StatusLoginProps) {
  const [applicationId, setApplicationId] = useState('')
  const [password, setPassword] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')
  const [showQRScanner, setShowQRScanner] = useState(false)

  // Auto-fill application ID if provided via QR code
  useEffect(() => {
    if (prefilledApplicationId) {
      setApplicationId(prefilledApplicationId)
    }
  }, [prefilledApplicationId])

  const handleSubmit = async () => {
    setError('')
    
    if (!applicationId.trim()) {
      setError('Please enter your application ID')
      return
    }
    
    if (!password.trim()) {
      setError('Please enter your password')
      return
    }

    setIsLoading(true)
    
    try {
      // Call the parent component's access handler (now async)
      await onAccessApplication(applicationId.trim(), password.trim())
    } catch (err) {
      setError('Invalid application ID or password. Please try again.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleQRScan = () => {
    setShowQRScanner(true)
  }

  const handleQRScanResult = async (appId, pass) => {
    setApplicationId(appId)
    if (pass) {
      setPassword(pass)
    }
    setShowQRScanner(false)
    
    // If we got both ID and password from demo, auto-submit
    if (appId && pass) {
      setTimeout(async () => {
        try {
          await onAccessApplication(appId, pass)
        } catch (error) {
          setError('Auto-login failed. Please try manually.')
        }
      }, 500)
    }
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !isLoading) {
      handleSubmit()
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-gray-50 to-blue-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-primary rounded-full">
              <FileText className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-800">VisaVerge</h1>
          </div>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">Check Application Status</h2>
          <p className="text-gray-600">Enter your application details to view progress</p>
          
          {prefilledApplicationId && (
            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
              <p className="text-green-800 text-sm">
                ✅ QR code scanned! Application ID auto-filled. Please enter your password.
              </p>
            </div>
          )}
        </div>

        {/* Login Card */}
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body">
            <div className="space-y-6">
              {/* Application ID */}
              <div className="form-control">
                <label className="label">
                  <span className="label-text flex items-center gap-2">
                    <FileText className="w-4 h-4" />
                    Application ID
                  </span>
                </label>
                <div className="relative">
                  <input 
                    type="text" 
                    placeholder="e.g., VSV-240101-A1B2"
                    className={`input input-bordered w-full pr-12 font-mono ${
                      prefilledApplicationId ? 'input-success' : ''
                    }`}
                    value={applicationId}
                    onChange={(e) => setApplicationId(e.target.value.toUpperCase())}
                    onKeyPress={handleKeyPress}
                    required
                  />
                  <button
                    type="button"
                    onClick={handleQRScan}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-blue-500 transition-colors"
                    title="Scan QR Code"
                  >
                    <QrCode className="w-5 h-5" />
                  </button>
                </div>
                <label className="label">
                  <span className="label-text-alt text-gray-500">
                    {prefilledApplicationId 
                      ? '✅ Auto-filled from QR code' 
                      : 'Found in your confirmation email or scan your QR code'
                    }
                  </span>
                </label>
              </div>

              {/* QR Code Scanner Section */}
              <div className="form-control">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <QrCode className="w-6 h-6 text-blue-600" />
                    <h4 className="font-semibold text-blue-900">Have a QR Code?</h4>
                  </div>
                  <p className="text-blue-800 text-sm mb-3">
                    Scan the QR code you received when submitting your application for instant access.
                  </p>
                  <button
                    type="button"
                    onClick={handleQRScan}
                    className="btn btn-primary btn-sm w-full"
                  >
                    <QrCode className="w-4 h-4 mr-2" />
                    Open QR Scanner
                  </button>
                  <p className="text-xs text-blue-700 mt-2 text-center">
                    Scan your application QR code for instant login
                  </p>
                </div>
              </div>

              {/* Password */}
              <div className="form-control">
                <label className="label">
                  <span className="label-text flex items-center gap-2">
                    <Lock className="w-4 h-4" />
                    Access Password
                  </span>
                </label>
                <div className="relative">
                  <input 
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Enter your access password"
                    className="input input-bordered w-full pr-12 font-mono" 
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    onKeyPress={handleKeyPress}
                    required
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-blue-500"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
                <label className="label">
                  <span className="label-text-alt text-gray-500">
                    The password you set when submitting your application
                  </span>
                </label>
              </div>

              {/* Error Message */}
              {error && (
                <div className="alert alert-error">
                  <AlertCircle className="w-5 h-5" />
                  <span>{error}</span>
                </div>
              )}

              {/* Submit Button */}
              <button 
                onClick={handleSubmit}
                className="btn btn-primary w-full"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    Accessing Application...
                  </>
                ) : (
                  <>
                    <Search className="w-5 h-5 mr-2" />
                    View Application Status
                  </>
                )}
              </button>
            </div>

            {/* Help Section */}
            <div className="divider">Need Help?</div>
            
            <div className="space-y-3">
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3">
                <h4 className="font-semibold text-blue-900 text-sm mb-2">Can't find your information?</h4>
                <ul className="text-blue-800 text-xs space-y-1">
                  <li>• Check your email confirmation for the application ID</li>
                  <li>• Use the QR code you saved when submitting</li>
                  <li>• Make sure you're entering the password correctly</li>
                  <li>• Contact support if you've lost your access details</li>
                </ul>
              </div>

              <button
                onClick={onBack}
                className="btn btn-ghost btn-sm w-full"
              >
                ← Back to Home
              </button>
            </div>
          </div>
        </div>

        {/* Demo Access */}
        <div className="mt-6 card bg-base-100 shadow">
          <div className="card-body py-4">
            <h4 className="font-semibold text-sm mb-3">Demo Access</h4>
            <div className="space-y-2">
              <button 
                className="btn btn-ghost btn-xs w-full justify-start text-left"
                onClick={() => {
                  setApplicationId('VSV-240101-A1B2')
                  setPassword('DEMO123')
                }}
              >
                <FileText className="w-3 h-3 mr-2" />
                Demo Application #1 (Business Visa)
              </button>
              <button 
                className="btn btn-ghost btn-xs w-full justify-start text-left"
                onClick={() => {
                  setApplicationId('VSV-240102-C3D4')
                  setPassword('DEMO456')
                }}
              >
                <FileText className="w-3 h-3 mr-2" />
                Demo Application #2 (Tourist Visa)
              </button>
              <button 
                className="btn btn-ghost btn-xs w-full justify-start text-left"
                onClick={() => {
                  setApplicationId('VSV-240103-E5F6')
                  setPassword('DEMO789')
                }}
              >
                <FileText className="w-3 h-3 mr-2" />
                Demo Application #3 (Student Visa)
              </button>
              <button 
                className="btn btn-ghost btn-xs w-full justify-start text-left"
                onClick={() => {
                  setApplicationId('VSV-240104-G7H8')
                  setPassword('DEMO999')
                }}
              >
                <FileText className="w-3 h-3 mr-2" />
                Demo Application #4 (Work Visa)
              </button>
            </div>
          </div>
        </div>

        {/* Security Notice */}
        <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
          <div className="flex items-start gap-3">
            <Shield className="w-5 h-5 text-gray-600 mt-0.5" />
            <div>
              <h4 className="font-semibold text-gray-900 text-sm">Security & Privacy</h4>
              <p className="text-gray-700 text-xs mt-1">
                Your application data is encrypted and secure. Never share your access password with anyone.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* QR Scanner Popup */}
      {showQRScanner && (
        <QRScannerPopup 
          onScanResult={handleQRScanResult}
          onClose={() => setShowQRScanner(false)}
        />
      )}
    </div>
  )
}
</file>

<file path="app/backend/routes/__init__.py">
# backend/routes/__init__.py - Route module initializer

# This file makes the routes directory a Python package
# Import all route modules here for easy access

from . import applications
from . import chat
from . import officers
from . import analytics
from . import documents

__all__ = ["applications", "chat", "officers", "analytics", "documents"]
</file>

<file path="app/backend/routes/analytics.py">
# backend/routes/analytics.py - Analytics and reporting API

from fastapi import APIRouter, Depends, Query
from sqlalchemy.orm import Session
from sqlalchemy import func, case
from datetime import datetime, timedelta
from typing import Optional

from database import get_db, Application, Document, StatusUpdate
from models import AnalyticsResponse

router = APIRouter()

@router.get("/dashboard", response_model=AnalyticsResponse)
async def get_dashboard_analytics(
    embassy_id: Optional[str] = Query(None, description="Filter by embassy"),
    days: Optional[int] = Query(30, description="Number of days to analyze"),
    db: Session = Depends(get_db)
):
    """Get analytics data for embassy dashboard"""
    
    # Date range
    end_date = datetime.utcnow()
    start_date = end_date - timedelta(days=days)
    
    # Base query
    query = db.query(Application)
    if embassy_id:
        # In a real app, filter by embassy through officer assignments
        pass
    
    # Total applications
    total_applications = query.count()
    
    # Applications in date range
    recent_apps = query.filter(Application.submitted_at >= start_date).all()
    
    # Basic statistics
    total_recent = len(recent_apps)
    approved_count = len([app for app in recent_apps if app.status == "approved"])
    rejected_count = len([app for app in recent_apps if app.status == "rejected"])
    pending_count = len([app for app in recent_apps if app.status not in ["approved", "rejected"]])
    
    # Approval rate
    processed_count = approved_count + rejected_count
    approval_rate = (approved_count / processed_count * 100) if processed_count > 0 else 0
    
    # Average processing time (mock calculation)
    avg_processing_time = 8.5  # Mock value for demo
    
    # Trends data (last 6 months)
    trends_data = []
    for i in range(6):
        month_start = datetime.utcnow().replace(day=1) - timedelta(days=30*i)
        month_end = month_start + timedelta(days=30)
        
        month_apps = [app for app in recent_apps 
                     if month_start <= app.submitted_at < month_end]
        
        trends_data.append({
            "month": month_start.strftime("%b %Y"),
            "applications": len(month_apps),
            "approvals": len([app for app in month_apps if app.status == "approved"]),
            "rejections": len([app for app in month_apps if app.status == "rejected"])
        })
    
    trends_data.reverse()  # Chronological order
    
    # Visa type distribution
    visa_types = {}
    for app in recent_apps:
        visa_types[app.visa_type] = visa_types.get(app.visa_type, 0) + 1
    
    visa_type_distribution = [
        {
            "type": visa_type.title(),
            "count": count,
            "percentage": round(count / total_recent * 100, 1) if total_recent > 0 else 0
        }
        for visa_type, count in visa_types.items()
    ]
    
    # Country statistics (mock data for demo)
    country_stats = [
        {"country": "Germany", "applications": 425, "approval_rate": 92.5},
        {"country": "United Kingdom", "applications": 298, "approval_rate": 88.9},
        {"country": "France", "applications": 234, "approval_rate": 85.7},
        {"country": "Spain", "applications": 156, "approval_rate": 83.3},
        {"country": "Italy", "applications": 134, "approval_rate": 89.6}
    ]
    
    # Processing time by visa type (mock data)
    processing_time_by_type = [
        {"visa_type": "Tourist", "avg_days": 6.5, "trend": "down"},
        {"visa_type": "Business", "avg_days": 8.2, "trend": "stable"},
        {"visa_type": "Student", "avg_days": 14.8, "trend": "up"},
        {"visa_type": "Work", "avg_days": 21.3, "trend": "down"},
        {"visa_type": "Family Visit", "avg_days": 9.7, "trend": "stable"}
    ]
    
    return AnalyticsResponse(
        total_applications=total_applications,
        approval_rate=approval_rate,
        avg_processing_time=avg_processing_time,
        pending_applications=pending_count,
        trends_data=trends_data,
        visa_type_distribution=visa_type_distribution,
        country_stats=country_stats,
        processing_time_by_type=processing_time_by_type
    )

@router.get("/metrics/summary")
async def get_metrics_summary(db: Session = Depends(get_db)):
    """Get quick metrics summary for dashboard cards"""
    
    # Count applications by status
    status_counts = db.query(
        Application.status,
        func.count(Application.id).label('count')
    ).group_by(Application.status).all()
    
    status_dict = {status: count for status, count in status_counts}
    
    return {
        "total_applications": sum(status_dict.values()),
        "pending_review": sum(
            status_dict.get(status, 0) 
            for status in ["submitted", "document_review", "background_check", "officer_review"]
        ),
        "approved_today": status_dict.get("approved", 0),  # Simplified for demo
        "rejected_today": status_dict.get("rejected", 0),
        "avg_processing_days": 8.5  # Mock value
    }
</file>

<file path="app/backend/routes/chat.py">
# backend/routes/chat.py - AVA Chat API routes

from fastapi import APIRouter, Depends
from sqlalchemy.orm import Session
import json
import re
from typing import Dict, List

from database import get_db, ChatMessage as ChatMessageDB
from models import ChatMessage, ChatResponse, VisaType
from utils import generate_id

router = APIRouter()

@router.post("/", response_model=ChatResponse)
async def chat_with_ava(message: ChatMessage, db: Session = Depends(get_db)):
    """Chat with AVA - AI Visa Assistant"""
    
    # Generate session ID if not provided
    session_id = message.session_id or generate_id("chat")
    
    # Save user message
    user_msg = ChatMessageDB(
        id=generate_id("msg"),
        session_id=session_id,
        message=message.message,
        sender="user"
    )
    db.add(user_msg)
    
    # Process message with AVA
    response = process_ava_message(message.message, session_id, db)
    
    # Save AVA response
    ava_msg = ChatMessageDB(
        id=generate_id("msg"),
        session_id=session_id,
        message=response.response,
        sender="ava",
        message_metadata=json.dumps({
            "suggested_visa_type": response.suggested_visa_type,
            "next_action": response.next_action,
            "confidence": response.confidence
        })
    )
    db.add(ava_msg)
    
    db.commit()
    
    return response

@router.get("/history/{session_id}")
async def get_chat_history(session_id: str, db: Session = Depends(get_db)):
    """Get chat history for a session"""
    
    messages = db.query(ChatMessageDB).filter(
        ChatMessageDB.session_id == session_id
    ).order_by(ChatMessageDB.timestamp.asc()).all()
    
    return [
        {
            "id": msg.id,
            "message": msg.message,
            "sender": msg.sender,
            "timestamp": msg.timestamp,
            "metadata": json.loads(msg.message_metadata) if msg.message_metadata else None
        }
        for msg in messages
    ]

def process_ava_message(message: str, session_id: str, db: Session) -> ChatResponse:
    """Process user message and generate AVA response"""
    
    message_lower = message.lower()
    
    # Greeting responses
    if any(word in message_lower for word in ["hi", "hello", "hey", "start"]):
        return ChatResponse(
            response="Hi! I'm AVA, your AI visa assistant. I can help you find the right visa and guide you through the application process. What type of travel are you planning? 🛂✈️",
            next_action="continue_chat",
            confidence=1.0
        )
    
    # Tourist visa detection
    if any(word in message_lower for word in ["tourist", "vacation", "holiday", "sightsee", "leisure", "travel"]):
        return ChatResponse(
            response="Perfect! For a tourist visa, you'll typically need a passport, bank statements, travel insurance, and a travel itinerary. The process usually takes 5-10 business days. Would you like me to start your application?",
            suggested_visa_type=VisaType.TOURIST,
            next_action="start_form",
            confidence=0.9,
            follow_up_questions=["How long do you plan to stay?", "Which country are you visiting?"]
        )
    
    # Business visa detection
    if any(word in message_lower for word in ["business", "work", "conference", "meeting", "company", "trade"]):
        return ChatResponse(
            response="Great! For a business visa, you'll need an invitation letter from the company, your employment details, and proof of business activities. This typically takes 7-15 business days. Shall we begin your application?",
            suggested_visa_type=VisaType.BUSINESS,
            next_action="start_form",
            confidence=0.85,
            follow_up_questions=["Do you have an invitation letter?", "What type of business activities?"]
        )
    
    # Student visa detection
    if any(word in message_lower for word in ["student", "study", "university", "college", "education", "course"]):
        return ChatResponse(
            response="Excellent! For a student visa, you'll need an acceptance letter from your educational institution, proof of finances, and academic transcripts. Processing takes 15-30 business days. Ready to start?",
            suggested_visa_type=VisaType.STUDENT,
            next_action="start_form",
            confidence=0.92,
            follow_up_questions=["Do you have an acceptance letter?", "What are you planning to study?"]
        )
    
    # Work visa detection
    if any(word in message_lower for word in ["work visa", "employment", "job", "employer", "hire"]):
        return ChatResponse(
            response="I can help with your work visa! You'll need a job offer letter, employer sponsorship, and proof of qualifications. Processing typically takes 20-45 business days. Let's get started!",
            suggested_visa_type=VisaType.WORK,
            next_action="start_form",
            confidence=0.88,
            follow_up_questions=["Do you have a job offer?", "What type of work will you be doing?"]
        )
    
    # Family visit detection
    if any(word in message_lower for word in ["family", "visit", "relative", "spouse", "parent", "child"]):
        return ChatResponse(
            response="I understand you want to visit family! You'll need an invitation from your family member, proof of relationship, and financial documentation. Processing typically takes 10-20 business days. Let's get started!",
            suggested_visa_type=VisaType.FAMILY_VISIT,
            next_action="start_form",
            confidence=0.88,
            follow_up_questions=["Who are you visiting?", "What's your relationship to them?"]
        )
    
    # Transit visa detection
    if any(word in message_lower for word in ["transit", "layover", "connecting", "stopover"]):
        return ChatResponse(
            response="For transit visas, you'll need your onward ticket and passport. Transit visas are usually processed within 1-3 business days. Would you like to apply?",
            suggested_visa_type=VisaType.TRANSIT,
            next_action="start_form",
            confidence=0.95,
            follow_up_questions=["How long is your layover?", "What's your final destination?"]
        )
    
    # Country-specific responses
    countries = extract_countries(message_lower)
    if countries:
        country = countries[0].title()
        return ChatResponse(
            response=f"I can help you with your visa for {country}! What's the purpose of your visit? Are you traveling for tourism, business, study, or another reason?",
            next_action="continue_chat",
            confidence=0.8,
            follow_up_questions=[
                f"Tourism in {country}",
                f"Business in {country}",
                f"Study in {country}"
            ]
        )
    
    # Help and guidance
    if any(word in message_lower for word in ["help", "guide", "what", "how", "need"]):
        return ChatResponse(
            response="I'm here to help! I can assist you with:\n\n• Finding the right visa type for your travel\n• Explaining document requirements\n• Guiding you through the application process\n• Checking your eligibility\n\nWhat would you like to know more about?",
            next_action="continue_chat",
            confidence=0.7,
            follow_up_questions=[
                "What visa types are available?",
                "What documents do I need?",
                "How long does processing take?"
            ]
        )
    
    # Default response
    return ChatResponse(
        response="I want to make sure I understand your needs correctly. Could you tell me more about your travel plans? For example:\n\n• What country are you planning to visit?\n• What's the purpose of your trip?\n• How long do you plan to stay?\n\nThis will help me recommend the right visa type for you! 🌍",
        next_action="continue_chat",
        confidence=0.5,
        follow_up_questions=[
            "I need a tourist visa",
            "I'm traveling for business",
            "I'm visiting family",
            "I'm going to study"
        ]
    )

def extract_countries(text: str) -> List[str]:
    """Extract country names from text"""
    countries = [
        "germany", "france", "spain", "italy", "netherlands", "uk", "united kingdom",
        "usa", "united states", "canada", "australia", "japan", "china", "india",
        "brazil", "mexico", "russia", "south africa", "egypt", "turkey"
    ]
    
    found_countries = []
    for country in countries:
        if country in text:
            found_countries.append(country)
    
    return found_countries
</file>

<file path="app/backend/routes/documents.py">
# backend/routes/documents.py - Document handling API

from fastapi import APIRouter, Depends, UploadFile, File, HTTPException
from sqlalchemy.orm import Session
import os
import shutil
from typing import List

from database import get_db, Document as DocumentDB, Application
from models import DocumentResponse, DocumentUpload
from utils import generate_id

router = APIRouter()

@router.post("/upload")
async def upload_document(
    application_id: str,
    document_type: str,
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    """Upload a document for an application"""
    
    # Verify application exists
    application = db.query(Application).filter(Application.id == application_id).first()
    if not application:
        raise HTTPException(status_code=404, detail="Application not found")
    
    # Create uploads directory if it doesn't exist
    os.makedirs("uploads", exist_ok=True)
    
    # Generate unique filename
    file_extension = os.path.splitext(file.filename)[1]
    filename = f"{generate_id('doc')}{file_extension}"
    file_path = os.path.join("uploads", filename)
    
    # Save file
    with open(file_path, "wb") as buffer:
        shutil.copyfileobj(file.file, buffer)
    
    # Create document record
    document = DocumentDB(
        id=generate_id("doc"),
        application_id=application_id,
        name=file.filename,
        type=document_type,
        size=file.size,
        verified=False,  # Will be verified later
        file_path=file_path
    )
    
    db.add(document)
    db.commit()
    db.refresh(document)
    
    return DocumentResponse(
        id=document.id,
        name=document.name,
        type=document.type,
        size=document.size,
        verified=document.verified,
        uploaded_at=document.uploaded_at,
        file_path=document.file_path
    )

@router.get("/application/{application_id}", response_model=List[DocumentResponse])
async def get_documents_by_application(application_id: str, db: Session = Depends(get_db)):
    """Get all documents for an application"""
    
    documents = db.query(DocumentDB).filter(
        DocumentDB.application_id == application_id
    ).all()
    
    return [
        DocumentResponse(
            id=doc.id,
            name=doc.name,
            type=doc.type,
            size=doc.size,
            verified=doc.verified,
            uploaded_at=doc.uploaded_at,
            file_path=doc.file_path
        )
        for doc in documents
    ]

@router.put("/{document_id}/verify")
async def verify_document(document_id: str, verified: bool, db: Session = Depends(get_db)):
    """Mark a document as verified or not verified"""
    
    document = db.query(DocumentDB).filter(DocumentDB.id == document_id).first()
    if not document:
        raise HTTPException(status_code=404, detail="Document not found")
    
    document.verified = verified
    db.commit()
    
    return {"message": f"Document {'verified' if verified else 'marked as unverified'}"}
</file>

<file path="app/backend/routes/officers.py">
# backend/routes/officers.py - Officers authentication API

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session

from database import get_db, Officer
from models import OfficerLogin, OfficerResponse

router = APIRouter()

@router.post("/login", response_model=OfficerResponse)
async def officer_login(credentials: OfficerLogin, db: Session = Depends(get_db)):
    """Authenticate embassy officer"""
    
    officer = db.query(Officer).filter(
        Officer.id == credentials.officer_id,
        Officer.password_hash == credentials.password  # In real app, use proper password hashing
    ).first()
    
    if not officer:
        raise HTTPException(status_code=401, detail="Invalid credentials")
    
    return OfficerResponse(
        id=officer.id,
        name=officer.name,
        email=officer.email,
        role=officer.role,
        embassy_id=officer.embassy_id,
        created_at=officer.created_at
    )

@router.get("/profile/{officer_id}", response_model=OfficerResponse)
async def get_officer_profile(officer_id: str, db: Session = Depends(get_db)):
    """Get officer profile information"""
    
    officer = db.query(Officer).filter(Officer.id == officer_id).first()
    if not officer:
        raise HTTPException(status_code=404, detail="Officer not found")
    
    return OfficerResponse(
        id=officer.id,
        name=officer.name,
        email=officer.email,
        role=officer.role,
        embassy_id=officer.embassy_id,
        created_at=officer.created_at
    )
</file>

<file path="app/backend/database.py">
# backend/database.py - Database configuration and models

from sqlalchemy import create_engine, Column, String, Integer, Float, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session, relationship
from datetime import datetime
import os

# Database configuration
DATABASE_URL = "sqlite:///./visaverge.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Database Models
class User(Base):
    __tablename__ = "users"
    
    id = Column(String, primary_key=True, index=True)
    email = Column(String, unique=True, index=True)
    name = Column(String)
    phone = Column(String)
    nationality = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    applications = relationship("Application", back_populates="user")

class Application(Base):
    __tablename__ = "applications"
    
    id = Column(String, primary_key=True, index=True)
    user_id = Column(String, ForeignKey("users.id"))
    visa_type = Column(String, nullable=False)
    status = Column(String, default="submitted")  # submitted, document_review, background_check, officer_review, approved, rejected
    priority = Column(String, default="normal")   # low, normal, high, urgent
    risk_score = Column(Integer, default=0)
    answers = Column(Text)  # JSON blob
    submitted_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    estimated_decision = Column(DateTime)
    approval_probability = Column(Integer)
    assigned_officer_id = Column(String, ForeignKey("officers.id"))
    
    # Relationships
    user = relationship("User", back_populates="applications")
    documents = relationship("Document", back_populates="application")
    status_updates = relationship("StatusUpdate", back_populates="application")
    assigned_officer = relationship("Officer", back_populates="assigned_applications")

class Document(Base):
    __tablename__ = "documents"
    
    id = Column(String, primary_key=True, index=True)
    application_id = Column(String, ForeignKey("applications.id"))
    name = Column(String, nullable=False)
    type = Column(String, nullable=False)  # passport, photo, bank_statement, etc.
    size = Column(Integer)
    verified = Column(Boolean, default=False)
    uploaded_at = Column(DateTime, default=datetime.utcnow)
    file_path = Column(String)
    
    # Relationships
    application = relationship("Application", back_populates="documents")

class Officer(Base):
    __tablename__ = "officers"
    
    id = Column(String, primary_key=True, index=True)
    name = Column(String, nullable=False)
    email = Column(String, unique=True)
    role = Column(String, nullable=False)  # Senior Consular Officer, Consular Officer, etc.
    embassy_id = Column(String, nullable=False)
    password_hash = Column(String, nullable=False)  # In real app, use proper hashing
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    assigned_applications = relationship("Application", back_populates="assigned_officer")
    status_updates = relationship("StatusUpdate", back_populates="officer")

class StatusUpdate(Base):
    __tablename__ = "status_updates"
    
    id = Column(String, primary_key=True, index=True)
    application_id = Column(String, ForeignKey("applications.id"))
    status = Column(String, nullable=False)
    notes = Column(Text)
    officer_id = Column(String, ForeignKey("officers.id"))
    timestamp = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    application = relationship("Application", back_populates="status_updates")
    officer = relationship("Officer", back_populates="status_updates")

class ChatMessage(Base):
    __tablename__ = "chat_messages"
    
    id = Column(String, primary_key=True, index=True)
    session_id = Column(String, index=True)
    message = Column(Text, nullable=False)
    sender = Column(String, nullable=False)  # 'user' or 'ava'
    message_metadata = Column(Text)  # JSON blob for confidence, suggestions, etc.
    timestamp = Column(DateTime, default=datetime.utcnow)

class Metric(Base):
    __tablename__ = "metrics"
    
    id = Column(String, primary_key=True, index=True)
    metric_type = Column(String, nullable=False)  # applications_count, approval_rate, etc.
    metric_value = Column(Float, nullable=False)
    period = Column(String, nullable=False)  # daily, weekly, monthly
    date = Column(DateTime, nullable=False)
    embassy_id = Column(String)

# Database functions
def create_tables():
    """Create all database tables"""
    Base.metadata.create_all(bind=engine)

def get_db():
    """Dependency to get database session"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def get_db_session() -> Session:
    """Get database session for direct use"""
    return SessionLocal()
</file>

<file path="app/backend/main.py">
# backend/main.py - FastAPI main application with auto database reset

from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
from contextlib import asynccontextmanager

from database import engine, create_tables, get_db
from models import *
from routes import applications, chat, officers, analytics, documents
from utils import seed_demo_data

def reset_database():
    """Reset database by deleting the file and recreating everything"""
    db_file = "visaverge.db"
    uploads_dir = "uploads"
    
    try:
        # Remove existing database file
        if os.path.exists(db_file):
            os.remove(db_file)
            print(f"🗑️  Deleted existing database: {db_file}")
        
        # Remove and recreate uploads directory
        if os.path.exists(uploads_dir):
            import shutil
            shutil.rmtree(uploads_dir)
            print(f"🗑️  Deleted existing uploads directory")
        
        os.makedirs(uploads_dir, exist_ok=True)
        print(f"📁 Created fresh uploads directory")
        
        # Recreate database and seed with demo data
        create_tables()
        print("🏗️  Created fresh database tables")
        
        seed_demo_data()
        print("🌱 Seeded fresh demo data")
        
    except Exception as e:
        print(f"❌ Error resetting database: {e}")
        raise

# Startup/shutdown events
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("🚀 Starting VisaVerge Backend...")
    print("🔄 Resetting database for fresh demo environment...")
    
    reset_database()
    
    print("✅ Database reset and initialized with fresh demo data!")
    print("📋 Demo Application Credentials:")
    print("   🏢 VSV-240101-A1B2 / DEMO123 (Business - Sarah Johnson)")
    print("   🏖️  VSV-240102-C3D4 / DEMO456 (Tourist - Miguel Rodriguez)")
    print("   🎓 VSV-240103-E5F6 / DEMO789 (Student - Anna Chen)")
    print("   💼 VSV-240104-G7H8 / DEMO999 (Work - James Wilson)")
    print("👮 Embassy Officer Credentials:")
    print("   🔐 maria.schmidt / demo123 (Senior Officer)")
    print("   🔐 john.davis / demo123 (Standard Officer)")
    print("   🔐 admin / admin (Administrator)")
    print("🌐 Frontend: http://localhost:3000")
    print("📚 API Docs: http://localhost:8000/api/docs")
    
    yield
    
    # Shutdown
    print("👋 Shutting down VisaVerge Backend...")

# Create FastAPI app
app = FastAPI(
    title="VisaVerge API",
    description="AI-Powered Visa Application System - Embassy Innovation Hackathon",
    version="1.0.0",
    docs_url="/api/docs",  # Swagger UI
    redoc_url="/api/redoc", # ReDoc
    lifespan=lifespan
)

# CORS middleware for frontend integration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],  # Next.js frontend
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Static files for document uploads
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")

# Include API routes
app.include_router(applications.router, prefix="/api/applications", tags=["Applications"])
app.include_router(chat.router, prefix="/api/chat", tags=["AI Chat"])
app.include_router(officers.router, prefix="/api/officers", tags=["Officers"])
app.include_router(analytics.router, prefix="/api/analytics", tags=["Analytics"])
app.include_router(documents.router, prefix="/api/documents", tags=["Documents"])

# Health check endpoint
@app.get("/api/health")
async def health_check():
    return {
        "status": "healthy",
        "service": "VisaVerge Backend",
        "version": "1.0.0",
        "embassy": "AI-Powered Visa Processing",
        "database": "Fresh reset on startup"
    }

# Root endpoint
@app.get("/")
async def root():
    return {
        "message": "🏛️ Welcome to VisaVerge API",
        "docs": "/api/docs",
        "health": "/api/health",
        "frontend": "http://localhost:3000",
        "status": "Database reset on startup - ready for demo"
    }

# Development server
if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,  # Auto-reload for development
        log_level="info"
    )
</file>

<file path="app/backend/models.py">
# backend/models.py - Pydantic models for API validation and serialization

from pydantic import BaseModel, Field, EmailStr
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum

# Enums
class VisaType(str, Enum):
    TOURIST = "tourist"
    BUSINESS = "business"
    STUDENT = "student"
    WORK = "work"
    FAMILY_VISIT = "family_visit"
    TRANSIT = "transit"

class ApplicationStatus(str, Enum):
    SUBMITTED = "submitted"
    DOCUMENT_REVIEW = "document_review"
    BACKGROUND_CHECK = "background_check"
    OFFICER_REVIEW = "officer_review"
    APPROVED = "approved"
    REJECTED = "rejected"

class Priority(str, Enum):
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class DocumentType(str, Enum):
    PASSPORT = "passport"
    PHOTO = "photo"
    BANK_STATEMENT = "bank_statement"
    INVITATION_LETTER = "invitation_letter"
    TRAVEL_INSURANCE = "travel_insurance"
    EMPLOYMENT_LETTER = "employment_letter"
    FLIGHT_ITINERARY = "flight_itinerary"

# Request Models
class ApplicationCreate(BaseModel):
    visa_type: VisaType
    answers: Dict[str, Any]
    documents: Optional[List[Dict[str, Any]]] = []

class ApplicationUpdate(BaseModel):
    status: Optional[ApplicationStatus] = None
    notes: Optional[str] = None
    officer_id: Optional[str] = None

class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None

class OfficerLogin(BaseModel):
    officer_id: str
    password: str
    embassy: str

class DocumentUpload(BaseModel):
    application_id: str
    name: str
    type: DocumentType
    size: Optional[int] = None

# Response Models
class UserResponse(BaseModel):
    id: str
    email: Optional[str]
    name: Optional[str]
    nationality: Optional[str]
    created_at: datetime

    class Config:
        from_attributes = True

class DocumentResponse(BaseModel):
    id: str
    name: str
    type: str
    size: Optional[int]
    verified: bool
    uploaded_at: datetime
    file_path: Optional[str]

    class Config:
        from_attributes = True

class StatusUpdateResponse(BaseModel):
    id: str
    status: str
    notes: Optional[str]
    officer_id: Optional[str]
    timestamp: datetime

    class Config:
        from_attributes = True

class ApplicationResponse(BaseModel):
    id: str
    user_id: str
    visa_type: str
    status: str
    priority: str
    risk_score: int
    answers: Dict[str, Any]
    submitted_at: datetime
    updated_at: datetime
    estimated_decision: Optional[datetime]
    approval_probability: Optional[int]
    assigned_officer_id: Optional[str]
    
    # Computed fields for frontend
    applicant_name: Optional[str] = None
    country: Optional[str] = None
    documents_count: Optional[int] = None
    estimated_days: Optional[int] = None
    last_activity: Optional[datetime] = None
    
    # Relationships
    documents: Optional[List[DocumentResponse]] = []
    status_updates: Optional[List[StatusUpdateResponse]] = []

    class Config:
        from_attributes = True

class OfficerResponse(BaseModel):
    id: str
    name: str
    email: str
    role: str
    embassy_id: str
    created_at: datetime

    class Config:
        from_attributes = True

class ChatResponse(BaseModel):
    response: str
    suggested_visa_type: Optional[VisaType] = None
    next_action: str = "continue_chat"  # continue_chat, start_form, upload_documents, submit_application
    confidence: Optional[float] = None
    follow_up_questions: Optional[List[str]] = []

class AnalyticsResponse(BaseModel):
    total_applications: int
    approval_rate: float
    avg_processing_time: float
    pending_applications: int
    trends_data: List[Dict[str, Any]]
    visa_type_distribution: List[Dict[str, Any]]
    country_stats: List[Dict[str, Any]]
    processing_time_by_type: List[Dict[str, Any]]

# Question models for dynamic forms
class QuestionValidation(BaseModel):
    min: Optional[int] = None
    max: Optional[int] = None
    pattern: Optional[str] = None
    message: Optional[str] = None

class QuestionDependency(BaseModel):
    question_id: str
    value: Any

class Question(BaseModel):
    id: str
    text: str
    type: str  # text, select, number, date, file
    options: Optional[List[str]] = None
    required: bool = True
    validation: Optional[QuestionValidation] = None
    depends_on: Optional[QuestionDependency] = None

class FormQuestionsResponse(BaseModel):
    questions: List[Question]
</file>

<file path="app/backend/README.md">
# VisaVerge Backend API

## Quick Start for Hackathon

### 1. Setup
```bash
# Navigate to backend folder
cd backend

# Install dependencies
pip install -r requirements.txt

# Create uploads directory
mkdir uploads

# Run the server
python main.py
```

### 2. The API will be available at:
- **API Server**: http://localhost:8000
- **Interactive Docs**: http://localhost:8000/api/docs
- **Health Check**: http://localhost:8000/api/health

### 3. Demo Credentials
**Embassy Officers:**
- `maria.schmidt` / `demo123` (Senior Officer)
- `john.davis` / `demo123` (Standard Officer)  
- `admin` / `admin` (Administrator)

### 4. Frontend Integration
Update your frontend API calls to point to:
```javascript
const API_BASE = 'http://localhost:8000/api'
```

### 5. Key Endpoints
- `GET /api/applications` - Get all applications
- `POST /api/applications` - Create new application
- `PUT /api/applications/{id}` - Update application status
- `POST /api/chat` - Chat with AVA
- `POST /api/officers/login` - Officer authentication
- `GET /api/analytics` - Dashboard analytics

### 6. Database
- SQLite database (`visaverge.db`) created automatically
- Demo data seeded on first run
- No additional setup required!

## Architecture
- **FastAPI** - Modern Python web framework
- **SQLAlchemy** - Database ORM
- **SQLite** - Zero-config database
- **Pydantic** - Data validation and serialization
</file>

<file path="app/backend/requirements.txt">
fastapi
uvicorn[standard]
sqlalchemy
pydantic
python-multipart
python-jose[cryptography]
passlib[bcrypt]
python-dotenv
</file>

<file path="app/backend/run.py">
import uvicorn
import os
from dotenv import load_dotenv

load_dotenv()

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        reload=os.getenv("DEBUG", "False").lower() == "true",
        log_level="info"
    )
</file>

<file path="app/backend/utils.py">
# backend/utils.py - Utility functions and demo data seeding

import random
import string
import json
import hashlib
from datetime import datetime, timedelta
from typing import Dict, Any, List
from sqlalchemy.orm import Session

from database import get_db_session, User, Application, Document, Officer, StatusUpdate
from models import Question, QuestionValidation

def generate_id(prefix: str = "") -> str:
    """Generate a unique ID with optional prefix"""
    timestamp = str(int(datetime.now().timestamp() * 1000))[-8:]
    random_part = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    
    if prefix:
        return f"{prefix}-{timestamp}-{random_part}"
    return f"{timestamp}-{random_part}"

def hash_password(password: str) -> str:
    """Simple password hashing for demo (use proper hashing in production)"""
    return hashlib.sha256(password.encode()).hexdigest()

def calculate_risk_score(visa_type: str, answers: Dict[str, Any]) -> int:
    """Calculate risk score based on visa type and answers"""
    
    # Base scores by visa type
    base_scores = {
        "tourist": 5,
        "business": 10,
        "student": 15,
        "work": 20,
        "family_visit": 8,
        "transit": 3
    }
    
    score = base_scores.get(visa_type, 10)
    
    # Duration factor
    duration = int(answers.get("duration", 0))
    if duration > 90:
        score += 15
    elif duration > 30:
        score += 10
    elif duration > 7:
        score += 5
    
    # Country factor (simplified)
    high_risk_countries = ["country_x", "country_y"]  # Demo placeholder
    if answers.get("destination_country", "").lower() in high_risk_countries:
        score += 20
    
    # Employment status
    if answers.get("employment_status") == "unemployed":
        score += 10
    
    # Previous visa violations (mock check)
    if answers.get("previous_violations", False):
        score += 25
    
    # Add some randomness for demo variety
    score += random.randint(0, 10)
    
    return min(max(score, 0), 100)

def calculate_approval_probability(risk_score: int, documents: List[Dict] = None) -> int:
    """Calculate approval probability based on risk score and documents"""
    
    if documents is None:
        documents = []
    
    # Base probability (inverse of risk)
    probability = 100 - risk_score
    
    # Document completeness factor
    if documents:
        verified_docs = sum(1 for doc in documents if doc.get("verified", False))
        total_docs = len(documents)
        doc_completeness = (verified_docs / total_docs) * 100 if total_docs > 0 else 0
        
        # Average with document completeness
        probability = (probability + doc_completeness) / 2
    
    # Keep in realistic range
    return max(min(int(probability), 95), 60)

def get_form_questions(visa_type: str, current_answers: Dict[str, Any] = None) -> List[Question]:
    """Get dynamic form questions based on visa type and current answers"""
    
    if current_answers is None:
        current_answers = {}
    
    # Base questions for all visa types
    base_questions = [
        Question(
            id="applicant_name",
            text="What is your full name?",
            type="text",
            required=True
        ),
        Question(
            id="destination_country",
            text="Which country are you applying to visit?",
            type="select",
            options=["Germany", "France", "Spain", "Italy", "Netherlands", "United Kingdom", "Other"],
            required=True
        ),
        Question(
            id="nationality",
            text="What is your nationality?",
            type="text",
            required=True
        ),
        Question(
            id="passport_number",
            text="Passport number",
            type="text",
            required=True,
            validation=QuestionValidation(
                pattern="^[A-Z0-9]{6,9}$",
                message="Please enter a valid passport number"
            )
        ),
        Question(
            id="email",
            text="Email address",
            type="text",
            required=True,
            validation=QuestionValidation(
                pattern="^[\\w\\.-]+@[\\w\\.-]+\\.[a-zA-Z]{2,}$",
                message="Please enter a valid email address"
            )
        ),
        Question(
            id="phone",
            text="Phone number",
            type="text",
            required=True
        )
    ]
    
    # Visa type specific questions
    visa_specific_questions = {
        "tourist": [
            Question(
                id="travel_purpose",
                text="What is the main purpose of your visit?",
                type="select",
                options=["Sightseeing", "Visiting friends/family", "Cultural events", "Medical treatment"],
                required=True
            ),
            Question(
                id="duration",
                text="How many days do you plan to stay?",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=90,
                    message="Tourist stays are typically 1-90 days"
                )
            ),
            Question(
                id="accommodation",
                text="Where will you be staying?",
                type="select",
                options=["Hotel", "Airbnb", "With friends/family", "Hostel", "Other"],
                required=True
            ),
            Question(
                id="return_ticket",
                text="Do you have a return ticket?",
                type="select",
                options=["Yes", "No"],
                required=True
            )
        ],
        
        "business": [
            Question(
                id="business_purpose",
                text="What type of business activities?",
                type="select",
                options=["Conference/Meeting", "Training", "Negotiations", "Site visit", "Trade fair"],
                required=True
            ),
            Question(
                id="company_name",
                text="What is your company name?",
                type="text",
                required=True
            ),
            Question(
                id="invitation_company",
                text="Name of the inviting company/organization",
                type="text",
                required=True
            ),
            Question(
                id="duration",
                text="Duration of business visit (days)?",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=30,
                    message="Business visits are typically 1-30 days"
                )
            ),
            Question(
                id="employment_letter",
                text="Do you have an employment letter from your company?",
                type="select",
                options=["Yes", "No"],
                required=True
            )
        ],
        
        "student": [
            Question(
                id="institution_name",
                text="Name of educational institution",
                type="text",
                required=True
            ),
            Question(
                id="study_level",
                text="Level of study",
                type="select",
                options=["Bachelor's degree", "Master's degree", "PhD", "Exchange program", "Language course"],
                required=True
            ),
            Question(
                id="study_duration",
                text="Duration of studies (months)",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=60,
                    message="Study duration typically 1-60 months"
                )
            ),
            Question(
                id="acceptance_letter",
                text="Do you have an acceptance letter?",
                type="select",
                options=["Yes", "No"],
                required=True
            ),
            Question(
                id="financial_support",
                text="How will you finance your studies?",
                type="select",
                options=["Personal funds", "Scholarship", "Family support", "Student loan", "Other"],
                required=True
            )
        ],
        
        "work": [
            Question(
                id="job_title",
                text="Job title/position",
                type="text",
                required=True
            ),
            Question(
                id="employer_name",
                text="Employer company name",
                type="text",
                required=True
            ),
            Question(
                id="contract_duration",
                text="Contract duration (months)",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=60,
                    message="Work contracts typically 1-60 months"
                )
            ),
            Question(
                id="work_permit",
                text="Do you have a work permit?",
                type="select",
                options=["Yes", "No", "Applied"],
                required=True
            ),
            Question(
                id="salary",
                text="Annual salary (in EUR)",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=20000,
                    message="Please enter annual salary"
                )
            )
        ],
        
        "family_visit": [
            Question(
                id="relationship",
                text="Relationship to person you're visiting",
                type="select",
                options=["Spouse", "Parent", "Child", "Sibling", "Grandparent", "Other family"],
                required=True
            ),
            Question(
                id="host_name",
                text="Name of person you're visiting",
                type="text",
                required=True
            ),
            Question(
                id="visit_duration",
                text="Duration of visit (days)",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=180,
                    message="Family visits typically 1-180 days"
                )
            ),
            Question(
                id="invitation_letter",
                text="Do you have an invitation letter?",
                type="select",
                options=["Yes", "No"],
                required=True
            ),
            Question(
                id="host_status",
                text="Immigration status of your host",
                type="select",
                options=["Citizen", "Permanent resident", "Temporary resident", "Student", "Other"],
                required=True
            )
        ],
        
        "transit": [
            Question(
                id="final_destination",
                text="What is your final destination?",
                type="text",
                required=True
            ),
            Question(
                id="transit_duration",
                text="How long is your layover (hours)?",
                type="number",
                required=True,
                validation=QuestionValidation(
                    min=1,
                    max=24,
                    message="Transit typically 1-24 hours"
                )
            ),
            Question(
                id="onward_ticket",
                text="Do you have an onward ticket?",
                type="select",
                options=["Yes", "No"],
                required=True
            )
        ]
    }
    
    # Combine base questions with visa-specific questions
    questions = base_questions + visa_specific_questions.get(visa_type, [])
    
    return questions

def seed_demo_data():
    """Seed database with demo data for hackathon presentation"""
    
    db = get_db_session()
    
    try:
        # Check if data already exists
        if db.query(Officer).count() > 0:
            print("Demo data already exists, skipping seeding...")
            return
        
        # Create demo officers
        officers = [
            Officer(
                id="maria.schmidt",
                name="Officer Maria Schmidt",
                email="maria@embassy.gov",
                role="Senior Consular Officer",
                embassy_id="us_berlin",
                password_hash="demo123"  # In real app, use proper hashing
            ),
            Officer(
                id="john.davis",
                name="Officer John Davis",
                email="john@embassy.gov",
                role="Consular Officer",
                embassy_id="us_berlin",
                password_hash="demo123"
            ),
            Officer(
                id="admin",
                name="Administrator",
                email="admin@embassy.gov",
                role="System Administrator",
                embassy_id="us_berlin",
                password_hash="admin"
            )
        ]
        
        for officer in officers:
            db.add(officer)
        
        # Create demo users and applications with FIXED IDs and passwords
        demo_applications = [
            {
                "id": "VSV-240101-A1B2",  # Fixed ID for demo
                "user_id": "user-sarah-johnson",
                "applicant_name": "Sarah Johnson",
                "visa_type": "business",
                "status": "officer_review",
                "country": "United States",
                "demo_password": "DEMO123",  # Demo password
                "answers": {
                    "applicant_name": "Sarah Johnson",
                    "destination_country": "Germany",
                    "business_purpose": "Conference/Meeting",
                    "company_name": "Tech Solutions Inc.",
                    "invitation_company": "Berlin Tech Conference",
                    "duration": "7",
                    "email": "sarah.johnson@techsolutions.com",
                    "phone": "+1-555-0123",
                    "nationality": "American",
                    "passport_number": "US1234567"
                }
            },
            {
                "id": "VSV-240102-C3D4",  # Fixed ID for demo
                "user_id": "user-miguel-rodriguez",
                "applicant_name": "Miguel Rodriguez",
                "visa_type": "tourist",
                "status": "document_review",
                "country": "Spain",
                "demo_password": "DEMO456",  # Demo password
                "answers": {
                    "applicant_name": "Miguel Rodriguez",
                    "destination_country": "Germany",
                    "travel_purpose": "Sightseeing",
                    "duration": "14",
                    "accommodation": "Hotel",
                    "email": "miguel.rodriguez@email.com",
                    "phone": "+34-666-123456",
                    "nationality": "Spanish",
                    "passport_number": "ES9876543"
                }
            },
            {
                "id": "VSV-240103-E5F6",  # Fixed ID for demo
                "user_id": "user-anna-chen",
                "applicant_name": "Anna Chen",
                "visa_type": "student",
                "status": "background_check",
                "country": "China",
                "demo_password": "DEMO789",  # Demo password
                "answers": {
                    "applicant_name": "Anna Chen",
                    "destination_country": "Germany",
                    "institution_name": "Technical University of Munich",
                    "study_level": "Master's degree",
                    "study_duration": "24",
                    "email": "anna.chen@student.tum.de",
                    "phone": "+86-138-0013-8000",
                    "nationality": "Chinese",
                    "passport_number": "CN5555666"
                }
            },
            {
                "id": "VSV-240104-G7H8",  # Fixed ID for demo
                "user_id": "user-james-wilson",
                "applicant_name": "James Wilson",
                "visa_type": "work",
                "status": "submitted",
                "country": "United Kingdom",
                "demo_password": "DEMO999",  # Demo password
                "answers": {
                    "applicant_name": "James Wilson",
                    "destination_country": "Germany",
                    "job_title": "Software Engineer",
                    "employer_name": "German Tech Corp",
                    "contract_duration": "36",
                    "email": "james.wilson@germantech.de",
                    "phone": "+44-20-7946-0958",
                    "nationality": "British",
                    "passport_number": "GB7777888"
                }
            }
        ]
        
        for i, app_data in enumerate(demo_applications):
            # Create user with fixed ID
            user = User(
                id=app_data["user_id"],
                email=app_data["answers"]["email"],
                name=app_data["applicant_name"],
                phone=app_data["answers"]["phone"],
                nationality=app_data["country"]
            )
            db.add(user)
            
            # Add demo password hash to answers
            answers_with_password = app_data["answers"].copy()
            answers_with_password["access_password_hash"] = hash_password(app_data["demo_password"])
            
            # Calculate risk score
            risk_score = calculate_risk_score(app_data["visa_type"], answers_with_password)
            
            # Create application with fixed ID
            application = Application(
                id=app_data["id"],  # Use fixed ID
                user_id=app_data["user_id"],
                visa_type=app_data["visa_type"],
                status=app_data["status"],
                priority=["high", "normal", "normal", "urgent"][i],
                risk_score=risk_score,
                answers=json.dumps(answers_with_password),
                submitted_at=datetime.utcnow() - timedelta(days=random.randint(1, 5)),
                approval_probability=calculate_approval_probability(risk_score),
                assigned_officer_id="maria.schmidt" if i < 2 else "john.davis"
            )
            db.add(application)
            
            # Create demo documents
            doc_types = ["passport", "photo", "bank_statement", "invitation_letter"]
            for j, doc_type in enumerate(doc_types[:3 + i]):  # Varying number of documents
                document = Document(
                    id=generate_id("doc"),
                    application_id=app_data["id"],
                    name=f"{doc_type.replace('_', ' ').title()}",
                    type=doc_type,
                    size=random.randint(100000, 2000000),  # 100KB - 2MB
                    verified=random.choice([True, True, False]),  # Mostly verified
                    uploaded_at=datetime.utcnow() - timedelta(hours=random.randint(1, 48))
                )
                db.add(document)
            
            # Create status updates
            initial_status = StatusUpdate(
                id=generate_id("status"),
                application_id=app_data["id"],
                status="submitted",
                notes=f"Application submitted by {app_data['applicant_name']}",
                timestamp=datetime.utcnow() - timedelta(days=random.randint(1, 5))
            )
            db.add(initial_status)
            
            if app_data["status"] != "submitted":
                current_status = StatusUpdate(
                    id=generate_id("status"),
                    application_id=app_data["id"],
                    status=app_data["status"],
                    notes=f"Status updated to {app_data['status']}",
                    officer_id="maria.schmidt" if i < 2 else "john.davis",
                    timestamp=datetime.utcnow() - timedelta(hours=random.randint(1, 24))
                )
                db.add(current_status)
        
        db.commit()
        print("✅ Demo data seeded successfully!")
        print("📋 Demo Application Credentials:")
        print("   VSV-240101-A1B2 / DEMO123 (Business - Sarah Johnson)")
        print("   VSV-240102-C3D4 / DEMO456 (Tourist - Miguel Rodriguez)")
        print("   VSV-240103-E5F6 / DEMO789 (Student - Anna Chen)")
        print("   VSV-240104-G7H8 / DEMO999 (Work - James Wilson)")
        
    except Exception as e:
        print(f"❌ Error seeding demo data: {e}")
        db.rollback()
    finally:
        db.close()
</file>

<file path="app/frontend/visaverge-user/app/embassy/layout.tsx">
import type { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Embassy Portal - VisaVerge',
  description: 'Secure portal for embassy officers to manage visa applications',
  robots: 'noindex, nofollow', // Don't index embassy pages
}

export default function EmbassyLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="embassy-portal">
      {children}
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/app/embassy/loading.tsx">
import { Shield } from 'lucide-react'

export default function EmbassyLoading() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-gray-50 to-blue-100 flex items-center justify-center">
      <div className="text-center">
        <div className="flex items-center justify-center gap-3 mb-6">
          <div className="p-3 bg-primary rounded-full animate-pulse">
            <Shield className="w-8 h-8 text-white" />
          </div>
          <h1 className="text-3xl font-bold text-gray-800">VisaVerge</h1>
        </div>
        
        <div className="relative">
          <div className="w-20 h-20 border-4 border-blue-200 rounded-full animate-spin mx-auto" />
          <div className="absolute inset-0 w-20 h-20 border-4 border-transparent border-t-blue-500 rounded-full animate-spin mx-auto" />
        </div>
        
        <h2 className="text-xl font-semibold text-gray-700 mt-6 mb-2">Embassy Portal</h2>
        <p className="text-gray-600">Initializing secure connection...</p>
        
        <div className="mt-8 space-y-2">
          <div className="w-64 h-2 bg-gray-200 rounded-full mx-auto overflow-hidden">
            <div className="w-full h-full bg-primary rounded-full animate-pulse" />
          </div>
          <p className="text-sm text-gray-500">Verifying security protocols</p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/app/embassy/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { EmbassyLogin, EmbassyDashboard } from '@/components/Embassy'
import { Officer } from '@/types/embassy.types'

export default function EmbassyPage() {
  const [currentOfficer, setCurrentOfficer] = useState<Officer | null>(null)
  const [isLoading, setIsLoading] = useState(true)

  useEffect(() => {
    // Check for existing session
    const storedOfficer = localStorage.getItem('embassy_officer')
    if (storedOfficer) {
      try {
        setCurrentOfficer(JSON.parse(storedOfficer))
      } catch (error) {
        console.error('Error parsing stored officer data:', error)
        localStorage.removeItem('embassy_officer')
      }
    }
    setIsLoading(false)
  }, [])

  const handleLogin = (officer: Officer) => {
    setCurrentOfficer(officer)
    localStorage.setItem('embassy_officer', JSON.stringify(officer))
  }

  const handleLogout = () => {
    setCurrentOfficer(null)
    localStorage.removeItem('embassy_officer')
  }

  if (isLoading) {
    return (
      <div className="min-h-screen bg-base-200 flex items-center justify-center">
        <div className="text-center">
          <div className="loading loading-spinner loading-lg text-primary"></div>
          <p className="mt-4 text-gray-600">Loading Embassy Portal...</p>
        </div>
      </div>
    )
  }

  if (!currentOfficer) {
    return <EmbassyLogin onLogin={handleLogin} />
  }

  return <EmbassyDashboard officer={currentOfficer} onLogout={handleLogout} />
}
</file>

<file path="app/frontend/visaverge-user/app/globals.css">
@import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");
@import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Typography improvements */
@layer components {
  h1 {
    @apply text-2xl font-bold mb-5;
  }

  h2 {
    @apply text-xl font-bold mb-3;
  }

  h3 {
    @apply text-lg font-bold mb-1;
  }

  /* Logo styling */
  .logo {
    @apply font-bold;
    font-family: 'JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', monospace;
  }

  /* Chat interface styles */
  .chat-message {
    @apply transition-all duration-300 ease-in-out;
  }

  .chat-message:hover {
    @apply transform scale-[1.02];
  }

  /* Status tracker styles */
  .status-step {
    @apply transition-all duration-500 ease-in-out;
  }

  .status-step.completed {
    @apply text-success;
  }

  .status-step.current {
    @apply text-primary animate-pulse;
  }

  /* Document upload styles */
  .document-upload-area {
    @apply border-2 border-dashed border-base-300 rounded-lg p-6 transition-all duration-300;
  }

  .document-upload-area:hover {
    @apply border-primary bg-primary/5;
  }

  .document-upload-area.dragging {
    @apply border-primary bg-primary/10;
  }

  /* Loading overlay */
  .loading-overlay {
    @apply absolute inset-0 bg-base-100/80 backdrop-blur-sm flex flex-col justify-center items-center z-50;
  }
}

/* Remove number input spinners */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

input[type="number"] {
  -moz-appearance: textfield;
}

/* Custom animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideUp {
  from { 
    opacity: 0;
    transform: translateY(20px);
  }
  to { 
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes visaPulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.visa-fade-in {
  animation: fadeIn 0.5s ease-in-out;
}

.visa-slide-up {
  animation: slideUp 0.5s ease-out;
}

.visa-pulse {
  animation: visaPulse 2s infinite;
}

/* Responsive improvements */
@media (max-width: 640px) {
  .container {
    @apply px-4;
  }
  
  h1 {
    @apply text-xl;
  }
  
  h2 {
    @apply text-lg;
  }
}

/* Enhanced focus styles for accessibility */
:focus-visible {
  @apply ring-2 ring-primary ring-offset-2 ring-offset-base-100;
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
}

/* Reduce motion for accessibility */
@media (prefers-reduced-motion: reduce) {
  *, *::before, *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}
</file>

<file path="app/frontend/visaverge-user/app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import Script from 'next/script'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'VisaVerge - AI-Powered Visa Applications',
  description: 'The future of visa applications. Smart, transparent, and designed for the digital age.',
  keywords: ['visa', 'application', 'AI', 'embassy', 'travel', 'immigration'],
  authors: [{ name: 'VisaVerge Team' }],
  viewport: 'width=device-width, initial-scale=1',
  robots: 'index, follow',
  openGraph: {
    title: 'VisaVerge - AI-Powered Visa Applications',
    description: 'Experience the future of visa applications with AI guidance, real-time tracking, and smart forms.',
    type: 'website',
    siteName: 'VisaVerge',
  },
  twitter: {
    card: 'summary_large_image',
    title: 'VisaVerge - AI-Powered Visa Applications',
    description: 'Experience the future of visa applications with AI guidance, real-time tracking, and smart forms.',
  }
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
        {/* Theme initialization script - runs before hydration */}
        <Script id="theme-init" strategy="beforeInteractive">
          {`
            (function() {
              try {
                const theme = localStorage.getItem('theme');
                const systemDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
                
                let appliedTheme = 'cupcake'; // default light theme
                
                if (theme === 'dark') {
                  appliedTheme = 'dracula';
                } else if (theme === 'light') {
                  appliedTheme = 'cupcake';
                } else if (!theme || theme === 'default') {
                  appliedTheme = systemDark ? 'dracula' : 'cupcake';
                }
                
                document.documentElement.setAttribute('data-theme', appliedTheme);
                document.body.setAttribute('data-theme', appliedTheme);
              } catch (e) {
                // Fallback to light theme
                document.documentElement.setAttribute('data-theme', 'cupcake');
                document.body.setAttribute('data-theme', 'cupcake');
              }
            })();
          `}
        </Script>
      </head>
      <body className={`${inter.className} antialiased`} suppressHydrationWarning>
        <div className="min-h-screen bg-base-200">
          {children}
        </div>
      </body>
    </html>
  )
}
</file>

<file path="app/frontend/visaverge-user/app/page.tsx">
'use client'

import { useState, useEffect } from 'react'
import { Globe, Zap, Shield, Users, ArrowRight, Sparkles, QrCode, Download, Copy, Lock, Eye, EyeOff, CheckCircle2, Upload } from 'lucide-react'
import ChatInterface from '@/components/ChatInterface'
import DynamicForm from '@/components/DynamicForm'
import DocumentUpload from '@/components/DocumentUpload'
import StatusTracker from '@/components/StatusTracker'
import StatusLogin from '@/components/StatusLogin'
import ApplicationSubmitted from '@/components/ApplicationSubmitted'
import DarkModeSwitcher from '@/components/Layout/DarkModeSwitcher/DarkModeSwitcher'
import AlertContainer from '@/components/Alert/AlertContainer'
import { Card, Button, Stats, Stat, Badge } from '@/components/UI'
import { VisaType, Document } from '@/types'
import { api } from '@/utils/api'
import { useAlertStore } from '@/lib/stores/alert.store'

type AppStep = 'landing' | 'chat' | 'form' | 'submitted' | 'documents' | 'status' | 'status-login'

interface ApplicationData {
  id: string
  visaType: VisaType
  status: string
  applicantName?: string
}

export default function HomePage() {
  const [currentStep, setCurrentStep] = useState<AppStep>('landing')
  const [selectedVisaType, setSelectedVisaType] = useState<VisaType | null>(null)
  const [formAnswers, setFormAnswers] = useState<Record<string, any>>({})
  const [documents, setDocuments] = useState<Document[]>([])
  const [applicationData, setApplicationData] = useState<ApplicationData | null>(null)
  const [applicationPassword, setApplicationPassword] = useState<string>('')
  const [prefilledApplicationId, setPrefilledApplicationId] = useState<string>('')
  const [redirectToDocuments, setRedirectToDocuments] = useState<boolean>(false)
  const { showSuccess, showError } = useAlertStore()

  // Check URL parameters on page load for QR code functionality
  useEffect(() => {
    if (typeof window !== 'undefined') {
      // Pre-populate localStorage with demo credentials
      const demoCredentials = [
        { id: 'VSV-240101-A1B2', password: 'DEMO123' },
        { id: 'VSV-240102-C3D4', password: 'DEMO456' },
        { id: 'VSV-240103-E5F6', password: 'DEMO789' },
        { id: 'VSV-240104-G7H8', password: 'DEMO999' }
      ]
      
      demoCredentials.forEach(({ id, password }) => {
        const key = `app_${id}_password`
        if (!localStorage.getItem(key)) {
          localStorage.setItem(key, password)
        }
      })
      
      const urlParams = new URLSearchParams(window.location.search)
      const step = urlParams.get('step')
      const id = urlParams.get('id')
      const action = urlParams.get('action')
      
      // If QR code was scanned, navigate to status login with prefilled ID
      if (step === 'status-login' && id) {
        setPrefilledApplicationId(id)
        setCurrentStep('status-login')
        
        // Check if they want to upload documents specifically
        if (action === 'upload-documents') {
          setRedirectToDocuments(true)
          showSuccess('QR code scanned! Please enter your password to upload documents.')
        } else {
          showSuccess('QR code scanned! Please enter your password to access your application.')
        }
        
        // Clean up URL without refreshing page
        window.history.replaceState({}, document.title, window.location.pathname)
      }
    }
  }, [showSuccess])

  const handleVisaTypeSelected = (visaType: VisaType) => {
    setSelectedVisaType(visaType)
    setCurrentStep('form')
    showSuccess(`Starting ${visaType} visa application!`)
  }

  const handleFormSubmit = async (answers: Record<string, any>, password: string) => {
    try {
      setFormAnswers(answers)
      setApplicationPassword(password)
      
      showSuccess('Submitting your application...')
      
      // Submit application to backend
      const application = await api.submitApplication({
        visaType: selectedVisaType!,
        answers,
        documents: [], // No documents yet
        password
      })
      
      setApplicationData({
        id: application.id,
        visaType: selectedVisaType!,
        status: application.status,
        applicantName: answers.applicant_name
      })
      
      // Store password locally for later access
      localStorage.setItem(`app_${application.id}_password`, password)
      
      setCurrentStep('submitted')
      showSuccess('Application submitted successfully!')
    } catch (error) {
      console.error('Error submitting application:', error)
      
      // Fallback for demo - generate mock application ID
      const mockId = `VSV-${Date.now().toString().slice(-8)}`
      setApplicationData({
        id: mockId,
        visaType: selectedVisaType!,
        status: 'document_collection',
        applicantName: answers.applicant_name
      })
      localStorage.setItem(`app_${mockId}_password`, password)
      setCurrentStep('submitted')
      showSuccess('Application submitted successfully!')
    }
  }

  const handleContinueToDocuments = () => {
    setCurrentStep('documents')
  }

  const handleSkipToTracking = () => {
    setCurrentStep('status')
  }

  const handleDocumentsComplete = () => {
    setCurrentStep('status')
    showSuccess('Documents uploaded successfully!')
  }

  const handleAccessApplication = async (appId: string, password: string) => {
    try {
      // Try to verify with backend first
      const application = await api.getApplicationWithPassword(appId, password)
      
      // If backend verification succeeds, proceed
      setApplicationData({
        id: application.id,
        visaType: application.visaType as VisaType,
        status: application.status,
        applicantName: application.applicantName
      })
      
      // Check if we should redirect to documents
      if (redirectToDocuments) {
        setRedirectToDocuments(false)
        setCurrentStep('documents')
        showSuccess('Application accessed! You can now upload your documents.')
      } else {
        setCurrentStep('status')
        showSuccess('Application accessed successfully!')
      }
      
    } catch (error) {
      console.error('Backend verification failed, trying localStorage fallback:', error)
      
      // Fallback to localStorage check for demo
      const storedPassword = localStorage.getItem(`app_${appId}_password`)
      
      if (storedPassword && storedPassword === password) {
        // Create mock application data for demo
        setApplicationData({
          id: appId,
          visaType: 'business', // Default for demo
          status: 'document_collection',
          applicantName: 'Demo User'
        })
        
        if (redirectToDocuments) {
          setRedirectToDocuments(false)
          setCurrentStep('documents')
          showSuccess('Application accessed! You can now upload your documents.')
        } else {
          setCurrentStep('status')
          showSuccess('Application accessed successfully!')
        }
      } else {
        showError('Invalid application ID or password')
      }
    }
  }

  const resetApplication = () => {
    setCurrentStep('landing')
    setSelectedVisaType(null)
    setFormAnswers({})
    setDocuments([])
    setApplicationData(null)
    setApplicationPassword('')
    setPrefilledApplicationId('')
    setRedirectToDocuments(false)
  }

  const startChatDirectly = () => {
    setCurrentStep('chat')
  }

  const showStatusLogin = () => {
    setCurrentStep('status-login')
  }

  // Navigate to documents from status page
  const navigateToDocuments = () => {
    if (applicationData) {
      setCurrentStep('documents')
      showSuccess('You can now upload your documents.')
    } else {
      showError('Application data not found. Please log in again.')
      setCurrentStep('status-login')
    }
  }

  if (currentStep === 'status-login') {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <button 
              onClick={() => setCurrentStep('landing')}
              className="btn btn-ghost normal-case text-xl font-bold"
            >
              <Globe className="w-6 h-6 mr-2" />
              VisaVerge
            </button>
          </div>
          <div className="flex-none">
            <DarkModeSwitcher />
          </div>
        </div>

        <StatusLogin 
          onAccessApplication={handleAccessApplication}
          onBack={() => setCurrentStep('landing')}
          prefilledApplicationId={prefilledApplicationId}
        />
        <AlertContainer />
      </div>
    )
  }

  if (currentStep === 'chat') {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <button 
              onClick={() => setCurrentStep('landing')}
              className="btn btn-ghost normal-case text-xl font-bold"
            >
              <Globe className="w-6 h-6 mr-2" />
              VisaVerge
            </button>
          </div>
          <div className="flex-none">
            <DarkModeSwitcher />
          </div>
        </div>

        <div className="container mx-auto px-4 py-8">
          <div className="max-w-4xl mx-auto">
            <div className="text-center mb-8">
              <h1 className="text-4xl font-bold mb-4">Chat with AVA</h1>
              <p className="text-lg opacity-70">
                Your AI visa assistant is ready to help you find the right visa
              </p>
              <Badge variant="primary" className="mt-2">
                <Sparkles className="w-4 h-4 mr-1" />
                AI-Powered
              </Badge>
            </div>

            <Card className="h-[600px]">
              <ChatInterface onVisaTypeSelected={handleVisaTypeSelected} />
            </Card>

            <div className="text-center mt-6">
              <Button 
                variant="ghost" 
                onClick={() => setCurrentStep('landing')}
                className="btn-sm"
              >
                ← Back to homepage
              </Button>
            </div>
          </div>
        </div>
        <AlertContainer />
      </div>
    )
  }

  if (currentStep === 'form' && selectedVisaType) {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <span className="text-xl font-bold">
              <Globe className="w-6 h-6 mr-2 inline" />
              VisaVerge
            </span>
          </div>
          <div className="flex-none">
            <DarkModeSwitcher />
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-8">
          <DynamicForm
            visaType={selectedVisaType}
            onSubmit={handleFormSubmit}
            onBack={() => setCurrentStep('chat')}
          />
        </div>
        <AlertContainer />
      </div>
    )
  }

  if (currentStep === 'submitted' && applicationData) {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <span className="text-xl font-bold">
              <Globe className="w-6 h-6 mr-2 inline" />
              VisaVerge
            </span>
          </div>
          <div className="flex-none">
            <DarkModeSwitcher />
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-8">
          <ApplicationSubmitted
            applicationId={applicationData.id}
            onContinueToDocuments={handleContinueToDocuments}
            onSkipToTracking={handleSkipToTracking}
          />
        </div>
        <AlertContainer />
      </div>
    )
  }

  if (currentStep === 'documents' && applicationData) {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <span className="text-xl font-bold">
              <Globe className="w-6 h-6 mr-2 inline" />
              VisaVerge
            </span>
          </div>
          <div className="flex-none">
            <button 
              onClick={() => setCurrentStep('status')}
              className="btn btn-ghost btn-sm mr-2"
            >
              ← Back to Status
            </button>
            <DarkModeSwitcher />
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-8">
          <DocumentUpload
            visaType={applicationData.visaType}
            applicationId={applicationData.id}
            onDocumentsChange={setDocuments}
            onComplete={handleDocumentsComplete}
            onSkip={handleSkipToTracking}
          />
        </div>
        <AlertContainer />
      </div>
    )
  }

  if (currentStep === 'status' && applicationData) {
    return (
      <div className="min-h-screen bg-base-200">
        <div className="navbar bg-base-100 shadow-lg">
          <div className="flex-1">
            <span className="text-xl font-bold">
              <Globe className="w-6 h-6 mr-2 inline" />
              VisaVerge
            </span>
          </div>
          <div className="flex-none">
            <button 
              onClick={navigateToDocuments}
              className="btn btn-primary btn-sm mr-2"
            >
              <Upload className="w-4 h-4 mr-1" />
              Upload Documents
            </button>
            <DarkModeSwitcher />
          </div>
        </div>
        
        <div className="container mx-auto px-4 py-8">
          <StatusTracker
            applicationId={applicationData.id}
            onNewApplication={resetApplication}
            onNavigateToDocuments={navigateToDocuments}
          />
        </div>
        <AlertContainer />
      </div>
    )
  }

  // Landing page
  return (
    <div className="min-h-screen bg-base-200">
      {/* Navbar */}
      <div className="navbar bg-base-100 shadow-lg">
        <div className="flex-1">
          <span className="text-2xl font-bold">
            <Globe className="w-8 h-8 mr-2 inline text-primary" />
            VisaVerge
          </span>
        </div>
        <div className="flex-none">
          <DarkModeSwitcher />
        </div>
      </div>

      {/* Hero Section */}
      <div className="hero min-h-screen bg-gradient-to-br from-primary/10 via-secondary/5 to-accent/10">
        <div className="hero-content text-center">
          <div className="max-w-4xl">
            <div className="mb-8">
              <div className="flex items-center justify-center gap-3 mb-6">
                <Globe className="w-12 h-12 text-primary" />
                <h1 className="text-6xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
                  VisaVerge
                </h1>
              </div>
              
              <p className="text-xl mb-8 opacity-80 max-w-3xl mx-auto leading-relaxed">
                The future of visa applications. Smart, transparent, and designed for the digital age.
              </p>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <Button
                  size="lg"
                  onClick={startChatDirectly}
                  className="btn-lg gradient-primary text-white border-none"
                >
                  <Sparkles className="w-5 h-5 mr-2" />
                  Start New Application
                </Button>
                
                <Button 
                  variant="outline" 
                  size="lg"
                  onClick={showStatusLogin}
                >
                  Check Application Status
                  <ArrowRight className="w-5 h-5 ml-2" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-16">
        {/* Features Grid */}
        <div className="text-center mb-16">
          <h2 className="text-4xl font-bold mb-4">Why Choose VisaVerge?</h2>
          <p className="text-xl opacity-70">Experience the next generation of visa applications</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          <Card className="text-center hover:shadow-xl transition-all duration-300 border-2 border-transparent hover:border-primary">
            <div className="flex justify-center mb-6">
              <div className="p-4 bg-primary/10 rounded-full">
                <Zap className="w-8 h-8 text-primary" />
              </div>
            </div>
            <h3 className="text-2xl font-bold mb-4">Submit First, Documents Later</h3>
            <p className="opacity-70 leading-relaxed">
              Start processing immediately. Upload documents when convenient. Get your QR code for easy access anytime.
            </p>
            <div className="mt-4">
              <Badge variant="primary">
                <Sparkles className="w-3 h-3 mr-1" />
                Instant Start
              </Badge>
            </div>
          </Card>

          <Card className="text-center hover:shadow-xl transition-all duration-300 border-2 border-transparent hover:border-secondary">
            <div className="flex justify-center mb-6">
              <div className="p-4 bg-secondary/10 rounded-full">
                <Shield className="w-8 h-8 text-secondary" />
              </div>
            </div>
            <h3 className="text-2xl font-bold mb-4">Secure QR Access</h3>
            <p className="opacity-70 leading-relaxed">
              Your personal QR code and password ensure secure access. Check status, upload documents, and track progress from anywhere.
            </p>
            <div className="mt-4">
              <Badge variant="secondary">Protected Access</Badge>
            </div>
          </Card>

          <Card className="text-center hover:shadow-xl transition-all duration-300 border-2 border-transparent hover:border-accent">
            <div className="flex justify-center mb-6">
              <div className="p-4 bg-accent/10 rounded-full">
                <Users className="w-8 h-8 text-accent" />
              </div>
            </div>
            <h3 className="text-2xl font-bold mb-4">Real-Time Transparency</h3>
            <p className="opacity-70 leading-relaxed">
              No more "application is being processed." See exactly where your application stands with live updates and approval probability.
            </p>
            <div className="mt-4">
              <Badge variant="accent">Live Tracking</Badge>
            </div>
          </Card>
        </div>

        {/* Stats Section */}
        <Card className="mb-16">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold mb-4">
              Revolutionizing Visa Applications
            </h2>
            <p className="text-lg opacity-70">
              See the difference VisaVerge makes
            </p>
          </div>

          <Stats className="w-full">
            <Stat 
              title="Faster Processing" 
              value="75%" 
              description="↗︎ Compared to traditional methods"
              className="text-primary"
            />
            <Stat 
              title="User Satisfaction" 
              value="90%" 
              description="↗︎ Customer approval rating"
              className="text-secondary"
            />
            <Stat 
              title="Fewer Errors" 
              value="50%" 
              description="↘︎ Reduction in application mistakes"
              className="text-accent"
            />
            <Stat 
              title="AI Support" 
              value="24/7" 
              description="Always available assistance"
              className="text-success"
            />
          </Stats>
        </Card>

        {/* CTA Section */}
        <div className="text-center">
          <Card className="bg-gradient-to-r from-primary/10 to-secondary/10 border-primary">
            <h2 className="text-3xl font-bold mb-4">
              Ready to Transform Your Visa Experience?
            </h2>
            <p className="text-lg opacity-70 mb-8 max-w-2xl mx-auto">
              Join thousands of travelers who have already discovered a better way to apply for visas.
            </p>
            
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button
                size="lg"
                onClick={startChatDirectly}
                className="btn-lg gradient-primary text-white border-none"
              >
                Start Your Application Now
                <ArrowRight className="w-6 h-6 ml-2" />
              </Button>
              
              <Button
                variant="outline"
                size="lg"
                onClick={showStatusLogin}
              >
                Check Existing Application
              </Button>
            </div>
          </Card>
        </div>
      </div>

      {/* Footer */}
      <footer className="footer footer-center p-10 bg-base-300 text-base-content">
        <div>
          <div className="flex items-center gap-2 text-2xl font-bold">
            <Globe className="w-8 h-8 text-primary" />
            VisaVerge
          </div>
          <p className="opacity-70 max-w-md">
            Reimagining embassy services for the digital age
          </p>
          <p className="text-sm opacity-50">
            Built with ❤️ for the Embassy Innovation Hackathon
          </p>
        </div>
      </footer>

      <AlertContainer />
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/Alert/AlertContainer.tsx">
import React from 'react'
import { useAlertStore, AlertType } from '@/lib/stores/alert.store'

interface AlertItemProps {
  id: string
  type: AlertType
  message: string
  onRemove: (id: string) => void
}

const AlertItem: React.FC<AlertItemProps> = ({ id, type, message, onRemove }) => {
  const getAlertClasses = (type: AlertType) => {
    const baseClasses = "alert w-auto max-w-md shadow-lg transition-all duration-300"
    
    switch (type) {
      case 'success':
        return `${baseClasses} alert-success`
      case 'error':
        return `${baseClasses} alert-error`
      case 'warning':
        return `${baseClasses} alert-warning`
      case 'info':
      default:
        return `${baseClasses} alert-info`
    }
  }

  const getIcon = (type: AlertType) => {
    switch (type) {
      case 'success':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
      case 'error':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
      case 'warning':
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        )
      case 'info':
      default:
        return (
          <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
        )
    }
  }

  return (
    <div className={getAlertClasses(type)}>
      {getIcon(type)}
      <span>{message}</span>
      <button 
        className="btn btn-sm btn-ghost btn-circle ml-2"
        onClick={() => onRemove(id)}
      >
        ✕
      </button>
    </div>
  )
}

const AlertContainer: React.FC = () => {
  const { alerts, removeAlert } = useAlertStore()

  if (alerts.length === 0) return null

  return (
    <div className="fixed bottom-4 right-4 pointer-events-none z-50">
      <div className="flex flex-col space-y-2">
        {alerts.map((alert, index) => (
          <div 
            key={alert.id}
            className="pointer-events-auto transform transition-all duration-300 ease-in-out"
            style={{ 
              zIndex: 1000 - index 
            }}
          >
            <AlertItem
              id={alert.id}
              type={alert.type}
              message={alert.message}
              onRemove={removeAlert}
            />
          </div>
        ))}
      </div>
    </div>
  )
}

export default AlertContainer
</file>

<file path="app/frontend/visaverge-user/components/Embassy/AnalyticsDashboard.tsx">
'use client'

import { 
  Users, 
  CheckCircle2, 
  Clock, 
  AlertTriangle,
  TrendingUp,
  TrendingDown,
  Download
} from 'lucide-react'
import { Officer } from '@/types/embassy.types'

interface AnalyticsDashboardProps {
  onBack: () => void
  officer: Officer
}

export default function AnalyticsDashboard({ onBack, officer }: AnalyticsDashboardProps) {
  const mockData = {
    totalApplications: 1247,
    approvalRate: 87.3,
    avgProcessingTime: 8.5,
    pendingApplications: 89,
    trendsData: [
      { month: 'Jan 2024', applications: 156, approvals: 138, rejections: 18 },
      { month: 'Feb 2024', applications: 189, approvals: 165, rejections: 24 },
      { month: 'Mar 2024', applications: 203, approvals: 178, rejections: 25 },
      { month: 'Apr 2024', applications: 221, approvals: 195, rejections: 26 },
      { month: 'May 2024', applications: 198, approvals: 171, rejections: 27 },
      { month: 'Jun 2024', applications: 280, approvals: 248, rejections: 32 }
    ],
    visaTypeDistribution: [
      { type: 'Tourist', count: 524, percentage: 42.0 },
      { type: 'Business', count: 312, percentage: 25.0 },
      { type: 'Student', count: 186, percentage: 14.9 },
      { type: 'Work', count: 124, percentage: 9.9 },
      { type: 'Family Visit', count: 101, percentage: 8.1 }
    ]
  }

  return (
    <div className="min-h-screen bg-base-200">
      {/* Header */}
      <div className="navbar bg-base-100 shadow-lg">
        <div className="flex-1">
          <button className="btn btn-ghost" onClick={onBack}>
            ← Back to Dashboard
          </button>
          <div className="divider divider-horizontal"></div>
          <h1 className="text-xl font-bold">Analytics & Reports</h1>
        </div>
        <div className="flex-none">
          <button className="btn btn-outline btn-sm">
            <Download className="w-4 h-4 mr-2" />
            Export Report
          </button>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <Users className="w-8 h-8 text-primary" />
                <div>
                  <p className="text-2xl font-bold">{mockData.totalApplications.toLocaleString()}</p>
                  <p className="text-sm text-gray-600">Total Applications</p>
                </div>
              </div>
              <div className="text-sm text-green-600 flex items-center gap-1 mt-2">
                <TrendingUp className="w-4 h-4" />
                +12% from last period
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <CheckCircle2 className="w-8 h-8 text-success" />
                <div>
                  <p className="text-2xl font-bold">{mockData.approvalRate}%</p>
                  <p className="text-sm text-gray-600">Approval Rate</p>
                </div>
              </div>
              <div className="text-sm text-green-600 flex items-center gap-1 mt-2">
                <TrendingUp className="w-4 h-4" />
                +2.3% from last period
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <Clock className="w-8 h-8 text-info" />
                <div>
                  <p className="text-2xl font-bold">{mockData.avgProcessingTime}d</p>
                  <p className="text-sm text-gray-600">Avg Processing</p>
                </div>
              </div>
              <div className="text-sm text-green-600 flex items-center gap-1 mt-2">
                <TrendingDown className="w-4 h-4" />
                -1.2 days improvement
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <AlertTriangle className="w-8 h-8 text-warning" />
                <div>
                  <p className="text-2xl font-bold">{mockData.pendingApplications}</p>
                  <p className="text-sm text-gray-600">Pending Review</p>
                </div>
              </div>
              <div className="text-sm text-yellow-600 flex items-center gap-1 mt-2">
                <Clock className="w-4 h-4" />
                6 urgent priority
              </div>
            </div>
          </div>
        </div>

        {/* Charts and Tables */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h3 className="card-title">Application Trends</h3>
              <div className="mt-4">
                <div className="space-y-4">
                  {mockData.trendsData.map((month, index) => (
                    <div key={index} className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span className="font-medium">{month.month}</span>
                        <span>{month.applications} total</span>
                      </div>
                      <div className="flex h-4 bg-gray-200 rounded overflow-hidden">
                        <div 
                          className="bg-success" 
                          style={{ width: `${(month.approvals / month.applications) * 100}%` }}
                        />
                        <div 
                          className="bg-error" 
                          style={{ width: `${(month.rejections / month.applications) * 100}%` }}
                        />
                      </div>
                      <div className="flex justify-between text-xs text-gray-600">
                        <span>✅ {month.approvals} approved</span>
                        <span>❌ {month.rejections} rejected</span>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h3 className="card-title">Visa Type Distribution</h3>
              <div className="space-y-3 mt-4">
                {mockData.visaTypeDistribution.map((item, index) => (
                  <div key={index} className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-4 h-4 rounded-full bg-primary opacity-${100 - index * 20}`} />
                      <span className="font-medium">{item.type}</span>
                    </div>
                    <div className="text-right">
                      <span className="font-bold">{item.count}</span>
                      <span className="text-sm text-gray-600 ml-1">({item.percentage}%)</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        {/* Performance Tables */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h3 className="card-title">Processing Performance</h3>
              <div className="space-y-4 mt-4">
                <div className="flex justify-between items-center">
                  <span>Tourist Visas</span>
                  <span className="badge badge-success">6.5 days avg</span>
                </div>
                <div className="flex justify-between items-center">
                  <span>Business Visas</span>
                  <span className="badge badge-warning">8.2 days avg</span>
                </div>
                <div className="flex justify-between items-center">
                  <span>Student Visas</span>
                  <span className="badge badge-info">14.8 days avg</span>
                </div>
                <div className="flex justify-between items-center">
                  <span>Work Visas</span>
                  <span className="badge badge-error">21.3 days avg</span>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h3 className="card-title">Officer Performance</h3>
              <div className="space-y-4 mt-4">
                <div className="flex justify-between items-center">
                  <span>Maria Schmidt</span>
                  <div className="flex items-center gap-2">
                    <span className="badge badge-success">98% accuracy</span>
                    <span className="badge badge-outline">156 processed</span>
                  </div>
                </div>
                <div className="flex justify-between items-center">
                  <span>John Davis</span>
                  <div className="flex items-center gap-2">
                    <span className="badge badge-success">96% accuracy</span>
                    <span className="badge badge-outline">142 processed</span>
                  </div>
                </div>
                <div className="flex justify-between items-center">
                  <span>Sarah Wilson</span>
                  <div className="flex items-center gap-2">
                    <span className="badge badge-warning">94% accuracy</span>
                    <span className="badge badge-outline">128 processed</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Monthly Insights */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h4 className="font-semibold">Peak Application Period</h4>
              <p className="text-2xl font-bold text-primary">June 2024</p>
              <p className="text-sm text-gray-600">280 applications received</p>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h4 className="font-semibold">Highest Approval Rate</h4>
              <p className="text-2xl font-bold text-success">88.6%</p>
              <p className="text-sm text-gray-600">June 2024</p>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <h4 className="font-semibold">Growth Rate</h4>
              <p className="text-2xl font-bold text-info">+79%</p>
              <p className="text-sm text-gray-600">Compared to last 6 months</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/Embassy/ApplicationReview.tsx">
'use client'

import { useState } from 'react'
import { CheckCircle2, AlertTriangle, FileText } from 'lucide-react'
import { EmbassyApplication, Officer, EmbassyDocument } from '@/types/embassy.types'

interface ApplicationReviewProps {
  application: EmbassyApplication
  onBack: () => void
  onUpdateStatus: (id: string, status: EmbassyApplication['status']) => void
  officer: Officer
}

export default function ApplicationReview({ 
  application, 
  onBack, 
  onUpdateStatus, 
  officer 
}: ApplicationReviewProps) {
  const [decision, setDecision] = useState<'approve' | 'reject' | null>(null)
  const [notes, setNotes] = useState('')
  const [selectedDocument, setSelectedDocument] = useState(0)

  const mockDocuments: EmbassyDocument[] = [
    { id: '1', name: 'Passport', type: 'passport', verified: true, uploadedAt: '2024-01-15' },
    { id: '2', name: 'Photo', type: 'photo', verified: true, uploadedAt: '2024-01-15' },
    { id: '3', name: 'Bank Statement', type: 'bank_statement', verified: true, uploadedAt: '2024-01-15' },
    { id: '4', name: 'Invitation Letter', type: 'invitation_letter', verified: false, uploadedAt: '2024-01-15' }
  ]

  const mockAnswers = {
    'destination_country': 'Germany',
    'business_purpose': 'Conference/Meeting',
    'company_name': 'Tech Solutions Inc.',
    'invitation_company': 'Berlin Tech Conference',
    'duration': '7'
  }

  const handleMakeDecision = () => {
    if (decision) {
      const newStatus = decision === 'approve' ? 'approved' : 'rejected'
      onUpdateStatus(application.id, newStatus)
      onBack()
    }
  }

  return (
    <div className="min-h-screen bg-base-200">
      {/* Header */}
      <div className="navbar bg-base-100 shadow-lg">
        <div className="flex-1">
          <button className="btn btn-ghost" onClick={onBack}>
            ← Back to Dashboard
          </button>
          <div className="divider divider-horizontal"></div>
          <h1 className="text-xl font-bold">Application Review</h1>
        </div>
        <div className="flex-none">
          <span className="text-sm text-gray-600">Reviewing as: {officer.name}</span>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Column - Application Details */}
          <div className="lg:col-span-1 space-y-6">
            {/* Applicant Info */}
            <div className="card bg-base-100 shadow">
              <div className="card-body">
                <h3 className="card-title">Applicant Information</h3>
                <div className="space-y-3">
                  <div>
                    <p className="text-sm text-gray-600">Name</p>
                    <p className="font-semibold">{application.applicantName}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Application ID</p>
                    <p className="font-mono text-sm">{application.id}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Visa Type</p>
                    <span className="badge badge-primary">{application.visaType}</span>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Country of Origin</p>
                    <p className="font-semibold">{application.country}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Risk Assessment</p>
                    <p className={`font-bold ${application.riskScore < 10 ? 'text-green-600' : application.riskScore < 20 ? 'text-yellow-600' : 'text-red-600'}`}>
                      {application.riskScore}% Risk Score
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Application Answers */}
            <div className="card bg-base-100 shadow">
              <div className="card-body">
                <h3 className="card-title">Application Answers</h3>
                <div className="space-y-3">
                  {Object.entries(mockAnswers).map(([key, value]) => (
                    <div key={key}>
                      <p className="text-sm text-gray-600">{key.replace('_', ' ').replace(/\b\w/g, l => l.toUpperCase())}</p>
                      <p className="font-semibold">{value}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Middle Column - Documents */}
          <div className="lg:col-span-1">
            <div className="card bg-base-100 shadow h-full">
              <div className="card-body">
                <h3 className="card-title">Documents ({mockDocuments.length})</h3>
                
                {/* Document List */}
                <div className="space-y-2">
                  {mockDocuments.map((doc, index) => (
                    <div 
                      key={index}
                      className={`p-3 rounded border cursor-pointer ${selectedDocument === index ? 'border-primary bg-primary/10' : 'border-gray-200'}`}
                      onClick={() => setSelectedDocument(index)}
                    >
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="font-semibold">{doc.name}</p>
                          <p className="text-sm text-gray-600">Uploaded: {doc.uploadedAt}</p>
                        </div>
                        <div className="flex items-center gap-2">
                          {doc.verified ? (
                            <CheckCircle2 className="w-5 h-5 text-success" />
                          ) : (
                            <AlertTriangle className="w-5 h-5 text-warning" />
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Document Viewer */}
                <div className="mt-4 p-4 border rounded bg-gray-100">
                  <h4 className="font-semibold mb-2">{mockDocuments[selectedDocument].name}</h4>
                  <div className="bg-white p-6 rounded border-2 border-dashed text-center">
                    <FileText className="w-12 h-12 text-gray-400 mx-auto mb-2" />
                    <p className="text-gray-600">Document Preview</p>
                    <p className="text-sm text-gray-500">
                      {mockDocuments[selectedDocument].verified ? 'Verified ✓' : 'Verification Pending'}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          {/* Right Column - Decision */}
          <div className="lg:col-span-1">
            <div className="card bg-base-100 shadow">
              <div className="card-body">
                <h3 className="card-title">Make Decision</h3>
                
                <div className="space-y-4">
                  {/* Decision Buttons */}
                  <div className="space-y-2">
                    <button 
                      className={`btn w-full ${decision === 'approve' ? 'btn-success' : 'btn-outline btn-success'}`}
                      onClick={() => setDecision('approve')}
                    >
                      <CheckCircle2 className="w-5 h-5 mr-2" />
                      Approve Application
                    </button>
                    
                    <button 
                      className={`btn w-full ${decision === 'reject' ? 'btn-error' : 'btn-outline btn-error'}`}
                      onClick={() => setDecision('reject')}
                    >
                      <AlertTriangle className="w-5 h-5 mr-2" />
                      Reject Application
                    </button>
                  </div>

                  {/* Notes */}
                  <div className="form-control">
                    <label className="label">
                      <span className="label-text">Decision Notes</span>
                    </label>
                    <textarea 
                      className="textarea textarea-bordered h-24" 
                      placeholder="Add notes about your decision..."
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                    ></textarea>
                  </div>

                  {/* Submit Decision */}
                  <button 
                    className="btn btn-primary w-full"
                    disabled={!decision}
                    onClick={handleMakeDecision}
                  >
                    Submit Decision
                  </button>
                </div>

                {/* AI Insights */}
                <div className="mt-6 p-4 bg-info/10 rounded">
                  <h4 className="font-semibold text-info mb-2">🤖 AI Insights</h4>
                  <ul className="text-sm space-y-1">
                    <li>• Strong financial documentation</li>
                    <li>• Clear business purpose stated</li>
                    <li>• No previous visa violations</li>
                    <li>• All required documents present</li>
                  </ul>
                  <div className="mt-2">
                    <span className="badge badge-success">85% Approval Confidence</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/Embassy/index.tsx">
// Export all embassy components for easy importing

export { default as EmbassyLogin } from './EmbassyLogin'
export { default as EmbassyDashboard } from './EmbassyDashboard'
export { default as ApplicationReview } from './ApplicationReview'
export { default as AnalyticsDashboard } from './AnalyticsDashboard'

// Re-export types for convenience
export type {
  Officer,
  Embassy,
  LoginCredentials,
  EmbassyApplication,
  EmbassyDocument,
  ApplicationReviewData,
  StatusUpdate,
  AnalyticsData
} from '@/types/embassy.types'
</file>

<file path="app/frontend/visaverge-user/components/Layout/DarkModeSwitcher/DarkModeSelect/DarkModeSelect.tsx">
import React from "react"

interface DarkModeSelectProps {
	themeSwitch: Function
}

const DarkModeSelect = ({ themeSwitch }: DarkModeSelectProps) => {
	return (
		<ul tabIndex={0} className="menu menu-compact dropdown-content mt-3 p-2 shadow rounded-box w-52">
			<li>
				<span onClick={() => themeSwitch("default")}>System Default</span>
			</li>
			<li>
				<span onClick={() => themeSwitch("light")}>Light</span>
			</li>
			<li>
				<span onClick={() => themeSwitch("dark")}>Dark</span>
			</li>
		</ul>
	)
}

export default DarkModeSelect
</file>

<file path="app/frontend/visaverge-user/components/Layout/DarkModeSwitcher/DarkModeSwitcher.tsx">
import React, { useEffect, useState } from "react"
import { THEMES } from "@/lib/constants/theme.constants"
import DarkModeSelect from "./DarkModeSelect/DarkModeSelect"

const DarkModeSwitcher = () => {
	const [showMoon, setShowMoon] = useState(true)
	const [isSystemDark, setIsSystemDark] = useState(
		typeof window !== "undefined" && window.matchMedia("screen and (prefers-color-scheme: dark)").matches
	)

	typeof window !== "undefined" &&
		window.matchMedia("screen and (prefers-color-scheme: dark)").addEventListener("change", (event) => {
			setIsSystemDark(window.matchMedia("screen and (prefers-color-scheme: dark)").matches)
		})

	useEffect(() => {
		const userTheme = localStorage.getItem("theme")

		if (userTheme === "dark") applyDark()
		if (userTheme === "light") applyLight()

		if (!userTheme || userTheme === "default") {
			if (isSystemDark) applyDark()
			else applyLight()
		}
	}, [isSystemDark])

	const applyDark = () => {
		document.body.setAttribute("data-theme", THEMES.DARK)
		setShowMoon(false)
	}

	const applyLight = () => {
		document.body.setAttribute("data-theme", THEMES.LIGHT)
		setShowMoon(true)
	}

	const themeSwitch = (theme: string) => {
		if (document.activeElement instanceof HTMLElement) {
			document.activeElement.blur()
		}
		localStorage.setItem("theme", theme)

		if (theme === "default") {
			if (isSystemDark) applyDark()
			else applyLight()
		}

		if (theme === "dark") applyDark()
		if (theme === "light") applyLight()
	}

	return (
		<div className="flex-none">
			<div tabIndex={0} className="dropdown dropdown-end">
				{showMoon ? (
					<button tabIndex={0} className="btn btn-ghost btn-circle">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							strokeWidth={2}
							stroke="currentColor"
							className="w-6 h-6">
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z"
							/>
						</svg>
					</button>
				) : (
					<button tabIndex={0} className="btn btn-ghost btn-circle">
						<svg
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
							strokeWidth={2}
							stroke="currentColor"
							className="w-6 h-6">
							<path
								strokeLinecap="round"
								strokeLinejoin="round"
								d="M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z"
							/>
						</svg>
					</button>
				)}
				<DarkModeSelect themeSwitch={themeSwitch} />
			</div>
		</div>
	)
}

export default DarkModeSwitcher
</file>

<file path="app/frontend/visaverge-user/components/Layout/Footer/Footer.tsx">
import React from "react"

const Footer = () => {
	return (
		<footer className="footer flex flex-row flex-wrap justify-between p-5 opacity-50 gap-y-2 mb-2 md:mb-0">
			<div className="text-sm">
				© 2025 SKS Trainer. Sportküstenschifferschein Prüfungsvorbereitung.
			</div>
		</footer>
	)
}

export default Footer
</file>

<file path="app/frontend/visaverge-user/components/Layout/Navbar/Navbar.tsx">
"use client"

import { useRouter, usePathname } from "next/navigation"
import React from "react"
import DarkModeSwitcher from "@/components/Layout/DarkModeSwitcher/DarkModeSwitcher"

const Navbar = () => {
  const router = useRouter()
  const pathname = usePathname()

  return (
    <div className="navbar">
      <div className="flex-1">
        {pathname === "/" ? (
          <button className="btn btn-ghost normal-case text-2xl logo" onClick={() => window.location.reload()}>
            ⚓ SKS Trainer
          </button>
        ) : (
          <button className="btn btn-ghost normal-case text-2xl logo" onClick={() => router.push("/")}>
            ⚓ SKS Trainer
          </button>
        )}
      </div>
      
      <div className="flex-none gap-2">
        <DarkModeSwitcher />
      </div>
    </div>
  )
}

export default Navbar
</file>

<file path="app/frontend/visaverge-user/components/Layout/Layout.tsx">
import React, { ReactNode } from "react"
import AlertContainer from "@/components/Alert/AlertContainer"
import Footer from "./Footer/Footer"
import Navbar from "./Navbar/Navbar"

interface LayoutProps {
  children: ReactNode
}

const Layout = (props: LayoutProps) => {
  return (
    <div className="flex flex-col min-h-screen justify-between">
      <Navbar />
      <AlertContainer />
      <div className="container pt-14 pb-24">{props.children}</div>
      <Footer />
    </div>
  )
}

export default Layout
</file>

<file path="app/frontend/visaverge-user/components/UI/Button.tsx">
import React from 'react'

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

export default Button
</file>

<file path="app/frontend/visaverge-user/components/UI/Card.tsx">
import React from 'react'

interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
}

const Card: React.FC<CardProps> = ({ children, className = '', title }) => {
  return (
    <div className={`card bg-base-200 shadow ${className}`}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

export default Card
</file>

<file path="app/frontend/visaverge-user/components/UI/index.tsx">
import React from 'react'

// Button Component
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline' | 'success' | 'warning' | 'error'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

export const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline',
    success: 'btn-success',
    warning: 'btn-warning',
    error: 'btn-error'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

// Card Component
interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
  compact?: boolean
  bordered?: boolean
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  className = '', 
  title, 
  compact = false,
  bordered = false 
}) => {
  const cardClasses = [
    'card',
    'bg-base-100',
    'shadow-lg',
    bordered ? 'card-bordered' : '',
    compact ? 'card-compact' : '',
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={cardClasses}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

// Loading Spinner Component
interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

// Loading Overlay Component
interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="loading-overlay">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

// Stats Components
interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

export const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

export const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

// Badge Component
interface BadgeProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'success' | 'warning' | 'error' | 'info'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  className?: string
}

export const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = ''
}) => {
  const variantClasses = {
    primary: 'badge-primary',
    secondary: 'badge-secondary',
    accent: 'badge-accent',
    ghost: 'badge-ghost',
    success: 'badge-success',
    warning: 'badge-warning',
    error: 'badge-error',
    info: 'badge-info'
  }
  
  const sizeClasses = {
    xs: 'badge-xs',
    sm: 'badge-sm',
    md: '',
    lg: 'badge-lg'
  }

  const badgeClasses = [
    'badge',
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={badgeClasses}>
      {children}
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/UI/LoadingOverlay.tsx">
import React from 'react'
import LoadingSpinner from './LoadingSpinner'

interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="absolute inset-0 bg-base-100/80 backdrop-blur-sm flex flex-col justify-center items-center z-50">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

export default LoadingOverlay
</file>

<file path="app/frontend/visaverge-user/components/UI/LoadingSpinner.tsx">
import React from 'react'

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

export default LoadingSpinner
</file>

<file path="app/frontend/visaverge-user/components/UI/Stats.tsx">
import React from 'react'

interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

export { Stats, Stat }
</file>

<file path="app/frontend/visaverge-user/components/DocumentUpload.tsx">
'use client'

import { useState, useRef, useCallback } from 'react'
import { Upload, FileText, CheckCircle2, AlertCircle, X, Camera, Trash2, ArrowRight, Clock, AlertTriangle, Shield } from 'lucide-react'
import { Document, DocumentType, VisaType } from '@/types'

interface DocumentUploadProps {
  visaType: VisaType
  applicationId: string
  onDocumentsChange?: (documents: Document[]) => void
  onComplete?: () => void
  onSkip?: () => void
}

// Updated document requirements with mandatory/optional classification
const DOCUMENT_REQUIREMENTS: Record<VisaType, { mandatory: DocumentType[], optional: DocumentType[] }> = {
  tourist: {
    mandatory: ['passport', 'photo', 'bank_statement'],
    optional: ['travel_insurance', 'flight_itinerary']
  },
  business: {
    mandatory: ['passport', 'photo', 'invitation_letter'],
    optional: ['employment_letter', 'bank_statement']
  },
  student: {
    mandatory: ['passport', 'photo', 'invitation_letter', 'bank_statement'],
    optional: ['employment_letter']
  },
  work: {
    mandatory: ['passport', 'photo', 'employment_letter', 'invitation_letter'],
    optional: ['bank_statement']
  },
  family_visit: {
    mandatory: ['passport', 'photo', 'invitation_letter'],
    optional: ['bank_statement', 'employment_letter']
  },
  transit: {
    mandatory: ['passport', 'photo', 'flight_itinerary'],
    optional: []
  }
}

const DOCUMENT_NAMES: Record<DocumentType, string> = {
  passport: 'Passport (Photo Page)',
  photo: 'Passport Photo',
  bank_statement: 'Bank Statement',
  invitation_letter: 'Invitation Letter',
  travel_insurance: 'Travel Insurance',
  employment_letter: 'Employment Letter',
  flight_itinerary: 'Flight Itinerary'
}

const DOCUMENT_DESCRIPTIONS: Record<DocumentType, string> = {
  passport: 'Clear photo of your passport information page',
  photo: 'Recent passport-sized photo (white background)',
  bank_statement: 'Last 3 months bank statements showing sufficient funds',
  invitation_letter: 'Official invitation letter from host organization',
  travel_insurance: 'Valid travel insurance covering your entire stay',
  employment_letter: 'Letter from employer confirming your employment',
  flight_itinerary: 'Flight booking confirmation or itinerary'
}

export default function DocumentUpload({ 
  visaType, 
  applicationId, 
  onDocumentsChange, 
  onComplete, 
  onSkip 
}: DocumentUploadProps) {
  const [documents, setDocuments] = useState<Document[]>([])
  const [uploadingDocs, setUploadingDocs] = useState<Set<string>>(new Set())
  const [draggedOver, setDraggedOver] = useState<string | null>(null)
  const fileInputRefs = useRef<Record<string, HTMLInputElement | null>>({})

  const requirements = DOCUMENT_REQUIREMENTS[visaType] || { mandatory: [], optional: [] }
  const allDocTypes = [...requirements.mandatory, ...requirements.optional]

  // Simulate document verification
  const verifyDocument = async (file: File, docType: DocumentType): Promise<boolean> => {
    await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 2000))
    return Math.random() > 0.1
  }

  const handleFileUpload = useCallback(async (file: File, docType: DocumentType) => {
    const docId = `${docType}_${Date.now()}`
    
    setUploadingDocs(prev => new Set([...prev, docId]))

    try {
      const verified = await verifyDocument(file, docType)
      
      const newDocument: Document = {
        id: docId,
        name: file.name,
        type: docType,
        size: file.size,
        uploadedAt: new Date(),
        verified,
        url: URL.createObjectURL(file)
      }

      setDocuments(prev => {
        const filtered = prev.filter(doc => doc.type !== docType)
        const updated = [...filtered, newDocument]
        onDocumentsChange?.(updated)
        return updated
      })
    } catch (error) {
      console.error('Error uploading document:', error)
    } finally {
      setUploadingDocs(prev => {
        const newSet = new Set(prev)
        newSet.delete(docId)
        return newSet
      })
    }
  }, [onDocumentsChange])

  const handleDrop = useCallback((e: React.DragEvent, docType: DocumentType) => {
    e.preventDefault()
    setDraggedOver(null)
    
    const files = Array.from(e.dataTransfer.files)
    if (files.length > 0) {
      handleFileUpload(files[0], docType)
    }
  }, [handleFileUpload])

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>, docType: DocumentType) => {
    const files = e.target.files
    if (files && files.length > 0) {
      handleFileUpload(files[0], docType)
    }
  }

  const removeDocument = (docType: DocumentType) => {
    setDocuments(prev => {
      const updated = prev.filter(doc => doc.type !== docType)
      onDocumentsChange?.(updated)
      return updated
    })
  }

  const getDocumentForType = (docType: DocumentType) => {
    return documents.find(doc => doc.type === docType)
  }

  const isUploading = (docType: DocumentType) => {
    return Array.from(uploadingDocs).some(id => id.startsWith(docType))
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  // Calculate completion status
  const mandatoryUploaded = requirements.mandatory.filter(docType => 
    documents.find(doc => doc.type === docType && doc.verified)
  ).length
  const mandatoryTotal = requirements.mandatory.length
  const optionalUploaded = requirements.optional.filter(docType => 
    documents.find(doc => doc.type === docType && doc.verified)
  ).length
  
  const mandatoryComplete = mandatoryUploaded === mandatoryTotal
  const processingBlocked = !mandatoryComplete

  const DocumentUploadCard = ({ docType, isMandatory }: { docType: DocumentType, isMandatory: boolean }) => {
    const document = getDocumentForType(docType)
    const uploading = isUploading(docType)
    
    return (
      <div
        className={`border-2 border-dashed rounded-lg p-6 transition-all ${
          draggedOver === docType
            ? 'border-blue-500 bg-blue-50'
            : document?.verified
            ? 'border-green-500 bg-green-50'
            : document && !document.verified
            ? 'border-red-500 bg-red-50'
            : isMandatory
            ? 'border-red-300 bg-red-50 hover:border-red-400'
            : 'border-gray-300 hover:border-blue-400'
        }`}
        onDragOver={(e) => {
          e.preventDefault()
          setDraggedOver(docType)
        }}
        onDragLeave={() => setDraggedOver(null)}
        onDrop={(e) => handleDrop(e, docType)}
      >
        <input
          ref={el => fileInputRefs.current[docType] = el}
          type="file"
          accept="image/*,.pdf"
          onChange={(e) => handleFileInput(e, docType)}
          className="hidden"
        />

        {/* Header with mandatory/optional indicator */}
        <div className="flex items-center justify-between mb-3">
          <h3 className="font-medium text-gray-800">
            {DOCUMENT_NAMES[docType]}
          </h3>
          <span className={`badge badge-sm ${
            isMandatory ? 'badge-error' : 'badge-warning'
          }`}>
            {isMandatory ? 'REQUIRED' : 'Optional'}
          </span>
        </div>

        <div className="text-center">
          {uploading ? (
            <div className="space-y-3">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
              <p className="text-blue-600 font-medium">Uploading & Verifying...</p>
              <p className="text-sm text-gray-600">Please wait while we process your document</p>
            </div>
          ) : document ? (
            <div className="space-y-3">
              <div className="flex items-center justify-center">
                {document.verified ? (
                  <CheckCircle2 className="w-12 h-12 text-green-500" />
                ) : (
                  <AlertCircle className="w-12 h-12 text-red-500" />
                )}
              </div>
              
              <div>
                <p className="font-medium text-gray-800">{document.name}</p>
                <p className="text-sm text-gray-600">{formatFileSize(document.size)}</p>
                <p className={`text-sm font-medium ${
                  document.verified ? 'text-green-600' : 'text-red-600'
                }`}>
                  {document.verified ? 'Verified ✓' : 'Verification Failed ✗'}
                </p>
              </div>

              <div className="flex gap-2 justify-center">
                <button
                  onClick={() => fileInputRefs.current[docType]?.click()}
                  className="px-3 py-1 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
                >
                  Replace
                </button>
                <button
                  onClick={() => removeDocument(docType)}
                  className="px-3 py-1 text-sm bg-red-500 text-white rounded hover:bg-red-600"
                >
                  <Trash2 className="w-4 h-4" />
                </button>
              </div>
            </div>
          ) : (
            <div className="space-y-3">
              <Upload className="w-12 h-12 text-gray-400 mx-auto" />
              <div>
                <p className="text-sm text-gray-600 mb-3">
                  {DOCUMENT_DESCRIPTIONS[docType]}
                </p>
              </div>
              
              <div className="space-y-2">
                <button
                  onClick={() => fileInputRefs.current[docType]?.click()}
                  className={`w-full px-4 py-2 rounded-lg transition-colors ${
                    isMandatory 
                      ? 'bg-red-500 text-white hover:bg-red-600' 
                      : 'bg-blue-500 text-white hover:bg-blue-600'
                  }`}
                >
                  <FileText className="w-4 h-4 inline mr-2" />
                  Choose File
                </button>
                
                <button
                  onClick={() => fileInputRefs.current[docType]?.click()}
                  className="w-full px-4 py-2 border border-gray-400 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  <Camera className="w-4 h-4 inline mr-2" />
                  Take Photo
                </button>
              </div>
              
              <p className="text-xs text-gray-500">
                Drag & drop or click to upload<br />
                Supports: JPG, PNG, PDF (max 10MB)
              </p>
            </div>
          )}
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-5xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className={`text-white p-6 ${
        processingBlocked 
          ? 'bg-gradient-to-r from-red-600 to-orange-600' 
          : 'bg-gradient-to-r from-blue-600 to-purple-600'
      }`}>
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-xl font-bold mb-2">Upload Required Documents</h2>
            <p className="text-white/90 text-sm">
              Application ID: <span className="font-mono">{applicationId}</span>
            </p>
            <p className="text-white/90 text-sm">
              {processingBlocked ? 'Processing is blocked until required documents are uploaded' : 'Ready for processing'}
            </p>
          </div>
          <div className="text-right">
            <div className={`rounded-lg p-3 ${
              processingBlocked ? 'bg-white/20' : 'bg-white/20'
            }`}>
              {processingBlocked ? (
                <AlertTriangle className="w-6 h-6 mx-auto mb-1" />
              ) : (
                <Shield className="w-6 h-6 mx-auto mb-1" />
              )}
              <p className="text-xs">
                {processingBlocked ? 'Processing Blocked' : 'Ready to Process'}
              </p>
            </div>
          </div>
        </div>
      </div>

      <div className="p-6">
        {/* Processing Status Alert */}
        {processingBlocked ? (
          <div className="mb-6 bg-red-50 border border-red-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <AlertTriangle className="w-6 h-6 text-red-500 mt-0.5" />
              <div>
                <h3 className="font-semibold text-red-900 mb-1">Processing Currently Blocked</h3>
                <p className="text-red-800 text-sm mb-2">
                  Your application has been received, but processing cannot continue until all required documents are uploaded and verified.
                </p>
                <div className="text-sm text-red-700">
                  <p><strong>Required documents missing:</strong> {mandatoryTotal - mandatoryUploaded} of {mandatoryTotal}</p>
                  <p><strong>Processing status:</strong> Waiting for required documents</p>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="mb-6 bg-green-50 border border-green-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <CheckCircle2 className="w-6 h-6 text-green-500 mt-0.5" />
              <div>
                <h3 className="font-semibold text-green-900 mb-1">All Required Documents Uploaded!</h3>
                <p className="text-green-800 text-sm mb-2">
                  Your application now has all required documents and can proceed with full processing.
                </p>
                <div className="flex gap-3 text-xs text-green-700">
                  <span>✓ All required documents verified</span>
                  <span>✓ Processing can continue</span>
                  <span>✓ Faster review possible</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Progress Summary */}
        <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-3">Required Documents</h4>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm">Progress</span>
                <span className="font-bold text-red-600">{mandatoryUploaded}/{mandatoryTotal}</span>
              </div>
              <div className="w-full bg-red-200 rounded-full h-2">
                <div 
                  className="bg-red-500 h-2 rounded-full transition-all duration-500"
                  style={{ width: `${(mandatoryUploaded / mandatoryTotal) * 100}%` }}
                />
              </div>
              <p className="text-xs text-gray-600">
                {processingBlocked ? 'Upload required documents to enable processing' : 'All required documents uploaded'}
              </p>
            </div>
          </div>

          <div className="bg-gray-50 rounded-lg p-4">
            <h4 className="font-medium text-gray-800 mb-3">Optional Documents</h4>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-sm">Progress</span>
                <span className="font-bold text-blue-600">{optionalUploaded}/{requirements.optional.length}</span>
              </div>
              <div className="w-full bg-blue-200 rounded-full h-2">
                <div 
                  className="bg-blue-500 h-2 rounded-full transition-all duration-500"
                  style={{ width: requirements.optional.length > 0 ? `${(optionalUploaded / requirements.optional.length) * 100}%` : '0%' }}
                />
              </div>
              <p className="text-xs text-gray-600">
                Optional documents may improve approval chances
              </p>
            </div>
          </div>
        </div>

        {/* Required Documents Section */}
        {requirements.mandatory.length > 0 && (
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-4">
              <AlertTriangle className="w-5 h-5 text-red-500" />
              <h3 className="text-xl font-semibold text-gray-800">Required Documents</h3>
              <span className="badge badge-error">Processing Blocked Without These</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {requirements.mandatory.map(docType => (
                <DocumentUploadCard key={docType} docType={docType} isMandatory={true} />
              ))}
            </div>
          </div>
        )}

        {/* Optional Documents Section */}
        {requirements.optional.length > 0 && (
          <div className="mb-8">
            <div className="flex items-center gap-2 mb-4">
              <FileText className="w-5 h-5 text-blue-500" />
              <h3 className="text-xl font-semibold text-gray-800">Optional Documents</h3>
              <span className="badge badge-warning">May Improve Approval Chances</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {requirements.optional.map(docType => (
                <DocumentUploadCard key={docType} docType={docType} isMandatory={false} />
              ))}
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center mb-6">
          {mandatoryComplete && (
            <button
              onClick={onComplete}
              className="px-8 py-3 bg-green-500 text-white text-lg font-medium rounded-lg hover:bg-green-600 transition-colors"
            >
              <CheckCircle2 className="w-5 h-5 inline mr-2" />
              Continue Processing
            </button>
          )}
          
          <button
            onClick={onSkip}
            className={`px-8 py-3 text-lg font-medium rounded-lg transition-colors ${
              processingBlocked
                ? 'border-2 border-red-300 text-red-700 hover:bg-red-50'
                : 'border-2 border-gray-300 text-gray-700 hover:bg-gray-50'
            }`}
          >
            <ArrowRight className="w-5 h-5 inline mr-2" />
            {processingBlocked ? 'Skip For Now (Processing Blocked)' : 'Continue to Status'}
          </button>
        </div>

        {/* Information Boxes */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Processing Information */}
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <h4 className="font-medium text-red-900 mb-2">🚨 Processing Requirements</h4>
            <ul className="text-sm text-red-800 space-y-1">
              <li>• <strong>Required documents are mandatory</strong> for processing</li>
              <li>• Application will remain on hold until uploaded</li>
              <li>• Processing time starts after all required docs verified</li>
              <li>• Optional documents may improve approval odds</li>
              <li>• You can upload documents anytime using your QR code</li>
            </ul>
          </div>

          {/* Upload Benefits */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 className="font-medium text-blue-900 mb-2">📄 Document Benefits</h4>
            <ul className="text-sm text-blue-800 space-y-1">
              <li>• <strong>Required:</strong> Enables processing to continue</li>
              <li>• <strong>Optional:</strong> May reduce processing time</li>
              <li>• Provides evidence supporting your application</li>
              <li>• Shows preparedness and attention to detail</li>
              <li>• Can be uploaded later if not available now</li>
            </ul>
          </div>
        </div>

        {/* Status summary */}
        <div className="mt-6 bg-gray-50 rounded-lg p-4">
          <h4 className="font-medium text-gray-800 mb-3">Document Upload Status</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
            {allDocTypes.map(docType => {
              const document = getDocumentForType(docType)
              const uploading = isUploading(docType)
              const isMandatory = requirements.mandatory.includes(docType)
              
              return (
                <div key={docType} className="flex items-center justify-between py-2">
                  <span className="text-sm text-gray-700 flex items-center gap-2">
                    {DOCUMENT_NAMES[docType]}
                    <span className={`badge badge-xs ${isMandatory ? 'badge-error' : 'badge-warning'}`}>
                      {isMandatory ? 'REQ' : 'OPT'}
                    </span>
                  </span>
                  <div className="flex items-center gap-2">
                    {uploading ? (
                      <>
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-xs text-blue-600">Processing...</span>
                      </>
                    ) : document?.verified ? (
                      <>
                        <CheckCircle2 className="w-4 h-4 text-green-500" />
                        <span className="text-xs text-green-600">Verified</span>
                      </>
                    ) : document ? (
                      <>
                        <AlertCircle className="w-4 h-4 text-red-500" />
                        <span className="text-xs text-red-600">Failed</span>
                      </>
                    ) : (
                      <>
                        <div className={`w-4 h-4 border-2 rounded-full ${
                          isMandatory ? 'border-red-300' : 'border-gray-300'
                        }`}></div>
                        <span className={`text-xs ${
                          isMandatory ? 'text-red-600' : 'text-gray-500'
                        }`}>
                          {isMandatory ? 'Required' : 'Optional'}
                        </span>
                      </>
                    )}
                  </div>
                </div>
              )
            })}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/DynamicForm.tsx">
'use client'

import { useState, useEffect } from 'react'
import { ChevronLeft, ChevronRight, Save, Send, AlertCircle, CheckCircle2, Eye, EyeOff, Lock, Shield } from 'lucide-react'
import { Question, VisaType } from '@/types'
import { api } from '@/utils/api'

interface DynamicFormProps {
  visaType: VisaType
  onSubmit?: (answers: Record<string, any>, password: string) => void
  onBack?: () => void
}

export default function DynamicForm({ visaType, onSubmit, onBack }: DynamicFormProps) {
  const [questions, setQuestions] = useState<Question[]>([])
  const [answers, setAnswers] = useState<Record<string, any>>({})
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)
  const [errors, setErrors] = useState<Record<string, string>>({})
  const [isLoading, setIsLoading] = useState(true)
  const [isSaving, setIsSaving] = useState(false)
  const [showPasswordStep, setShowPasswordStep] = useState(false)
  const [password, setPassword] = useState('')
  const [confirmPassword, setConfirmPassword] = useState('')
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const [passwordError, setPasswordError] = useState('')

  // Load questions when visa type changes
  useEffect(() => {
    loadQuestions()
  }, [visaType])

  // Auto-save answers
  useEffect(() => {
    if (Object.keys(answers).length > 0) {
      autoSave()
    }
  }, [answers])

  // Generate a secure password suggestion
  useEffect(() => {
    if (showPasswordStep && !password) {
      const generatePassword = () => {
        const adjectives = ['Swift', 'Bright', 'Clear', 'Quick', 'Smart', 'Safe', 'Fast', 'Bold']
        const nouns = ['Lion', 'Eagle', 'Tiger', 'Star', 'Moon', 'Sun', 'Wave', 'Wind']
        const numbers = Math.floor(Math.random() * 999) + 100
        
        const adj = adjectives[Math.floor(Math.random() * adjectives.length)]
        const noun = nouns[Math.floor(Math.random() * nouns.length)]
        
        return `${adj}${noun}${numbers}`
      }
      
      const suggestedPassword = generatePassword()
      setPassword(suggestedPassword)
      setConfirmPassword(suggestedPassword)
    }
  }, [showPasswordStep])

  const loadQuestions = async () => {
    setIsLoading(true)
    try {
      const loadedQuestions = await api.getFormQuestions(visaType, answers)
      setQuestions(loadedQuestions)
    } catch (error) {
      console.error('Error loading questions:', error)
    } finally {
      setIsLoading(false)
    }
  }

  const autoSave = async () => {
    setIsSaving(true)
    // Simulate auto-save
    setTimeout(() => setIsSaving(false), 500)
  }

  const validateAnswer = (question: Question, value: any): string | null => {
    if (question.required && (!value || value.toString().trim() === '')) {
      return 'This field is required'
    }

    if (question.validation) {
      if (question.type === 'number') {
        const numValue = parseFloat(value)
        if (question.validation.min && numValue < question.validation.min) {
          return question.validation.message || `Minimum value is ${question.validation.min}`
        }
        if (question.validation.max && numValue > question.validation.max) {
          return question.validation.message || `Maximum value is ${question.validation.max}`
        }
      }

      if (question.validation.pattern) {
        const regex = new RegExp(question.validation.pattern)
        if (!regex.test(value.toString())) {
          return question.validation.message || 'Invalid format'
        }
      }
    }

    return null
  }

  const validatePassword = (): boolean => {
    setPasswordError('')
    
    if (!password || password.length < 6) {
      setPasswordError('Password must be at least 6 characters long')
      return false
    }
    
    if (password !== confirmPassword) {
      setPasswordError('Passwords do not match')
      return false
    }
    
    return true
  }

  const handleAnswer = (questionId: string, value: any) => {
    const question = questions.find(q => q.id === questionId)
    if (!question) return

    // Validate the answer
    const error = validateAnswer(question, value)
    
    setErrors(prev => ({
      ...prev,
      [questionId]: error || ''
    }))

    setAnswers(prev => ({
      ...prev,
      [questionId]: value
    }))
  }

  const currentQuestion = questions[currentQuestionIndex]
  const progress = questions.length > 0 ? ((currentQuestionIndex + 1) / questions.length) * 100 : 0
  const canProceed = currentQuestion && answers[currentQuestion.id] && !errors[currentQuestion.id]
  const isLastQuestion = currentQuestionIndex === questions.length - 1

  const goToNext = () => {
    if (canProceed && !isLastQuestion) {
      setCurrentQuestionIndex(prev => prev + 1)
    } else if (canProceed && isLastQuestion) {
      // Go to password step
      setShowPasswordStep(true)
    }
  }

  const goToPrevious = () => {
    if (showPasswordStep) {
      setShowPasswordStep(false)
    } else if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex(prev => prev - 1)
    }
  }

  const handleSubmit = () => {
    if (!validatePassword()) {
      return
    }
    
    if (onSubmit) {
      onSubmit(answers, password)
    }
  }

  const getVisaTypeTitle = (type: VisaType): string => {
    const titles = {
      tourist: 'Tourist Visa Application',
      business: 'Business Visa Application',
      student: 'Student Visa Application',
      work: 'Work Visa Application',
      family_visit: 'Family Visit Visa Application',
      transit: 'Transit Visa Application'
    }
    return titles[type] || 'Visa Application'
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your personalized form...</p>
        </div>
      </div>
    )
  }

  if (!currentQuestion && !showPasswordStep) {
    return (
      <div className="text-center p-8">
        <AlertCircle className="w-12 h-12 text-yellow-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-800 mb-2">No questions available</h3>
        <p className="text-gray-600">Please try again or contact support.</p>
      </div>
    )
  }

  if (showPasswordStep) {
    return (
      <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
        {/* Header */}
        <div className="bg-gradient-to-r from-green-600 to-blue-600 text-white p-6">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-xl font-bold">Secure Your Application</h2>
              <p className="text-green-100 text-sm mt-1">
                Set a password to access your application later
              </p>
            </div>
            <div className="flex items-center gap-2 text-sm">
              <Shield className="w-5 h-5" />
              <span>Secure</span>
            </div>
          </div>

          {/* Progress bar */}
          <div className="mt-4">
            <div className="flex justify-between text-sm text-green-100 mb-2">
              <span>Ready to Submit</span>
              <span>100% complete</span>
            </div>
            <div className="w-full bg-green-500 bg-opacity-30 rounded-full h-2">
              <div className="bg-white h-2 rounded-full w-full" />
            </div>
          </div>
        </div>

        {/* Password Form */}
        <div className="p-6">
          <div className="space-y-6">
            <div className="text-center mb-6">
              <Lock className="w-12 h-12 text-blue-500 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-800 mb-2">
                Create Your Access Password
              </h3>
              <p className="text-gray-600 text-sm">
                You'll use this password to check your application status and upload documents later
              </p>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Password
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? 'text' : 'password'}
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 pr-12 font-mono"
                    placeholder="Enter a secure password..."
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Confirm Password
                </label>
                <div className="relative">
                  <input
                    type={showConfirmPassword ? 'text' : 'password'}
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 pr-12 font-mono"
                    placeholder="Confirm your password..."
                  />
                  <button
                    type="button"
                    onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                    className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                  >
                    {showConfirmPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                  </button>
                </div>
              </div>

              {passwordError && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <p className="text-red-600 text-sm flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {passwordError}
                  </p>
                </div>
              )}

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-900 text-sm mb-2">💡 Password Tips</h4>
                <ul className="text-blue-800 text-sm space-y-1">
                  <li>• We've suggested a secure password for you</li>
                  <li>• You can change it to something memorable</li>
                  <li>• Minimum 6 characters required</li>
                  <li>• You'll need this to access your application later</li>
                </ul>
              </div>
            </div>

            {/* Navigation */}
            <div className="flex justify-between items-center pt-6 border-t">
              <button
                onClick={goToPrevious}
                className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
              >
                <ChevronLeft className="w-4 h-4" />
                Back to Questions
              </button>

              <button
                onClick={handleSubmit}
                disabled={!password || !confirmPassword}
                className="flex items-center gap-2 px-8 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-4 h-4" />
                Submit Application
              </button>
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-6">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-xl font-bold">{getVisaTypeTitle(visaType)}</h2>
            <p className="text-blue-100 text-sm mt-1">
              Question {currentQuestionIndex + 1} of {questions.length}
            </p>
          </div>
          <div className="flex items-center gap-2 text-sm">
            {isSaving && (
              <>
                <Save className="w-4 h-4 animate-pulse" />
                <span>Saving...</span>
              </>
            )}
          </div>
        </div>

        {/* Progress bar */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-blue-100 mb-2">
            <span>Progress</span>
            <span>{Math.round(progress)}% complete</span>
          </div>
          <div className="w-full bg-blue-500 bg-opacity-30 rounded-full h-2">
            <div 
              className="bg-white h-2 rounded-full transition-all duration-500 ease-out"
              style={{ width: `${progress}%` }}
            />
          </div>
        </div>
      </div>

      {/* Question content */}
      <div className="p-6">
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-800 mb-4">
            {currentQuestion.text}
          </h3>

          {/* Answer input based on question type */}
          <div className="space-y-4">
            {currentQuestion.type === 'text' && (
              <div>
                <input
                  type="text"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Enter your answer..."
                />
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}

            {currentQuestion.type === 'select' && (
              <div className="grid gap-3">
                {currentQuestion.options?.map(option => (
                  <button
                    key={option}
                    onClick={() => handleAnswer(currentQuestion.id, option)}
                    className={`p-4 text-left border rounded-lg transition-all ${
                      answers[currentQuestion.id] === option
                        ? 'border-blue-500 bg-blue-50 text-blue-700'
                        : 'border-gray-300 hover:border-blue-300 hover:bg-blue-50'
                    }`}
                  >
                    <div className="flex items-center justify-between">
                      <span>{option}</span>
                      {answers[currentQuestion.id] === option && (
                        <CheckCircle2 className="w-5 h-5 text-blue-500" />
                      )}
                    </div>
                  </button>
                ))}
              </div>
            )}

            {currentQuestion.type === 'number' && (
              <div>
                <input
                  type="number"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  min={currentQuestion.validation?.min}
                  max={currentQuestion.validation?.max}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="Enter number..."
                />
                {currentQuestion.validation && (
                  <p className="text-gray-500 text-sm mt-2">
                    {currentQuestion.validation.min && currentQuestion.validation.max
                      ? `Enter a number between ${currentQuestion.validation.min} and ${currentQuestion.validation.max}`
                      : currentQuestion.validation.min
                      ? `Minimum: ${currentQuestion.validation.min}`
                      : currentQuestion.validation.max
                      ? `Maximum: ${currentQuestion.validation.max}`
                      : ''
                    }
                  </p>
                )}
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}

            {currentQuestion.type === 'date' && (
              <div>
                <input
                  type="date"
                  value={answers[currentQuestion.id] || ''}
                  onChange={(e) => handleAnswer(currentQuestion.id, e.target.value)}
                  className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                    errors[currentQuestion.id] ? 'border-red-500' : 'border-gray-300'
                  }`}
                />
                {errors[currentQuestion.id] && (
                  <p className="text-red-500 text-sm mt-2 flex items-center gap-2">
                    <AlertCircle className="w-4 h-4" />
                    {errors[currentQuestion.id]}
                  </p>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Navigation */}
        <div className="flex justify-between items-center pt-6 border-t">
          <button
            onClick={onBack || goToPrevious}
            className="flex items-center gap-2 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
            disabled={currentQuestionIndex === 0 && !onBack}
          >
            <ChevronLeft className="w-4 h-4" />
            {currentQuestionIndex === 0 && onBack ? 'Back to Chat' : 'Previous'}
          </button>

          <button
            onClick={goToNext}
            disabled={!canProceed}
            className="flex items-center gap-2 px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isLastQuestion ? 'Continue to Security' : 'Next'}
            <ChevronRight className="w-4 h-4" />
          </button>
        </div>
      </div>

      {/* Form summary sidebar (for larger screens) */}
      <div className="hidden lg:block fixed right-4 top-24 w-64 bg-white rounded-lg shadow-lg p-4 max-h-96 overflow-y-auto">
        <h4 className="font-semibold text-gray-800 mb-3">Your Answers</h4>
        <div className="space-y-2">
          {questions.slice(0, currentQuestionIndex + 1).map((q, index) => (
            <div key={q.id} className="text-sm">
              <p className="text-gray-600 font-medium">{q.text}</p>
              <p className="text-gray-800">{answers[q.id] || 'Not answered'}</p>
              {index < currentQuestionIndex && (
                <div className="w-full h-px bg-gray-200 my-2" />
              )}
            </div>
          ))}
        </div>
        
        {/* Next Step Preview */}
        <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-lg">
          <h5 className="font-semibold text-green-900 text-sm mb-1">Next Step</h5>
          <p className="text-green-800 text-xs">
            Set your access password and submit your application for immediate processing!
          </p>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/index.tsx">
import React from 'react'

// Button Component
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'outline' | 'success' | 'warning' | 'error'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  loading?: boolean
  children: React.ReactNode
}

export const Button: React.FC<ButtonProps> = ({ 
  variant = 'primary',
  size = 'md',
  loading = false,
  children,
  className = '',
  disabled,
  ...props
}) => {
  const baseClasses = 'btn'
  const variantClasses = {
    primary: 'btn-primary',
    secondary: 'btn-secondary',
    accent: 'btn-accent',
    ghost: 'btn-ghost',
    outline: 'btn-outline',
    success: 'btn-success',
    warning: 'btn-warning',
    error: 'btn-error'
  }
  
  const sizeClasses = {
    xs: 'btn-xs',
    sm: 'btn-sm',
    md: '',
    lg: 'btn-lg'
  }

  const buttonClasses = [
    baseClasses,
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <button 
      className={buttonClasses}
      disabled={disabled || loading}
      {...props}
    >
      {loading && <span className="loading loading-spinner loading-sm mr-2"></span>}
      {children}
    </button>
  )
}

// Card Component
interface CardProps {
  children: React.ReactNode
  className?: string
  title?: string
  compact?: boolean
  bordered?: boolean
}

export const Card: React.FC<CardProps> = ({ 
  children, 
  className = '', 
  title, 
  compact = false,
  bordered = false 
}) => {
  const cardClasses = [
    'card',
    'bg-base-100',
    'shadow-lg',
    bordered ? 'card-bordered' : '',
    compact ? 'card-compact' : '',
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={cardClasses}>
      <div className="card-body">
        {title && <h3 className="card-title">{title}</h3>}
        {children}
      </div>
    </div>
  )
}

// Loading Spinner Component
interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg'
  className?: string
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className = '' }) => {
  const sizeClasses = {
    sm: 'loading-sm',
    md: 'loading-md', 
    lg: 'loading-lg'
  }

  return (
    <div className={`flex justify-center items-center ${className}`}>
      <span className={`loading loading-spinner ${sizeClasses[size]}`}></span>
    </div>
  )
}

// Loading Overlay Component
interface LoadingOverlayProps {
  isLoading: boolean
  message?: string
  children: React.ReactNode
}

export const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ 
  isLoading, 
  message = 'Loading...', 
  children 
}) => {
  return (
    <div className="relative">
      {children}
      {isLoading && (
        <div className="loading-overlay">
          <LoadingSpinner size="lg" />
          <p className="mt-4 text-lg">{message}</p>
        </div>
      )}
    </div>
  )
}

// Stats Components
interface StatProps {
  title: string
  value: string | number
  description?: string
  className?: string
}

export const Stat: React.FC<StatProps> = ({ title, value, description, className = '' }) => {
  return (
    <div className={`stat ${className}`}>
      <div className="stat-title">{title}</div>
      <div className="stat-value">{value}</div>
      {description && <div className="stat-desc">{description}</div>}
    </div>
  )
}

interface StatsProps {
  children: React.ReactNode
  className?: string
  vertical?: boolean
}

export const Stats: React.FC<StatsProps> = ({ children, className = '', vertical = false }) => {
  const statsClass = vertical 
    ? 'stats stats-vertical shadow bg-base-200' 
    : 'stats stats-vertical lg:stats-horizontal shadow bg-base-200'

  return (
    <div className={`${statsClass} ${className}`}>
      {children}
    </div>
  )
}

// Badge Component
interface BadgeProps {
  children: React.ReactNode
  variant?: 'primary' | 'secondary' | 'accent' | 'ghost' | 'success' | 'warning' | 'error' | 'info'
  size?: 'xs' | 'sm' | 'md' | 'lg'
  className?: string
}

export const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'primary', 
  size = 'md',
  className = ''
}) => {
  const variantClasses = {
    primary: 'badge-primary',
    secondary: 'badge-secondary',
    accent: 'badge-accent',
    ghost: 'badge-ghost',
    success: 'badge-success',
    warning: 'badge-warning',
    error: 'badge-error',
    info: 'badge-info'
  }
  
  const sizeClasses = {
    xs: 'badge-xs',
    sm: 'badge-sm',
    md: '',
    lg: 'badge-lg'
  }

  const badgeClasses = [
    'badge',
    variantClasses[variant],
    sizeClasses[size],
    className
  ].filter(Boolean).join(' ')

  return (
    <div className={badgeClasses}>
      {children}
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/LoadingStates.tsx">
'use client'

import { Loader2, Bot, FileText, Upload, CheckCircle2 } from 'lucide-react'

// Generic loading spinner
export function LoadingSpinner({ size = 'md', className = '' }: { 
  size?: 'sm' | 'md' | 'lg', 
  className?: string 
}) {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  }

  return (
    <Loader2 
      className={`animate-spin ${sizeClasses[size]} ${className}`} 
    />
  )
}

// Loading skeleton for text
export function TextSkeleton({ lines = 3, className = '' }: { 
  lines?: number, 
  className?: string 
}) {
  return (
    <div className={`space-y-2 ${className}`}>
      {Array.from({ length: lines }).map((_, i) => (
        <div
          key={i}
          className={`h-4 bg-gray-200 rounded animate-pulse ${
            i === lines - 1 ? 'w-3/4' : 'w-full'
          }`}
        />
      ))}
    </div>
  )
}

// Loading card skeleton
export function CardSkeleton({ className = '' }: { className?: string }) {
  return (
    <div className={`bg-white rounded-lg shadow p-6 ${className}`}>
      <div className="space-y-4">
        <div className="h-6 bg-gray-200 rounded w-1/3 animate-pulse" />
        <div className="space-y-2">
          <div className="h-4 bg-gray-200 rounded animate-pulse" />
          <div className="h-4 bg-gray-200 rounded w-5/6 animate-pulse" />
        </div>
        <div className="flex space-x-2">
          <div className="h-8 bg-gray-200 rounded w-20 animate-pulse" />
          <div className="h-8 bg-gray-200 rounded w-16 animate-pulse" />
        </div>
      </div>
    </div>
  )
}

// Chat loading animation
export function ChatLoading() {
  return (
    <div className="flex gap-3 justify-start">
      <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
        <Bot className="w-5 h-5 text-white" />
      </div>
      <div className="bg-white px-4 py-3 rounded-2xl rounded-bl-sm shadow-sm border">
        <div className="flex gap-1">
          <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
          <div 
            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" 
            style={{ animationDelay: '0.1s' }} 
          />
          <div 
            className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" 
            style={{ animationDelay: '0.2s' }} 
          />
        </div>
      </div>
    </div>
  )
}

// Form loading overlay
export function FormLoading({ message = 'Loading...' }: { message?: string }) {
  return (
    <div className="absolute inset-0 bg-white bg-opacity-75 flex items-center justify-center z-10 rounded-lg">
      <div className="text-center">
        <LoadingSpinner size="lg" className="text-blue-500 mx-auto mb-4" />
        <p className="text-gray-600 font-medium">{message}</p>
      </div>
    </div>
  )
}

// Document upload loading
export function DocumentLoading({ fileName }: { fileName: string }) {
  return (
    <div className="space-y-3">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto" />
      <div className="text-center">
        <p className="text-blue-600 font-medium">Uploading & Verifying...</p>
        <p className="text-sm text-gray-600">{fileName}</p>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2">
        <div className="bg-blue-500 h-2 rounded-full animate-pulse w-3/4" />
      </div>
    </div>
  )
}

// Progress loading with steps
export function StepLoading({ 
  steps, 
  currentStep 
}: { 
  steps: string[], 
  currentStep: number 
}) {
  return (
    <div className="space-y-4">
      <div className="text-center">
        <LoadingSpinner size="lg" className="text-blue-500 mx-auto mb-4" />
        <p className="text-lg font-medium text-gray-800">Processing...</p>
      </div>
      
      <div className="space-y-2">
        {steps.map((step, index) => (
          <div
            key={index}
            className={`flex items-center gap-3 p-2 rounded ${
              index < currentStep
                ? 'text-green-600'
                : index === currentStep
                ? 'text-blue-600 bg-blue-50'
                : 'text-gray-400'
            }`}
          >
            {index < currentStep ? (
              <CheckCircle2 className="w-5 h-5" />
            ) : index === currentStep ? (
              <LoadingSpinner size="sm" />
            ) : (
              <div className="w-5 h-5 border-2 border-gray-300 rounded-full" />
            )}
            <span className="text-sm">{step}</span>
          </div>
        ))}
      </div>
    </div>
  )
}

// Page loading screen
export function PageLoading({ message = 'Loading...' }: { message?: string }) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-purple-50 to-pink-50 flex items-center justify-center">
      <div className="text-center">
        <div className="relative">
          <div className="w-20 h-20 border-4 border-blue-200 rounded-full animate-spin" />
          <div className="absolute inset-0 w-20 h-20 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" />
        </div>
        <h2 className="text-2xl font-bold text-gray-800 mt-6 mb-2">VisaVerge</h2>
        <p className="text-gray-600">{message}</p>
      </div>
    </div>
  )
}

// Application submission loading
export function SubmissionLoading() {
  const steps = [
    'Validating your information',
    'Uploading documents',
    'Running security checks',
    'Generating application ID',
    'Submitting to embassy'
  ]

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4">
        <div className="text-center mb-6">
          <div className="w-16 h-16 border-4 border-blue-200 rounded-full animate-spin mx-auto mb-4">
            <div className="w-16 h-16 border-4 border-transparent border-t-blue-500 rounded-full animate-spin" />
          </div>
          <h3 className="text-xl font-bold text-gray-800">Submitting Application</h3>
          <p className="text-gray-600 text-sm mt-2">This may take a few moments...</p>
        </div>

        <div className="space-y-3">
          {steps.map((step, index) => (
            <div key={index} className="flex items-center gap-3">
              <div className="w-6 h-6 flex items-center justify-center">
                {index < 2 ? (
                  <CheckCircle2 className="w-5 h-5 text-green-500" />
                ) : index === 2 ? (
                  <LoadingSpinner size="sm" className="text-blue-500" />
                ) : (
                  <div className="w-3 h-3 border-2 border-gray-300 rounded-full" />
                )}
              </div>
              <span className={`text-sm ${
                index < 2 ? 'text-green-600' : 
                index === 2 ? 'text-blue-600' : 
                'text-gray-400'
              }`}>
                {step}
              </span>
            </div>
          ))}
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/Notification.tsx">
'use client'

import { useState, useEffect, createContext, useContext, ReactNode } from 'react'
import { CheckCircle2, AlertCircle, Info, X, AlertTriangle } from 'lucide-react'

type NotificationType = 'success' | 'error' | 'warning' | 'info'

interface Notification {
  id: string
  type: NotificationType
  title: string
  message?: string
  duration?: number
  action?: {
    label: string
    onClick: () => void
  }
}

interface NotificationContextType {
  notifications: Notification[]
  addNotification: (notification: Omit<Notification, 'id'>) => void
  removeNotification: (id: string) => void
  clearAll: () => void
}

const NotificationContext = createContext<NotificationContextType | undefined>(undefined)

export function NotificationProvider({ children }: { children: ReactNode }) {
  const [notifications, setNotifications] = useState<Notification[]>([])

  const addNotification = (notification: Omit<Notification, 'id'>) => {
    const id = Math.random().toString(36).substr(2, 9)
    const newNotification = { ...notification, id }
    
    setNotifications(prev => [...prev, newNotification])

    // Auto remove after duration (default 5 seconds)
    const duration = notification.duration ?? 5000
    if (duration > 0) {
      setTimeout(() => {
        removeNotification(id)
      }, duration)
    }
  }

  const removeNotification = (id: string) => {
    setNotifications(prev => prev.filter(n => n.id !== id))
  }

  const clearAll = () => {
    setNotifications([])
  }

  return (
    <NotificationContext.Provider value={{
      notifications,
      addNotification,
      removeNotification,
      clearAll
    }}>
      {children}
      <NotificationContainer />
    </NotificationContext.Provider>
  )
}

export function useNotifications() {
  const context = useContext(NotificationContext)
  if (!context) {
    throw new Error('useNotifications must be used within NotificationProvider')
  }
  return context
}

function NotificationContainer() {
  const { notifications } = useNotifications()

  return (
    <div className="fixed top-4 right-4 z-50 space-y-3 max-w-sm">
      {notifications.map(notification => (
        <NotificationItem key={notification.id} notification={notification} />
      ))}
    </div>
  )
}

function NotificationItem({ notification }: { notification: Notification }) {
  const { removeNotification } = useNotifications()
  const [isVisible, setIsVisible] = useState(false)

  useEffect(() => {
    // Trigger entrance animation
    setTimeout(() => setIsVisible(true), 50)
  }, [])

  const handleClose = () => {
    setIsVisible(false)
    setTimeout(() => removeNotification(notification.id), 300)
  }

  const getIcon = () => {
    switch (notification.type) {
      case 'success':
        return <CheckCircle2 className="w-5 h-5 text-green-500" />
      case 'error':
        return <AlertCircle className="w-5 h-5 text-red-500" />
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />
      case 'info':
        return <Info className="w-5 h-5 text-blue-500" />
    }
  }

  const getBorderColor = () => {
    switch (notification.type) {
      case 'success':
        return 'border-l-green-500'
      case 'error':
        return 'border-l-red-500'
      case 'warning':
        return 'border-l-yellow-500'
      case 'info':
        return 'border-l-blue-500'
    }
  }

  return (
    <div
      className={`
        transform transition-all duration-300 ease-in-out
        ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}
        bg-white border-l-4 ${getBorderColor()} shadow-lg rounded-lg p-4 min-w-80
      `}
    >
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 pt-0.5">
          {getIcon()}
        </div>
        
        <div className="flex-1 min-w-0">
          <h4 className="text-sm font-semibold text-gray-900">
            {notification.title}
          </h4>
          {notification.message && (
            <p className="text-sm text-gray-600 mt-1">
              {notification.message}
            </p>
          )}
          {notification.action && (
            <button
              onClick={notification.action.onClick}
              className="text-sm text-blue-600 hover:text-blue-800 font-medium mt-2 underline"
            >
              {notification.action.label}
            </button>
          )}
        </div>

        <button
          onClick={handleClose}
          className="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X className="w-4 h-4" />
        </button>
      </div>
    </div>
  )
}

// Convenience hooks for different notification types
export function useSuccessNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'success', title, message })
  }
}

export function useErrorNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'error', title, message })
  }
}

export function useWarningNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'warning', title, message })
  }
}

export function useInfoNotification() {
  const { addNotification } = useNotifications()
  
  return (title: string, message?: string) => {
    addNotification({ type: 'info', title, message })
  }
}

// Alert component for inline notifications
export function Alert({ 
  type, 
  title, 
  message, 
  onClose,
  className = ''
}: {
  type: NotificationType
  title: string
  message?: string
  onClose?: () => void
  className?: string
}) {
  const getIcon = () => {
    switch (type) {
      case 'success':
        return <CheckCircle2 className="w-5 h-5 text-green-500" />
      case 'error':
        return <AlertCircle className="w-5 h-5 text-red-500" />
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-500" />
      case 'info':
        return <Info className="w-5 h-5 text-blue-500" />
    }
  }

  const getBgColor = () => {
    switch (type) {
      case 'success':
        return 'bg-green-50 border-green-200'
      case 'error':
        return 'bg-red-50 border-red-200'
      case 'warning':
        return 'bg-yellow-50 border-yellow-200'
      case 'info':
        return 'bg-blue-50 border-blue-200'
    }
  }

  return (
    <div className={`border rounded-lg p-4 ${getBgColor()} ${className}`}>
      <div className="flex items-start gap-3">
        <div className="flex-shrink-0 pt-0.5">
          {getIcon()}
        </div>
        
        <div className="flex-1 min-w-0">
          <h4 className="text-sm font-semibold text-gray-900">
            {title}
          </h4>
          {message && (
            <p className="text-sm text-gray-600 mt-1">
              {message}
            </p>
          )}
        </div>

        {onClose && (
          <button
            onClick={onClose}
            className="flex-shrink-0 text-gray-400 hover:text-gray-600 transition-colors"
          >
            <X className="w-4 h-4" />
          </button>
        )}
      </div>
    </div>
  )
}

// Banner component for important site-wide notifications
export function Banner({ 
  type, 
  message, 
  action,
  onClose 
}: {
  type: NotificationType
  message: string
  action?: {
    label: string
    onClick: () => void
  }
  onClose?: () => void
}) {
  const getBgColor = () => {
    switch (type) {
      case 'success':
        return 'bg-green-600'
      case 'error':
        return 'bg-red-600'
      case 'warning':
        return 'bg-yellow-600'
      case 'info':
        return 'bg-blue-600'
    }
  }

  return (
    <div className={`${getBgColor()} text-white`}>
      <div className="max-w-7xl mx-auto py-3 px-4">
        <div className="flex items-center justify-between flex-wrap">
          <div className="flex items-center gap-3">
            <div className="flex-shrink-0">
              {type === 'success' && <CheckCircle2 className="w-5 h-5" />}
              {type === 'error' && <AlertCircle className="w-5 h-5" />}
              {type === 'warning' && <AlertTriangle className="w-5 h-5" />}
              {type === 'info' && <Info className="w-5 h-5" />}
            </div>
            <p className="text-sm font-medium">{message}</p>
          </div>
          
          <div className="flex items-center gap-3">
            {action && (
              <button
                onClick={action.onClick}
                className="text-sm underline hover:no-underline font-medium"
              >
                {action.label}
              </button>
            )}
            {onClose && (
              <button
                onClick={onClose}
                className="text-white hover:text-gray-200 transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/StatusTracker.tsx">
'use client'

import { useState, useEffect } from 'react'
import { CheckCircle2, Clock, AlertCircle, FileText, Shield, Eye, Award, AlertTriangle, Upload, X } from 'lucide-react'
import { VisaApplication, ApplicationStatus } from '@/types'
import { api } from '@/utils/api'

interface StatusTrackerProps {
  applicationId: string
  onNewApplication?: () => void
  onNavigateToDocuments?: () => void
}

interface StatusStep {
  status: ApplicationStatus | 'document_collection'
  title: string
  description: string
  icon: React.ReactNode
  estimatedDays?: number
  completed: boolean
  current: boolean
  blocked?: boolean
  timestamp?: Date
}

export default function StatusTracker({ applicationId, onNewApplication, onNavigateToDocuments }: StatusTrackerProps) {
  const [application, setApplication] = useState<VisaApplication | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [lastUpdate, setLastUpdate] = useState<Date>(new Date())
  const [documentsRequired, setDocumentsRequired] = useState(true) // Mock - in real app, calculate from requirements
  const [documentsUploaded, setDocumentsUploaded] = useState(0)
  const [documentsTotal, setDocumentsTotal] = useState(3)

  useEffect(() => {
    loadApplicationStatus()
    
    // Poll for updates every 30 seconds for demo
    const interval = setInterval(loadApplicationStatus, 30000)
    return () => clearInterval(interval)
  }, [applicationId])

  const loadApplicationStatus = async () => {
    try {
      const data = await api.getApplicationStatus(applicationId)
      setApplication(data)
      setLastUpdate(new Date())
      
      // Mock document status calculation
      // In real app, this would come from backend
      setDocumentsUploaded(Math.random() > 0.7 ? 3 : Math.floor(Math.random() * 3))
      setDocumentsRequired(documentsUploaded < documentsTotal)
    } catch (error) {
      console.error('Error loading application status:', error)
    } finally {
      setIsLoading(false)
    }
  }

  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading application status...</p>
        </div>
      </div>
    )
  }

  if (!application) {
    return (
      <div className="text-center p-8">
        <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
        <h3 className="text-lg font-semibold text-gray-800 mb-2">Application not found</h3>
        <p className="text-gray-600 mb-4">Unable to load application status.</p>
        <button
          onClick={onNewApplication}
          className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
        >
          Start New Application
        </button>
      </div>
    )
  }

  // Check if processing is blocked by documents
  const isDocumentBlocked = documentsRequired && application.status === 'submitted'

  // Define status steps with document collection
  const statusSteps: StatusStep[] = [
    {
      status: 'submitted',
      title: 'Application Submitted',
      description: 'Your application has been received and assigned a unique ID',
      icon: <FileText className="w-6 h-6" />,
      completed: ['submitted', 'document_review', 'background_check', 'officer_review', 'approved', 'rejected'].includes(application.status),
      current: application.status === 'submitted' && !isDocumentBlocked
    },
    {
      status: 'document_collection',
      title: 'Document Collection',
      description: isDocumentBlocked 
        ? `Required documents must be uploaded before processing can continue (${documentsUploaded}/${documentsTotal} uploaded)`
        : 'All required documents have been collected and verified',
      icon: <Upload className="w-6 h-6" />,
      completed: !documentsRequired,
      current: isDocumentBlocked,
      blocked: documentsRequired,
      estimatedDays: documentsRequired ? undefined : 0
    },
    {
      status: 'document_review',
      title: 'Document Review',
      description: 'Our team is verifying your documents and checking for completeness',
      icon: <Eye className="w-6 h-6" />,
      estimatedDays: 2,
      completed: ['document_review', 'background_check', 'officer_review', 'approved', 'rejected'].includes(application.status) && !documentsRequired,
      current: application.status === 'document_review' && !documentsRequired
    },
    {
      status: 'background_check',
      title: 'Background Verification',
      description: 'Security and background checks are being conducted',
      icon: <Shield className="w-6 h-6" />,
      estimatedDays: 5,
      completed: ['background_check', 'officer_review', 'approved', 'rejected'].includes(application.status) && !documentsRequired,
      current: application.status === 'background_check' && !documentsRequired
    },
    {
      status: 'officer_review',
      title: 'Officer Review',
      description: 'A consular officer is reviewing your application for final decision',
      icon: <Eye className="w-6 h-6" />,
      estimatedDays: 3,
      completed: ['officer_review', 'approved', 'rejected'].includes(application.status) && !documentsRequired,
      current: application.status === 'officer_review' && !documentsRequired
    },
    {
      status: 'approved',
      title: 'Decision Made',
      description: application.status === 'approved' ? 'Congratulations! Your visa has been approved' : 'A decision has been made on your application',
      icon: application.status === 'approved' ? <Award className="w-6 h-6" /> : <AlertCircle className="w-6 h-6" />,
      completed: ['approved', 'rejected'].includes(application.status),
      current: ['approved', 'rejected'].includes(application.status)
    }
  ]

  const currentStep = statusSteps.find(step => step.current)
  const completedSteps = statusSteps.filter(step => step.completed).length
  const progress = (completedSteps / statusSteps.length) * 100

  const getStatusColor = (status: ApplicationStatus) => {
    if (documentsRequired && status === 'submitted') return 'text-orange-600'
    
    switch (status) {
      case 'approved': return 'text-green-600'
      case 'rejected': return 'text-red-600'
      case 'requires_interview': return 'text-yellow-600'
      default: return 'text-blue-600'
    }
  }

  const getStatusBg = (status: ApplicationStatus) => {
    if (documentsRequired && status === 'submitted') return 'bg-orange-50 border-orange-200'
    
    switch (status) {
      case 'approved': return 'bg-green-50 border-green-200'
      case 'rejected': return 'bg-red-50 border-red-200'
      case 'requires_interview': return 'bg-yellow-50 border-yellow-200'
      default: return 'bg-blue-50 border-blue-200'
    }
  }

  const getDisplayStatus = () => {
    if (documentsRequired && application.status === 'submitted') {
      return 'Document Collection Required'
    }
    return application.status.replace('_', ' ')
  }

  return (
    <div className="max-w-4xl mx-auto bg-white rounded-lg shadow-lg overflow-hidden">
      {/* Header */}
      <div className={`p-6 border-b ${getStatusBg(application.status)}`}>
        <div className="flex justify-between items-start">
          <div>
            <h2 className="text-2xl font-bold text-gray-800 mb-2">Application Status</h2>
            <p className="text-gray-600">Application ID: <span className="font-mono">{application.id}</span></p>
            <p className="text-gray-600">Visa Type: <span className="capitalize font-medium">{application.visaType}</span></p>
          </div>
          <div className="text-right">
            <p className={`text-lg font-semibold capitalize ${getStatusColor(application.status)}`}>
              {getDisplayStatus()}
            </p>
            <p className="text-sm text-gray-500">
              Last updated: {lastUpdate.toLocaleString()}
            </p>
          </div>
        </div>
      </div>

      {/* Document Collection Alert */}
      {documentsRequired && (
        <div className="bg-red-50 border-b-4 border-red-200 p-6">
          <div className="flex items-start gap-4">
            <AlertTriangle className="w-8 h-8 text-red-500 mt-1 flex-shrink-0" />
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-red-900 mb-2">
                Processing Blocked - Documents Required
              </h3>
              <p className="text-red-800 mb-3">
                Your application is currently on hold because <strong>required documents have not been uploaded</strong>. 
                Processing cannot continue until all mandatory documents are provided and verified.
              </p>
              <div className="bg-red-100 rounded-lg p-3 mb-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-semibold text-red-900 mb-1">Document Status:</h4>
                    <p className="text-red-800">Required: {documentsUploaded}/{documentsTotal} uploaded</p>
                    <p className="text-red-800">Status: {documentsUploaded === documentsTotal ? 'Complete' : 'Incomplete'}</p>
                  </div>
                  <div>
                    <h4 className="font-semibold text-red-900 mb-1">Processing Status:</h4>
                    <p className="text-red-800">Current: Document Collection</p>
                    <p className="text-red-800">Next: {documentsUploaded === documentsTotal ? 'Document Review' : 'Upload Required Documents'}</p>
                  </div>
                </div>
              </div>
              <div className="flex flex-col sm:flex-row gap-3">
                <button
                  onClick={onNavigateToDocuments}
                  className="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium"
                >
                  <Upload className="w-4 h-4 inline mr-2" />
                  Upload Documents Now
                </button>
                <button
                  onClick={() => navigator.clipboard.writeText(window.location.href)}
                  className="px-6 py-2 border border-red-300 text-red-700 rounded-lg hover:bg-red-50 transition-colors"
                >
                  Share Status Link
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Progress Overview */}
      <div className="p-6 bg-gray-50 border-b">
        <div className="flex justify-between items-center mb-4">
          <h3 className="font-semibold text-gray-800">Processing Progress</h3>
          <span className="text-2xl font-bold text-blue-600">{Math.round(progress)}%</span>
        </div>
        
        <div className="w-full bg-gray-200 rounded-full h-3 mb-4">
          <div 
            className={`h-3 rounded-full transition-all duration-1000 ${
              documentsRequired ? 'bg-orange-500' :
              application.status === 'approved' ? 'bg-green-500' :
              application.status === 'rejected' ? 'bg-red-500' : 'bg-blue-500'
            }`}
            style={{ width: `${progress}%` }}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
          <div className="bg-white rounded-lg p-4">
            <p className="text-2xl font-bold text-blue-600">{completedSteps}</p>
            <p className="text-sm text-gray-600">Steps Completed</p>
          </div>
          {!documentsRequired && application.estimatedDecision && (
            <div className="bg-white rounded-lg p-4">
              <p className="text-2xl font-bold text-green-600">
                {Math.ceil((application.estimatedDecision.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24))}
              </p>
              <p className="text-sm text-gray-600">Days Remaining</p>
            </div>
          )}
          {application.approvalProbability && (
            <div className="bg-white rounded-lg p-4">
              <p className="text-2xl font-bold text-green-600">{application.approvalProbability}%</p>
              <p className="text-sm text-gray-600">Approval Probability</p>
            </div>
          )}
          {documentsRequired && (
            <div className="bg-white rounded-lg p-4">
              <p className="text-2xl font-bold text-red-600">{documentsTotal - documentsUploaded}</p>
              <p className="text-sm text-gray-600">Documents Missing</p>
            </div>
          )}
        </div>

        {documentsRequired && (
          <div className="mt-4 p-3 bg-orange-100 border border-orange-200 rounded-lg">
            <p className="text-orange-800 text-sm text-center">
              <strong>⚠ Processing Timeline:</strong> The official processing timeline will begin after all required documents are uploaded and verified.
            </p>
          </div>
        )}
      </div>

      {/* Status Timeline */}
      <div className="p-6">
        <h3 className="font-semibold text-gray-800 mb-6">Application Timeline</h3>
        
        <div className="space-y-6">
          {statusSteps.map((step, index) => (
            <div key={step.status} className="flex gap-4">
              {/* Icon */}
              <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${
                step.blocked
                  ? 'bg-red-500 text-white'
                  : step.completed 
                  ? application.status === 'approved' && step.status === 'approved'
                    ? 'bg-green-500 text-white'
                    : application.status === 'rejected' && step.status === 'approved'
                    ? 'bg-red-500 text-white'
                    : 'bg-blue-500 text-white'
                  : step.current
                  ? step.blocked
                    ? 'bg-red-100 text-red-600 border-2 border-red-500'
                    : 'bg-blue-100 text-blue-600 border-2 border-blue-500'
                  : 'bg-gray-100 text-gray-400'
              }`}>
                {step.blocked ? (
                  <AlertTriangle className="w-6 h-6" />
                ) : step.completed ? (
                  application.status === 'rejected' && step.status === 'approved' ? (
                    <X className="w-6 h-6" />
                  ) : (
                    <CheckCircle2 className="w-6 h-6" />
                  )
                ) : step.current ? (
                  <Clock className="w-6 h-6 animate-pulse" />
                ) : (
                  step.icon
                )}
              </div>

              {/* Content */}
              <div className="flex-1 pb-6">
                <div className="flex justify-between items-start mb-2">
                  <h4 className={`font-medium ${
                    step.completed || step.current ? 'text-gray-800' : 'text-gray-500'
                  }`}>
                    {step.title}
                  </h4>
                  {step.current && step.estimatedDays && !step.blocked && (
                    <span className="text-sm text-blue-600 font-medium">
                      ~{step.estimatedDays} days
                    </span>
                  )}
                  {step.blocked && (
                    <span className="text-sm text-red-600 font-medium">
                      Action Required
                    </span>
                  )}
                </div>
                
                <p className={`text-sm ${
                  step.completed || step.current ? 'text-gray-600' : 'text-gray-400'
                }`}>
                  {step.description}
                </p>

                {step.completed && step.timestamp && (
                  <p className="text-xs text-green-600 mt-1">
                    Completed on {step.timestamp.toLocaleDateString()}
                  </p>
                )}

                {step.current && !step.blocked && (
                  <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                    <p className="text-sm text-blue-800">
                      <strong>Current Status:</strong> This step is currently being processed. 
                      {step.estimatedDays && ` Expected completion in ${step.estimatedDays} days.`}
                    </p>
                  </div>
                )}

                {step.blocked && step.current && (
                  <div className="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <p className="text-sm text-red-800">
                      <strong>Action Required:</strong> This step is blocked and requires your action to continue. 
                      Please upload the required documents to proceed with processing.
                    </p>
                    <button 
                      onClick={onNavigateToDocuments}
                      className="mt-2 px-4 py-2 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors"
                    >
                      <Upload className="w-4 h-4 inline mr-1" />
                      Upload Documents
                    </button>
                  </div>
                )}
              </div>

              {/* Connecting line */}
              {index < statusSteps.length - 1 && (
                <div className="absolute left-[68px] mt-12 w-px h-6 bg-gray-300" />
              )}
            </div>
          ))}
        </div>
      </div>

      {/* Next Steps */}
      <div className="p-6 bg-gray-50 border-t">
        <h3 className="font-semibold text-gray-800 mb-3">What happens next?</h3>
        
        {documentsRequired ? (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-800">
              🚨 <strong>Immediate Action Required:</strong> Your application cannot proceed without the required documents. 
              Please upload all mandatory documents using your QR code or access link to continue processing.
            </p>
          </div>
        ) : application.status === 'approved' ? (
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <p className="text-green-800">
              🎉 <strong>Congratulations!</strong> Your visa has been approved. You should receive your passport with the visa within 5-7 business days.
            </p>
          </div>
        ) : application.status === 'rejected' ? (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4">
            <p className="text-red-800">
              <strong>Application Decision:</strong> Unfortunately, your visa application was not approved. You will receive a detailed explanation letter shortly.
            </p>
          </div>
        ) : (
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <p className="text-blue-800">
              <strong>Processing Continues:</strong> Your application is being processed and will move through the remaining steps automatically. 
              We'll notify you of any updates or if additional information is needed.
            </p>
          </div>
        )}

        <div className="mt-4 flex gap-3">
          <button
            onClick={loadApplicationStatus}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            Refresh Status
          </button>
          
          {documentsRequired && (
            <button
              onClick={onNavigateToDocuments}
              className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
            >
              <Upload className="w-4 h-4 inline mr-1" />
              Upload Documents
            </button>
          )}
          
          <button
            onClick={onNewApplication}
            className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
          >
            New Application
          </button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/lib/constants/theme.constants.ts">
export const THEMES = {
  LIGHT: 'cupcake',
  DARK: 'dracula',
} as const

export type Theme = typeof THEMES[keyof typeof THEMES]

export const DEFAULT_THEME = THEMES.LIGHT

export const THEME_STORAGE_KEY = 'theme'

export const THEME_OPTIONS = [
  { value: 'default', label: 'System Default' },
  { value: THEMES.LIGHT, label: 'Light' },
  { value: THEMES.DARK, label: 'Dark' },
] as const
</file>

<file path="app/frontend/visaverge-user/lib/stores/alert.store.ts">
import { create } from 'zustand'

export type AlertType = 'success' | 'error' | 'warning' | 'info'

export interface Alert {
  id: string
  type: AlertType
  message: string
  duration?: number
}

interface AlertState {
  alerts: Alert[]
}

interface AlertActions {
  addAlert: (alert: Omit<Alert, 'id'>) => void
  removeAlert: (id: string) => void
  clearAlerts: () => void
  showSuccess: (message: string, duration?: number) => void
  showError: (message: string, duration?: number) => void
  showWarning: (message: string, duration?: number) => void
  showInfo: (message: string, duration?: number) => void
}

type AlertStore = AlertState & AlertActions

const generateId = () => Math.random().toString(36).substr(2, 9)

export const useAlertStore = create<AlertStore>((set, get) => ({
  alerts: [],

  addAlert: (alertData) => {
    const alert: Alert = {
      id: generateId(),
      ...alertData,
    }

    set((state) => ({
      alerts: [...state.alerts, alert],
    }))

    const duration = alert.duration || 5000
    if (duration > 0) {
      setTimeout(() => {
        get().removeAlert(alert.id)
      }, duration)
    }
  },

  removeAlert: (id) =>
    set((state) => ({
      alerts: state.alerts.filter((alert) => alert.id !== id),
    })),

  clearAlerts: () => set({ alerts: [] }),

  showSuccess: (message, duration) =>
    get().addAlert({ type: 'success', message, duration }),

  showError: (message, duration = 7000) =>
    get().addAlert({ type: 'error', message, duration }),

  showWarning: (message, duration) =>
    get().addAlert({ type: 'warning', message, duration }),

  showInfo: (message, duration) =>
    get().addAlert({ type: 'info', message, duration }),
}))
</file>

<file path="app/frontend/visaverge-user/public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="app/frontend/visaverge-user/public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="app/frontend/visaverge-user/public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="app/frontend/visaverge-user/public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="app/frontend/visaverge-user/public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="app/frontend/visaverge-user/types/embassy.types.ts">
// Embassy-specific types

export interface Officer {
  id: string
  name: string
  role: string
  embassy: string
}

export interface Embassy {
  id: string
  name: string
  country: string
  location: string
}

export interface LoginCredentials {
  officerId: string
  password: string
  embassy: string
}

export interface EmbassyApplication {
  id: string
  applicantName: string
  visaType: string
  status: 'submitted' | 'document_review' | 'background_check' | 'officer_review' | 'approved' | 'rejected'
  submittedAt: Date
  priority: 'low' | 'normal' | 'high' | 'urgent'
  country: string
  documentsCount: number
  riskScore: number
  estimatedDays: number
  lastActivity: Date
}

export interface EmbassyDocument {
  id: string
  name: string
  type: string
  verified: boolean
  uploadedAt: string
  size?: number
  url?: string
}

export interface ApplicationReviewData {
  application: EmbassyApplication
  documents: EmbassyDocument[]
  answers: Record<string, any>
  history: StatusUpdate[]
}

export interface StatusUpdate {
  id: string
  status: string
  timestamp: Date
  officerId: string
  notes?: string
}

export interface AnalyticsData {
  totalApplications: number
  approvalRate: number
  avgProcessingTime: number
  pendingApplications: number
  trendsData: {
    month: string
    applications: number
    approvals: number
    rejections: number
  }[]
  visaTypeDistribution: {
    type: string
    count: number
    percentage: number
  }[]
  countryStats: {
    country: string
    applications: number
    approvalRate: number
  }[]
  processingTimeByType: {
    visaType: string
    avgDays: number
    trend: 'up' | 'down' | 'stable'
  }[]
}

// Mock data constants
export const MOCK_EMBASSIES: Embassy[] = [
  { id: 'us_berlin', name: 'U.S. Embassy Berlin', country: 'Germany', location: 'Berlin, Germany' },
  { id: 'us_london', name: 'U.S. Embassy London', country: 'United Kingdom', location: 'London, UK' },
  { id: 'us_paris', name: 'U.S. Embassy Paris', country: 'France', location: 'Paris, France' },
  { id: 'us_tokyo', name: 'U.S. Embassy Tokyo', country: 'Japan', location: 'Tokyo, Japan' }
]

export const MOCK_OFFICERS = {
  'maria.schmidt': { password: 'demo123', name: 'Officer Maria Schmidt', role: 'Senior Consular Officer' },
  'john.davis': { password: 'demo123', name: 'Officer John Davis', role: 'Consular Officer' },
  'admin': { password: 'admin', name: 'Administrator', role: 'System Administrator' }
} as const
</file>

<file path="app/frontend/visaverge-user/utils/helpers.ts">
// src/utils/helpers.ts

import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'
import { ApplicationStatus, VisaType } from '@/types'

/**
 * Utility function to merge Tailwind classes
 */
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Format file size in human readable format
 */
export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes'
  
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

/**
 * Format date to locale string with options
 */
export function formatDate(date: Date | string, options?: Intl.DateTimeFormatOptions): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  
  const defaultOptions: Intl.DateTimeFormatOptions = {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    ...options
  }
  
  return dateObj.toLocaleDateString('en-US', defaultOptions)
}

/**
 * Format date with time
 */
export function formatDateTime(date: Date | string): string {
  const dateObj = typeof date === 'string' ? new Date(date) : date
  
  return dateObj.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

/**
 * Calculate days between two dates
 */
export function daysBetween(date1: Date, date2: Date): number {
  const diffTime = Math.abs(date2.getTime() - date1.getTime())
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24))
}

/**
 * Get status color for application status
 */
export function getStatusColor(status: ApplicationStatus): string {
  switch (status) {
    case 'approved':
      return 'text-green-600'
    case 'rejected':
      return 'text-red-600'
    case 'requires_interview':
      return 'text-yellow-600'
    case 'submitted':
      return 'text-blue-600'
    case 'document_review':
    case 'background_check':
    case 'officer_review':
      return 'text-purple-600'
    default:
      return 'text-gray-600'
  }
}

/**
 * Get status background color
 */
export function getStatusBgColor(status: ApplicationStatus): string {
  switch (status) {
    case 'approved':
      return 'bg-green-50 border-green-200'
    case 'rejected':
      return 'bg-red-50 border-red-200'
    case 'requires_interview':
      return 'bg-yellow-50 border-yellow-200'
    case 'submitted':
      return 'bg-blue-50 border-blue-200'
    case 'document_review':
    case 'background_check':
    case 'officer_review':
      return 'bg-purple-50 border-purple-200'
    default:
      return 'bg-gray-50 border-gray-200'
  }
}

/**
 * Get human-readable visa type name
 */
export function getVisaTypeName(visaType: VisaType): string {
  const names = {
    tourist: 'Tourist Visa',
    business: 'Business Visa',
    student: 'Student Visa',
    work: 'Work Visa',
    family_visit: 'Family Visit Visa',
    transit: 'Transit Visa'
  }
  return names[visaType] || 'Visa'
}

/**
 * Get human-readable status name
 */
export function getStatusName(status: ApplicationStatus): string {
  const names = {
    draft: 'Draft',
    submitted: 'Submitted',
    document_review: 'Document Review',
    background_check: 'Background Check',
    officer_review: 'Officer Review',
    approved: 'Approved',
    rejected: 'Rejected',
    requires_interview: 'Interview Required'
  }
  return names[status] || status
}

/**
 * Validate email format
 */
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

/**
 * Validate phone number (simple validation)
 */
export function isValidPhone(phone: string): boolean {
  const phoneRegex = /^\+?[\d\s-()]+$/
  return phoneRegex.test(phone) && phone.replace(/\D/g, '').length >= 10
}

/**
 * Generate a random application ID
 */
export function generateApplicationId(): string {
  const prefix = 'VSV'
  const timestamp = Date.now().toString().slice(-6)
  const random = Math.random().toString(36).substring(2, 6).toUpperCase()
  return `${prefix}-${timestamp}-${random}`
}

/**
 * Sleep utility for demos/delays
 */
export function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms))
}

/**
 * Debounce function for search/input
 */
export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  
  return function executedFunction(...args: Parameters<T>) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }
    
    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

/**
 * Throttle function for scroll/resize events
 */
export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean
  
  return function executedFunction(...args: Parameters<T>) {
    if (!inThrottle) {
      func.apply(this, args)
      inThrottle = true
      setTimeout(() => inThrottle = false, limit)
    }
  }
}

/**
 * Copy text to clipboard
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    await navigator.clipboard.writeText(text)
    return true
  } catch (err) {
    // Fallback for older browsers
    const textArea = document.createElement('textarea')
    textArea.value = text
    document.body.appendChild(textArea)
    textArea.focus()
    textArea.select()
    
    try {
      document.execCommand('copy')
      document.body.removeChild(textArea)
      return true
    } catch (error) {
      document.body.removeChild(textArea)
      return false
    }
  }
}

/**
 * Check if device is mobile
 */
export function isMobile(): boolean {
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  )
}

/**
 * Get browser info
 */
export function getBrowserInfo() {
  const userAgent = navigator.userAgent
  
  if (userAgent.includes('Firefox')) return 'Firefox'
  if (userAgent.includes('Chrome')) return 'Chrome'
  if (userAgent.includes('Safari')) return 'Safari'
  if (userAgent.includes('Edge')) return 'Edge'
  
  return 'Unknown'
}

/**
 * Local storage helpers with error handling
 */
export const storage = {
  get: (key: string) => {
    try {
      const item = localStorage.getItem(key)
      return item ? JSON.parse(item) : null
    } catch (error) {
      console.error('Error reading from localStorage:', error)
      return null
    }
  },
  
  set: (key: string, value: any) => {
    try {
      localStorage.setItem(key, JSON.stringify(value))
      return true
    } catch (error) {
      console.error('Error writing to localStorage:', error)
      return false
    }
  },
  
  remove: (key: string) => {
    try {
      localStorage.removeItem(key)
      return true
    } catch (error) {
      console.error('Error removing from localStorage:', error)
      return false
    }
  },
  
  clear: () => {
    try {
      localStorage.clear()
      return true
    } catch (error) {
      console.error('Error clearing localStorage:', error)
      return false
    }
  }
}
</file>

<file path="app/frontend/visaverge-user/.gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="app/frontend/visaverge-user/eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="app/frontend/visaverge-user/next.config.ts">
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['localhost', 'via.placeholder.com'],
    formats: ['image/webp', 'image/avif'],
  },
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'X-Frame-Options',
            value: 'DENY',
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff',
          },
          {
            key: 'Referrer-Policy',
            value: 'strict-origin-when-cross-origin',
          },
        ],
      },
    ]
  },
  env: {
    CUSTOM_KEY: 'visaverge-demo',
  },
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production',
  },
  typescript: {
    // Dangerously allow production builds to successfully complete even if
    // your project has type errors.
    ignoreBuildErrors: false,
  },
  eslint: {
    // Warning: This allows production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: false,
  },
}

module.exports = nextConfig
</file>

<file path="app/frontend/visaverge-user/package.json">
{
  "name": "visaverge-user",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tailwindcss/forms": "^0.5.10",
    "@tailwindcss/typography": "^0.5.16",
    "clsx": "^2.1.1",
    "daisyui": "^4.12.14",
    "lucide-react": "^0.522.0",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "tailwind-merge": "^3.3.1",
    "zustand": "^5.0.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.3.4",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.17",
    "typescript": "^5"
  }
}
</file>

<file path="app/frontend/visaverge-user/postcss.config.mjs">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="app/frontend/visaverge-user/README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="app/frontend/visaverge-user/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './lib/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
        mono: ['JetBrains Mono', 'Consolas', 'Monaco', 'Courier New', 'monospace'],
      },
      spacing: {
        '18': '4.5rem',
        '88': '22rem',
        '128': '32rem',
      },
      borderRadius: {
        '4xl': '2rem',
        '5xl': '2.5rem',
      },
      boxShadow: {
        'soft': '0 2px 15px rgba(0, 0, 0, 0.08)',
        'medium': '0 4px 25px rgba(0, 0, 0, 0.1)',
        'strong': '0 8px 40px rgba(0, 0, 0, 0.12)',
        'colored': '0 8px 30px rgba(59, 130, 246, 0.15)',
        'colored-lg': '0 12px 50px rgba(59, 130, 246, 0.2)',
      },
      animation: {
        'fade-in': 'fadeIn 0.5s ease-in-out',
        'slide-up': 'slideUp 0.5s ease-out',
        'visa-pulse': 'visaPulse 2s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        slideUp: {
          '0%': { 
            opacity: '0',
            transform: 'translateY(20px)'
          },
          '100%': { 
            opacity: '1',
            transform: 'translateY(0)'
          },
        },
        visaPulse: {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.7' },
        },
      },
    },
    container: {
      center: true,
      padding: {
        DEFAULT: "1rem",
        sm: "1rem",
        lg: "4rem",
        xl: "8rem",
        "2xl": "12rem"
      }
    }
  },
  plugins: [
    require("daisyui")
  ],
  daisyui: {
    themes: ["cupcake", "dracula"],
    darkTheme: "dracula",
    base: true,
    styled: true,
    utils: true,
    prefix: "",
    logs: true,
    themeRoot: ":root",
  }
}
</file>

<file path="app/frontend/visaverge-user/tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="app/frontend/package.json">
{
  "dependencies": {
    "axios": "^1.10.0",
    "lucide-react": "^0.522.0",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@types/uuid": "^10.0.0"
  }
}
</file>

<file path="features_2.md">
# 🏗️ **VisaVerge: Complete Feature Breakdown**

## **👤 USER SIDE Features**

### **🤖 1. AI Visa Assistant (AVA)**
```
✅ Chat Interface
- Natural language conversation
- Multi-language support (mock)
- Voice input capability (stretch goal)
- Context-aware responses

✅ Smart Recommendations
- Visa type suggestion based on purpose
- Document requirements explanation
- Eligibility pre-screening
- Application tips and warnings
```

### **📋 2. Dynamic Application Forms**
```
✅ Adaptive Questionnaire
- Smart form generation based on visa type
- Progressive disclosure (show relevant questions only)
- Auto-save functionality
- Form validation with helpful messages

✅ Smart Pre-filling
- Import data from previous applications
- Auto-detect document data (OCR simulation)
- Social media profile import (LinkedIn, etc.)
- Travel history auto-population
```

### **📄 3. Document Management**
```
✅ Upload & Verification
- Drag-and-drop document upload
- Real-time document validation
- Photo quality checker
- Format conversion (PDF, JPG, etc.)

✅ Digital Wallet
- Secure document storage
- Shareable document links
- Version control
- Expiration date tracking
```

### **📊 4. Application Tracking**
```
✅ Real-time Status
- Live progress tracking
- Detailed timeline view
- Push notifications (simulated)
- Estimated completion dates

✅ Transparency Features
- Approval probability meter
- Checklist of requirements
- Officer notes (when available)
- Next action items
```

### **👥 5. User Profile & History**
```
✅ Personal Dashboard
- Application history
- Saved forms/drafts
- Document library
- Travel timeline

✅ Smart Insights
- Application success patterns
- Improvement suggestions
- Renewal reminders
- Travel recommendations
```

---

## **🏛️ EMBASSY SIDE Features**

### **📱 1. Officer Dashboard**
```
✅ Application Queue
- Priority-sorted applications
- Filter by status, type, urgency
- Batch processing options
- Workload distribution

✅ Quick Stats
- Daily/weekly metrics
- Approval rates
- Processing times
- Officer performance
```

### **🔍 2. Application Review Interface**
```
✅ Unified Review Screen
- Side-by-side document viewer
- Applicant profile summary
- Risk assessment indicators
- Previous application history

✅ Decision Support Tools
- AI-powered risk scoring
- Similar case references
- Policy guideline lookup
- Fraud detection alerts
```

### **📋 3. Document Verification**
```
✅ Advanced Verification
- OCR text extraction
- Document authenticity checks
- Cross-reference databases
- Biometric photo comparison

✅ Collaboration Tools
- Flag for secondary review
- Internal notes system
- Supervisor escalation
- Team chat integration
```

### **⚡ 4. Status Management**
```
✅ Workflow Control
- Update application status
- Send notifications to applicants
- Schedule interviews
- Request additional documents

✅ Communication Hub
- Direct messaging with applicants
- Template responses
- Multi-language support
- Video call scheduling
```

### **📈 5. Analytics & Reporting**
```
✅ Performance Metrics
- Processing time analytics
- Officer productivity
- Bottleneck identification
- Success rate tracking

✅ Policy Insights
- Application pattern analysis
- Fraud detection reports
- Country-specific trends
- Recommendation engine
```

### **🔐 6. Security & Compliance**
```
✅ Access Control
- Role-based permissions
- Audit trail logging
- Data encryption
- Secure document sharing

✅ Compliance Tools
- Regulation updates
- Policy enforcement
- Data retention management
- Privacy protection
```

---

## **🎯 HACKATHON MVP SCOPE**

### **Phase 1: Core User Journey (4-6 hours)**
```
User Side:
✅ Landing page with AVA chat
✅ Basic visa type selection
✅ Simple dynamic form (3-4 questions)
✅ Document upload simulation
✅ Application submission

Embassy Side:
✅ Login page for officers
✅ Basic dashboard with application list
✅ Single application review page
✅ Status update functionality
```

### **Phase 2: Enhanced Features (6-8 hours)**
```
User Side:
✅ Real-time status tracking
✅ Progress visualization
✅ Mobile-responsive design
✅ Form auto-save

Embassy Side:
✅ Document viewer
✅ Approval/rejection workflow
✅ Basic analytics dashboard
✅ Search/filter applications
```

### **Phase 3: Polish & Demo (2-4 hours)**
```
Both Sides:
✅ UI/UX improvements
✅ Demo data population
✅ Error handling
✅ Performance optimization
```

---

## **🛠️ Technical Implementation Strategy**

### **Frontend Architecture**
```typescript
// User App Structure
user-app/
├── pages/
│   ├── index.tsx              // Landing + AVA chat
│   ├── application/
│   │   ├── form.tsx           // Dynamic form
│   │   └── status.tsx         // Status tracking
│   └── profile/
│       └── dashboard.tsx      // User dashboard

// Embassy App Structure  
embassy-app/
├── pages/
│   ├── login.tsx              // Officer authentication
│   ├── dashboard.tsx          // Main dashboard
│   ├── applications/
│   │   ├── [id].tsx          // Single application review
│   │   └── queue.tsx         // Application queue
│   └── analytics.tsx         // Reports & metrics
```

### **Backend API Structure**
```python
# API Endpoints
/api/user/
├── /chat                     # AVA conversations
├── /applications             # CRUD operations
├── /documents               # Upload/manage docs
├── /status/{id}             # Status tracking
└── /profile                 # User profile

/api/embassy/
├── /auth                    # Officer login
├── /applications            # Application management
├── /review/{id}             # Review interface
├── /decisions              # Approve/reject
└── /analytics              # Dashboard metrics
```

### **Database Schema (SQLite for MVP)**
```sql
-- Core tables
users (id, email, name, profile_data)
applications (id, user_id, visa_type, status, created_at)
documents (id, application_id, type, filename, verified)
officers (id, email, name, role, embassy_id)
reviews (id, application_id, officer_id, decision, notes)
status_updates (id, application_id, status, timestamp, notes)
```

---

## **🎭 Demo Flow for Judges**

### **Act 1: User Journey (90 seconds)**
1. **Landing**: "Meet Sarah, applying for a business visa"
2. **AVA Chat**: "Hi AVA, I need a visa for a conference in Germany"
3. **Smart Form**: Shows adaptive questions
4. **Upload**: Simulates document upload with validation
5. **Submit**: Application submitted successfully

### **Act 2: Embassy Power (90 seconds)**
1. **Officer Login**: Switch to embassy dashboard
2. **Queue View**: Show Sarah's application in queue
3. **Review**: Open detailed review interface
4. **Decision**: Approve with status update
5. **Real-time**: Show status change on user side

### **Act 3: The Innovation (60 seconds)**
1. **Before/After**: Traditional vs VisaVerge comparison
2. **Key Benefits**: Speed, transparency, user experience
3. **Impact**: Real numbers and user testimonials (mock)

---

## **🚀 Quick Start Priorities**

1. **Start with user chat interface** - Most impressive demo feature
2. **Build basic form flow** - Shows the smart adaptation
3. **Create embassy dashboard** - Demonstrates complete solution
4. **Add status tracking** - Shows transparency innovation
5. **Polish for demo** - Focus on smooth user experience

**💡 Pro tip**: Build with realistic mock data that tells a compelling story. The judges should feel like they're watching a real application being processed in real-time!

Which side would you like to start building first - user or embassy?
</file>

<file path="features.md">
Great focus! The **visa process** is one of the most frustrating, paperwork-heavy, and often opaque aspects of embassy services. Rethinking it for the digital era offers a **huge opportunity for innovation**.

---

## 💡 Groundbreaking Idea: **VisaVerge – A Smart, Transparent, AI-Guided Visa System**

### 🔍 Summary:

**VisaVerge** is a **secure, AI-driven, globally unified visa experience** that replaces the traditional visa application process with an intelligent, interactive journey — accessible anytime, anywhere, on any device.

---

## 🧠 Key Innovations:

### 1. **AI Visa Assistant (AVA) – Your Personal Visa Guide**

* Chat + voice assistant trained on **country-specific visa laws**, frequently updated with **policy changes**.
* Speaks your language and understands your background.
* Can **pre-screen your case**, explain requirements in plain language, and auto-fill forms with your consent.

> “Hi Ana, based on your travel history and employment documents, you are eligible for a short-term cultural exchange visa. Let’s begin the pre-approval now.”

---

### 2. **Dynamic Form Generator**

* Instead of long static PDFs, VisaVerge uses an **adaptive form system**:

  * Asks only relevant questions.
  * Changes dynamically as you answer.
  * Skips irrelevant sections (e.g., no need to ask about children if you’re 19 and traveling alone).

---

### 3. **Auto-Validated Digital Docs & Credentials**

* Uses **OCR + AI verification** to check passports, bank statements, and employer letters.
* Accepts **verifiable credentials** (like digital diplomas, company IDs, etc.) from trusted issuers — reducing fraud and speeding up approval.
* Integrates with **global travel history records** (e.g., via IATA, Interpol) for faster background checks.

---

### 4. **Real-Time Status Transparency + Pre-Decision Simulator**

* Replaces “Your visa is being processed” with a **real-time progress bar** + clear checklist:

  * ✅ Identity verified
  * ✅ Income confirmed
  * ❌ Travel insurance missing
  * 📍 Officer review in 3 days
* Includes a **decision simulator** with probabilities:

  > “Based on current data, your approval likelihood is 82%. Adding a letter of support from your employer may improve your chances.”

---

### 5. **Embassy-In-The-Cloud Appointments**

* Integrated **secure video interviews** with embassy officials.
* Supports **multi-language interpretation**, facial emotion reading (for security), and encrypted document sharing.

---

### 6. **One-Click Repeat Applications**

* For frequent travelers, your visa “profile” can be reused.
* Auto-renewal options for common short-term travel visas.

---

## 🛡️ Security + Privacy by Design:

* Built on **zero-knowledge proofs** and **end-to-end encryption**.
* Your data is only visible to the consular officer reviewing it.
* Blockchain-stored receipts and proof-of-submission for every interaction.

---

## 🌐 Future Possibility:

* Partner countries could adopt **mutual VisaVerge protocols**, reducing red tape for multi-country travel (like a **digital Schengen** for the future).
* Could integrate with **e-wallets** for digital visa stamps or travel tax payments.

---

## 🎯 Real-World Impact:

* Cuts application time by **60–80%**.
* Reduces embassy workload and fraud.
* Increases transparency, trust, and access for low-tech users via **voice-first UI** and **mobile optimization**.
* Helps refugees, nomads, or displaced persons who lack a fixed address but need legal mobility.

---
</file>

<file path="notion_page.md">
Challenge
Motivation
Diplomacy is rapidly changing in our digital era. As people move more freely, technologies like AI, AR/VR and big data are reshaping how we connect, and younger generations expect faster, more digital interactions with public institutions. Embassies must adapt, especially where physical locations aren’t possible, due to geopolitical conflicts or remote locations. Virtual embassies can make consular services, cultural exchange, and international cooperation more accessible and secure, reaching people anywhere and enabling real-time, inclusive dialogue.
Task
Your challenge is to rethink what an embassy can be in the 21st century. You don’t need to rebuild an entire embassy. Instead, focus on a single service, function, or use case that does not exist, you find interesting, important, you see potential for improvement or ideally all together.
Consider questions like:
How can essential diplomatic or consular services be made more accessible or user-friendly?
What new possibilities could a digital or virtual embassy offer that weren’t possible before?
How can we ensure the integrity and security of these services?
How can we keep real-world and digital diplomacy connected?
You can choose to focus on solutions for citizens (such as emergency help, visa applications, or information access), for diplomats (such as secure communication, immunity, or host-government liaison), or both.
Some examples of classic embassy functions:
Issuing passports, visas, and travel documents
Assisting citizens in emergencies
Providing legal or notarial services
Advocating for citizens’ rights
Giving information and advice
Facilitating official communication and negotiation
Organizing diplomatic events or meetings
Addressing diplomatic privileges and security
Final tip: Work on the idea that truly excites you and come at it with fresh eyes. Don’t just copy an existing solution or put a paper form online, re-imagine an existing service for the digital era or invent something entirely new. Big or small, what matters is the real-world impact for citizens and diplomats and how naturally your solution lives in the digital space
Evaluation (total of 100 pts)
Criterion
Weight
What Judges Look For
Creativity & Originality
20 pts
- Does the idea approach embassy services in a new or unexpected way?- Is the use of technology clever or novel?
- Does it go beyond simply digitizing a paper process?
Impact & Feasibility
25 pts
- Does the solution address a real pain point for citizens or diplomats?
- Could it function effectively in a real-world embassy context (virtual or hybrid)?
- Are privacy, security, and inclusivity well-considered?
- Is it technically realistic, even if not fully built out?
Prototype Quality
45 pts
Functionality & Stability (25 pts)
- Does the prototype demonstrate the core idea clearly?
- Does the user journey flow smoothly end-to-end?
UX / Accessibility (20 pts)
- Is the interface intuitive and easy to use?
- Does it consider diverse users, including those with limited digital access or disabilities?
Presentation
10 pts
- Is the problem clearly stated and well-contextualized?
- Does the presentation explain how the solution works and why it matters?
- Is the live demo working?
- All conveyed clearly in under 4 minutes?
Examples
US embassy in Iran (link)
After the U.S. and Iran severed diplomatic ties in 1979, the United States launched the “Virtual Embassy Tehran” to maintain a direct channel with Iranian citizens despite the absence of a physical embassy. This web-based platform provides reliable information about the U.S., its policies, educational opportunities, and consular services, aiming to foster dialogue and cultural exchange. The virtual embassy helps overcome geopolitical barriers, supports public diplomacy, and ensures access to critical resources for Iranians, demonstrating how digital embassies can sustain engagement, build trust, and deliver essential services when a traditional diplomatic presence is not possible.
Maldives 2022 (link)
In 2022, the Maldives expanded its digital diplomacy by launching a virtual embassy in the Metaverse, building on its earlier Second Life initiative. This Metaverse embassy offers a persistent, interactive platform where users worldwide can access consular services, obtain country information, and engage with Maldivian culture and policy in real time; even if they lack access to a physical embassy. Services include virtual consultations, information on visas and travel, cultural showcases, and opportunities for dialogue with officials.
Additional cases/sources for inspiration
The UK has implemented AI-driven diplomatic services, such as the Correspondence Triage system, which has dramatically reduced response times for citizen inquiries from 10 days to just a few seconds (link)
Using case studies from Yemen, Libya, and Iraq, the UN DPPA Innovation Cell explains how AI-assisted digital dialogues can meaningfully enhance inclusivity and engage diverse voices in peace processes (link)
"Marwa's Election" is the story of a young Iraqi lawyer-activist who participates in the UN's first-ever AI-assisted digital dialogue with Iraqi voters (link)
A U.S. Embassy in Guinea public affairs officer used generative AI tools like ChatGPT to streamline content creation, enhance public diplomacy, and free up staff for strategic work, while also addressing challenges such as misinformation, bias, and the need for responsible AI integration and prompt engineering in diplomatic workflows (link)
The Virtual Embassy website by FCDO Services offers an interactive experience showcasing how various specialist teams support UK embassies worldwide, highlighting career opportunities in engineering, logistics, project management, and apprenticeships (link)
E-embassies in Luxembourg are an innovative diplomatic concept that allows countries to securely host sensitive data on Luxembourg soil with guarantees of immunity, enhancing digital sovereignty and international cooperation (link)
The Embassy of Ukraine in the Czech Republic, in cooperation with IBM, has launched a chatbot to provide Ukrainian citizens with instant answers to frequently asked questions, enhancing access to information and consular support (link)
The website of the German Missions in the United States provides information and online services for German citizens and those interested in Germany, including consular services, visa information, cultural events, and updates from the German Embassy in Washington and eight Consulates General across the U.S. (link)
The website of the German Embassy in China provides information and digital services for German and Chinese citizens, including visa and consular services, news, cultural events, and updates on Germany-China relations (link)
The website of the German Embassy in Paris provides information and digital consular services for German and French citizens, including visa applications, legal matters, cultural events, and updates on Germany-France relations (link)
The website of the German Embassy in Nairobi offers information and digital consular services for German and Kenyan citizens, including visa applications, cultural exchange, bilateral cooperation updates, and support for economic, educational, and development initiatives between Germany and Kenya (link)
</file>

<file path="app/backend/routes/applications.py">
# backend/routes/applications.py - Updated with document requirements and processing logic

from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
from typing import List, Optional
import json
import hashlib
from datetime import datetime, timedelta

from database import get_db, User, Application, Document, StatusUpdate
from models import ApplicationCreate, ApplicationResponse, ApplicationUpdate, FormQuestionsResponse, Question
from utils import generate_id, calculate_risk_score, calculate_approval_probability, get_form_questions as get_visa_form_questions

router = APIRouter()

# Document requirements by visa type
DOCUMENT_REQUIREMENTS = {
    "tourist": {
        "mandatory": ["passport", "photo", "bank_statement"],
        "optional": ["travel_insurance", "flight_itinerary"]
    },
    "business": {
        "mandatory": ["passport", "photo", "invitation_letter"],
        "optional": ["employment_letter", "bank_statement"]
    },
    "student": {
        "mandatory": ["passport", "photo", "invitation_letter", "bank_statement"],
        "optional": ["employment_letter"]
    },
    "work": {
        "mandatory": ["passport", "photo", "employment_letter", "invitation_letter"],
        "optional": ["bank_statement"]
    },
    "family_visit": {
        "mandatory": ["passport", "photo", "invitation_letter"],
        "optional": ["bank_statement", "employment_letter"]
    },
    "transit": {
        "mandatory": ["passport", "photo", "flight_itinerary"],
        "optional": []
    }
}

# New password verification model
from pydantic import BaseModel

class PasswordVerification(BaseModel):
    password: str

def hash_password(password: str) -> str:
    """Simple password hashing for demo (use proper hashing in production)"""
    return hashlib.sha256(password.encode()).hexdigest()

def check_document_requirements(application_id: str, visa_type: str, db: Session) -> dict:
    """Check if application meets document requirements"""
    requirements = DOCUMENT_REQUIREMENTS.get(visa_type, {"mandatory": [], "optional": []})
    
    # Get uploaded documents
    uploaded_docs = db.query(Document).filter(
        Document.application_id == application_id,
        Document.verified == True
    ).all()
    
    uploaded_types = [doc.type for doc in uploaded_docs]
    
    mandatory_missing = [doc_type for doc_type in requirements["mandatory"] 
                        if doc_type not in uploaded_types]
    
    return {
        "mandatory_required": requirements["mandatory"],
        "mandatory_uploaded": [doc for doc in uploaded_types if doc in requirements["mandatory"]],
        "mandatory_missing": mandatory_missing,
        "optional_available": requirements["optional"],
        "optional_uploaded": [doc for doc in uploaded_types if doc in requirements["optional"]],
        "requirements_met": len(mandatory_missing) == 0,
        "total_mandatory": len(requirements["mandatory"]),
        "total_mandatory_uploaded": len([doc for doc in uploaded_types if doc in requirements["mandatory"]])
    }

def determine_application_status(application_id: str, visa_type: str, db: Session) -> str:
    """Determine the correct application status based on documents and processing stage"""
    doc_status = check_document_requirements(application_id, visa_type, db)
    
    # Get current application
    app = db.query(Application).filter(Application.id == application_id).first()
    if not app:
        return "submitted"
    
    current_status = app.status
    
    # If we're still in submitted status and documents aren't complete
    if current_status == "submitted" and not doc_status["requirements_met"]:
        return "document_collection"  # Special status for missing documents
    
    # If documents are now complete but we were in document_collection
    if current_status in ["submitted", "document_collection"] and doc_status["requirements_met"]:
        return "document_review"  # Move to next stage
    
    # Otherwise, keep current status
    return current_status

@router.get("/", response_model=List[ApplicationResponse])
async def get_applications(
    status: Optional[str] = Query(None, description="Filter by status"),
    search: Optional[str] = Query(None, description="Search by name or ID"),
    db: Session = Depends(get_db)
):
    """Get all applications with optional filtering"""
    
    query = db.query(Application)
    
    # Filter by status
    if status and status != "all":
        query = query.filter(Application.status == status)
    
    applications = query.order_by(Application.submitted_at.desc()).all()
    
    # Process applications for frontend
    result = []
    for app in applications:
        answers = json.loads(app.answers) if app.answers else {}
        
        # Check document requirements
        doc_status = check_document_requirements(app.id, app.visa_type, db)
        
        # Get document count
        doc_count = db.query(Document).filter(Document.application_id == app.id).count()
        
        # Determine actual status considering document requirements
        actual_status = determine_application_status(app.id, app.visa_type, db)
        
        app_data = ApplicationResponse(
            id=app.id,
            user_id=app.user_id,
            visa_type=app.visa_type,
            status=actual_status,
            priority=app.priority,
            risk_score=app.risk_score,
            answers=answers,
            submitted_at=app.submitted_at,
            updated_at=app.updated_at,
            estimated_decision=app.estimated_decision,
            approval_probability=app.approval_probability,
            assigned_officer_id=app.assigned_officer_id,
            
            # Computed fields
            applicant_name=answers.get("applicant_name", f"Applicant {app.id[-4:]}"),
            country=answers.get("destination_country", "Unknown"),
            documents_count=doc_count,
            estimated_days=get_estimated_days(actual_status, app.visa_type, doc_status["requirements_met"]),
            last_activity=app.updated_at,
            
            # Document status
            document_requirements=doc_status
        )
        
        # Apply search filter
        if search:
            search_lower = search.lower()
            if (search_lower not in app_data.id.lower() and 
                search_lower not in (app_data.applicant_name or "").lower()):
                continue
        
        result.append(app_data)
    
    return result

@router.get("/{application_id}", response_model=ApplicationResponse)
async def get_application(application_id: str, db: Session = Depends(get_db)):
    """Get a specific application by ID"""
    
    app = db.query(Application).filter(Application.id == application_id).first()
    if not app:
        raise HTTPException(status_code=404, detail="Application not found")
    
    # Get related data
    documents = db.query(Document).filter(Document.application_id == application_id).all()
    status_updates = db.query(StatusUpdate).filter(StatusUpdate.application_id == application_id).all()
    
    answers = json.loads(app.answers) if app.answers else {}
    
    # Check document requirements
    doc_status = check_document_requirements(application_id, app.visa_type, db)
    actual_status = determine_application_status(application_id, app.visa_type, db)
    
    return ApplicationResponse(
        id=app.id,
        user_id=app.user_id,
        visa_type=app.visa_type,
        status=actual_status,
        priority=app.priority,
        risk_score=app.risk_score,
        answers=answers,
        submitted_at=app.submitted_at,
        updated_at=app.updated_at,
        estimated_decision=app.estimated_decision,
        approval_probability=app.approval_probability,
        assigned_officer_id=app.assigned_officer_id,
        
        # Computed fields
        applicant_name=answers.get("applicant_name", f"Applicant {app.id[-4:]}"),
        country=answers.get("destination_country", "Unknown"),
        documents_count=len(documents),
        estimated_days=get_estimated_days(actual_status, app.visa_type, doc_status["requirements_met"]),
        last_activity=app.updated_at,
        
        # Document status
        document_requirements=doc_status,
        
        # Relationships
        documents=[{
            "id": doc.id,
            "name": doc.name,
            "type": doc.type,
            "size": doc.size,
            "verified": doc.verified,
            "uploaded_at": doc.uploaded_at,
            "file_path": doc.file_path
        } for doc in documents],
        status_updates=[{
            "id": update.id,
            "status": update.status,
            "notes": update.notes,
            "officer_id": update.officer_id,
            "timestamp": update.timestamp
        } for update in status_updates]
    )

@router.post("/{application_id}/verify", response_model=ApplicationResponse)
async def verify_application_access(
    application_id: str, 
    verification: PasswordVerification, 
    db: Session = Depends(get_db)
):
    """Verify application access with password"""
    
    app = db.query(Application).filter(Application.id == application_id).first()
    if not app:
        raise HTTPException(status_code=404, detail="Application not found")
    
    # Get stored password hash from application metadata
    answers = json.loads(app.answers) if app.answers else {}
    stored_password_hash = answers.get("access_password_hash")
    
    if not stored_password_hash:
        raise HTTPException(status_code=400, detail="Application does not have password protection")
    
    # Verify password
    provided_password_hash = hash_password(verification.password)
    if provided_password_hash != stored_password_hash:
        raise HTTPException(status_code=401, detail="Invalid password")
    
    # Return application details if password is correct
    return await get_application(application_id, db)

@router.post("/", response_model=ApplicationResponse)
async def create_application(application_data: dict, db: Session = Depends(get_db)):
    """Create a new visa application - starts in document_collection status"""
    
    # Generate IDs
    app_id = generate_id("VSV")
    user_id = generate_id("user")
    
    # Extract data from request
    visa_type = application_data.get("visa_type")
    answers = application_data.get("answers", {})
    documents = application_data.get("documents", [])
    password = application_data.get("password")
    
    # Store password hash in answers if provided
    if password:
        answers["access_password_hash"] = hash_password(password)
    
    # Calculate risk score and approval probability
    risk_score = calculate_risk_score(visa_type, answers)
    approval_probability = calculate_approval_probability(risk_score, documents)
    
    # Create user (simplified for demo)
    user = User(
        id=user_id,
        email=answers.get("email", f"user{app_id[-6:]}@example.com"),
        name=answers.get("applicant_name", "Demo User"),
        phone=answers.get("phone", ""),
        nationality=answers.get("nationality", "")
    )
    db.add(user)
    
    # Check document requirements to determine initial status
    requirements = DOCUMENT_REQUIREMENTS.get(visa_type, {"mandatory": [], "optional": []})
    has_mandatory_docs = len(requirements["mandatory"]) == 0  # If no mandatory docs required
    
    initial_status = "submitted" if has_mandatory_docs else "document_collection"
    
    # Create application
    new_app = Application(
        id=app_id,
        user_id=user_id,
        visa_type=visa_type,
        status=initial_status,
        priority=get_priority_from_risk(risk_score),
        risk_score=risk_score,
        answers=json.dumps(answers),
        estimated_decision=datetime.utcnow() + timedelta(days=get_estimated_days(initial_status, visa_type, has_mandatory_docs)),
        approval_probability=approval_probability
    )
    db.add(new_app)
    
    # Create initial status update
    status_message = "Application submitted successfully"
    if not has_mandatory_docs:
        status_message += " - waiting for required documents to begin processing"
    
    status_update = StatusUpdate(
        id=generate_id("status"),
        application_id=app_id,
        status=initial_status,
        notes=status_message,
        timestamp=datetime.utcnow()
    )
    db.add(status_update)
    
    # Create documents (if any provided)
    for doc_data in documents:
        document = Document(
            id=generate_id("doc"),
            application_id=app_id,
            name=doc_data.get("name", "Unknown Document"),
            type=doc_data.get("type", "unknown"),
            size=doc_data.get("size", 0),
            verified=doc_data.get("verified", False)
        )
        db.add(document)
    
    db.commit()
    db.refresh(new_app)
    
    # Get document status for response
    doc_status = check_document_requirements(app_id, visa_type, db)
    
    return ApplicationResponse(
        id=new_app.id,
        user_id=new_app.user_id,
        visa_type=new_app.visa_type,
        status=initial_status,
        priority=new_app.priority,
        risk_score=new_app.risk_score,
        answers=json.loads(new_app.answers),
        submitted_at=new_app.submitted_at,
        updated_at=new_app.updated_at,
        estimated_decision=new_app.estimated_decision,
        approval_probability=new_app.approval_probability,
        assigned_officer_id=new_app.assigned_officer_id,
        
        applicant_name=answers.get("applicant_name", "Demo User"),
        country=answers.get("destination_country", "Unknown"),
        documents_count=len(documents),
        estimated_days=get_estimated_days(initial_status, visa_type, has_mandatory_docs),
        last_activity=new_app.updated_at,
        document_requirements=doc_status
    )

@router.put("/{application_id}", response_model=ApplicationResponse)
async def update_application(
    application_id: str, 
    update: ApplicationUpdate, 
    db: Session = Depends(get_db)
):
    """Update application status (used by embassy officers)"""
    
    app = db.query(Application).filter(Application.id == application_id).first()
    if not app:
        raise HTTPException(status_code=404, detail="Application not found")
    
    # Check document requirements before allowing status updates
    doc_status = check_document_requirements(application_id, app.visa_type, db)
    
    # Update fields
    if update.status:
        # Don't allow progression beyond document_collection if requirements not met
        if not doc_status["requirements_met"] and update.status not in ["document_collection", "rejected"]:
            raise HTTPException(
                status_code=400, 
                detail=f"Cannot update status to {update.status}: required documents not uploaded"
            )
        
        app.status = update.status
        app.updated_at = datetime.utcnow()
        
        # Create status update record
        status_update = StatusUpdate(
            id=generate_id("status"),
            application_id=application_id,
            status=update.status,
            notes=update.notes,
            officer_id=update.officer_id,
            timestamp=datetime.utcnow()
        )
        db.add(status_update)
    
    if update.officer_id:
        app.assigned_officer_id = update.officer_id
    
    db.commit()
    db.refresh(app)
    
    # Return updated application
    return await get_application(application_id, db)

@router.get("/{visa_type}/questions", response_model=FormQuestionsResponse)
async def get_questions_for_visa_type(visa_type: str):
    """Get dynamic form questions for a visa type"""
    
    # Call the utility function with proper name
    questions = get_visa_form_questions(visa_type, {})
    return FormQuestionsResponse(questions=questions)

@router.get("/{visa_type}/requirements")
async def get_document_requirements(visa_type: str):
    """Get document requirements for a visa type"""
    
    requirements = DOCUMENT_REQUIREMENTS.get(visa_type, {"mandatory": [], "optional": []})
    
    return {
        "visa_type": visa_type,
        "mandatory_documents": requirements["mandatory"],
        "optional_documents": requirements["optional"],
        "total_mandatory": len(requirements["mandatory"]),
        "total_optional": len(requirements["optional"])
    }

@router.post("/{application_id}/documents")
async def add_documents_to_application(
    application_id: str,
    documents: List[dict],
    db: Session = Depends(get_db)
):
    """Add documents to an existing application and update status if requirements met"""
    
    app = db.query(Application).filter(Application.id == application_id).first()
    if not app:
        raise HTTPException(status_code=404, detail="Application not found")
    
    # Add documents
    for doc_data in documents:
        document = Document(
            id=generate_id("doc"),
            application_id=application_id,
            name=doc_data.get("name", "Unknown Document"),
            type=doc_data.get("type", "unknown"),
            size=doc_data.get("size", 0),
            verified=doc_data.get("verified", False)
        )
        db.add(document)
    
    # Check if document requirements are now met
    doc_status = check_document_requirements(application_id, app.visa_type, db)
    
    # Update application status if requirements are now met
    old_status = app.status
    if doc_status["requirements_met"] and app.status == "document_collection":
        app.status = "document_review"
        
        # Create status update for progression
        status_update = StatusUpdate(
            id=generate_id("status"),
            application_id=application_id,
            status="document_review",
            notes="All required documents uploaded - processing can now continue",
            timestamp=datetime.utcnow()
        )
        db.add(status_update)
    
    # Create status update for document addition
    status_update = StatusUpdate(
        id=generate_id("status"),
        application_id=application_id,
        status=app.status,
        notes=f"Added {len(documents)} supporting documents",
        timestamp=datetime.utcnow()
    )
    db.add(status_update)
    
    # Update last activity
    app.updated_at = datetime.utcnow()
    
    db.commit()
    
    return {
        "message": f"Added {len(documents)} documents to application {application_id}",
        "requirements_met": doc_status["requirements_met"],
        "status_changed": old_status != app.status,
        "new_status": app.status,
        "document_status": doc_status
    }

# Utility functions
def get_estimated_days(status: str, visa_type: str, requirements_met: bool = True) -> int:
    """Calculate estimated processing days based on status, visa type, and document status"""
    
    # If requirements not met, processing hasn't started
    if not requirements_met:
        return 0
    
    base_days = {
        "tourist": 7,
        "business": 10,
        "student": 21,
        "work": 30,
        "family_visit": 14,
        "transit": 3
    }
    
    status_multipliers = {
        "document_collection": 0,  # No processing until docs uploaded
        "submitted": 1.0,
        "document_review": 0.8,
        "background_check": 0.6,
        "officer_review": 0.3,
        "approved": 0,
        "rejected": 0
    }
    
    base = base_days.get(visa_type, 10)
    multiplier = status_multipliers.get(status, 1.0)
    
    return max(1, int(base * multiplier))

def get_priority_from_risk(risk_score: int) -> str:
    """Determine priority based on risk score"""
    if risk_score >= 80:
        return "urgent"
    elif risk_score >= 60:
        return "high"
    elif risk_score >= 30:
        return "normal"
    else:
        return "low"
</file>

<file path="app/frontend/visaverge-user/components/Embassy/EmbassyDashboard.tsx">
'use client'

import { useState, useEffect } from 'react'
import { 
  Users, 
  CheckCircle2, 
  Clock, 
  AlertTriangle, 
  Filter, 
  Search,
  FileText,
  TrendingUp,
  Eye,
  MoreVertical,
  BarChart3
} from 'lucide-react'
import { Officer, EmbassyApplication } from '@/types/embassy.types'
import { api, apiUtils } from '@/utils/api'
import ApplicationReview from './ApplicationReview'
import AnalyticsDashboard from './AnalyticsDashboard'

interface EmbassyDashboardProps {
  officer: Officer
  onLogout: () => void
}

const mockApplications: EmbassyApplication[] = [
  {
    id: 'VSV-240101-A1B2',
    applicantName: 'Sarah Johnson',
    visaType: 'Business',
    status: 'officer_review',
    submittedAt: new Date('2024-01-15'),
    priority: 'high',
    country: 'United States',
    documentsCount: 4,
    riskScore: 15,
    estimatedDays: 2,
    lastActivity: new Date()
  },
  {
    id: 'VSV-240102-C3D4',
    applicantName: 'Miguel Rodriguez',
    visaType: 'Tourist',
    status: 'document_review',
    submittedAt: new Date('2024-01-16'),
    priority: 'normal',
    country: 'Spain',
    documentsCount: 5,
    riskScore: 8,
    estimatedDays: 5,
    lastActivity: new Date(Date.now() - 2 * 60 * 60 * 1000)
  },
  {
    id: 'VSV-240103-E5F6',
    applicantName: 'Anna Chen',
    visaType: 'Student',
    status: 'background_check',
    submittedAt: new Date('2024-01-14'),
    priority: 'normal',
    country: 'China',
    documentsCount: 6,
    riskScore: 12,
    estimatedDays: 7,
    lastActivity: new Date(Date.now() - 4 * 60 * 60 * 1000)
  },
  {
    id: 'VSV-240104-G7H8',
    applicantName: 'James Wilson',
    visaType: 'Work',
    status: 'submitted',
    submittedAt: new Date('2024-01-17'),
    priority: 'urgent',
    country: 'United Kingdom',
    documentsCount: 3,
    riskScore: 25,
    estimatedDays: 1,
    lastActivity: new Date(Date.now() - 30 * 60 * 1000)
  }
]

export default function EmbassyDashboard({ officer, onLogout }: EmbassyDashboardProps) {
  const [applications, setApplications] = useState<EmbassyApplication[]>([])
  const [selectedApplication, setSelectedApplication] = useState<EmbassyApplication | null>(null)
  const [filterStatus, setFilterStatus] = useState<string>('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [currentView, setCurrentView] = useState<'dashboard' | 'review' | 'analytics'>('dashboard')
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState('')

  // Load applications from backend
  useEffect(() => {
    loadApplications()
  }, [filterStatus, searchTerm])

  const loadApplications = async () => {
    try {
      setIsLoading(true)
      const filters: any = {}
      if (filterStatus !== 'all') filters.status = filterStatus
      if (searchTerm) filters.search = searchTerm

      const response = await api.getApplications(filters)
      
      // Transform response to match frontend types
      const transformedApps: EmbassyApplication[] = response.map((app: any) => ({
        id: app.id,
        applicantName: app.applicantName || app.answers?.applicant_name || 'Unknown',
        visaType: app.visaType,
        status: app.status,
        submittedAt: new Date(app.submittedAt || app.createdAt),
        priority: app.priority || 'normal',
        country: app.country || app.answers?.destination_country || 'Unknown',
        documentsCount: app.documentsCount || 0,
        riskScore: app.riskScore || 0,
        estimatedDays: app.estimatedDays || 0,
        lastActivity: new Date(app.lastActivity || app.updatedAt)
      }))

      setApplications(transformedApps)
      setError('')
    } catch (err: any) {
      console.error('Error loading applications:', err)
      setError('Failed to load applications')
      
      // Fallback to mock data if backend fails
      setApplications(mockApplications)
    } finally {
      setIsLoading(false)
    }
  }

  // Filter and search applications
  const filteredApplications = applications.filter(app => {
    const matchesFilter = filterStatus === 'all' || app.status === filterStatus
    const matchesSearch = app.applicantName.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         app.id.toLowerCase().includes(searchTerm.toLowerCase())
    return matchesFilter && matchesSearch
  })

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'approved': return 'badge-success'
      case 'rejected': return 'badge-error'
      case 'officer_review': return 'badge-warning'
      case 'background_check': return 'badge-info'
      case 'document_review': return 'badge-primary'
      default: return 'badge-ghost'
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'urgent': return 'text-red-600'
      case 'high': return 'text-orange-600'
      case 'normal': return 'text-blue-600'
      default: return 'text-gray-600'
    }
  }

  const getRiskColor = (score: number) => {
    if (score < 10) return 'text-green-600'
    if (score < 20) return 'text-yellow-600'
    return 'text-red-600'
  }

  const handleReviewApplication = (application: EmbassyApplication) => {
    setSelectedApplication(application)
    setCurrentView('review')
  }

  const handleUpdateStatus = async (applicationId: string, newStatus: EmbassyApplication['status']) => {
    try {
      await api.updateApplicationStatus(applicationId, {
        status: newStatus,
        officer_id: officer.id,
        notes: `Status updated to ${newStatus} by ${officer.name}`
      })

      // Update local state
      setApplications(prev => 
        prev.map(app => 
          app.id === applicationId 
            ? { ...app, status: newStatus, lastActivity: new Date() }
            : app
        )
      )
    } catch (error) {
      console.error('Error updating application status:', error)
      // Fallback to local update for demo
      setApplications(prev => 
        prev.map(app => 
          app.id === applicationId 
            ? { ...app, status: newStatus, lastActivity: new Date() }
            : app
        )
      )
    }
  }

  const stats = {
    total: applications.length,
    pending: applications.filter(app => !['approved', 'rejected'].includes(app.status)).length,
    approved: applications.filter(app => app.status === 'approved').length,
    avgProcessingTime: 8
  }

  if (currentView === 'review' && selectedApplication) {
    return (
      <ApplicationReview 
        application={selectedApplication}
        onBack={() => setCurrentView('dashboard')}
        onUpdateStatus={handleUpdateStatus}
        officer={officer}
      />
    )
  }

  if (currentView === 'analytics') {
    return (
      <AnalyticsDashboard 
        onBack={() => setCurrentView('dashboard')}
        officer={officer}
      />
    )
  }

  return (
    <div className="min-h-screen bg-base-200">
      {/* Header */}
      <div className="navbar bg-base-100 shadow-lg">
        <div className="flex-1">
          <h1 className="text-2xl font-bold text-primary">
            🏛️ Embassy Portal
          </h1>
        </div>
        <div className="flex-none gap-2">
          <button 
            className="btn btn-outline btn-sm"
            onClick={() => setCurrentView('analytics')}
          >
            <BarChart3 className="w-4 h-4 mr-2" />
            Analytics
          </button>
          <div className="dropdown dropdown-end">
            <div tabIndex={0} role="button" className="btn btn-ghost btn-circle avatar">
              <div className="w-10 rounded-full bg-primary text-white flex items-center justify-center">
                {officer.name.charAt(0)}
              </div>
            </div>
            <ul tabIndex={0} className="menu menu-sm dropdown-content mt-3 z-[1] p-2 shadow bg-base-100 rounded-box w-52">
              <li><a>Profile</a></li>
              <li><a>Settings</a></li>
              <li><a onClick={onLogout}>Logout</a></li>
            </ul>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Welcome Section */}
        <div className="mb-6">
          <h2 className="text-3xl font-bold mb-2">Welcome back, {officer.name.split(' ')[1]}</h2>
          <p className="text-gray-600">Manage visa applications and track processing status</p>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <FileText className="w-8 h-8 text-primary" />
                <div>
                  <p className="text-2xl font-bold">{stats.total}</p>
                  <p className="text-sm text-gray-600">Total Applications</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <Clock className="w-8 h-8 text-warning" />
                <div>
                  <p className="text-2xl font-bold">{stats.pending}</p>
                  <p className="text-sm text-gray-600">Pending Review</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <CheckCircle2 className="w-8 h-8 text-success" />
                <div>
                  <p className="text-2xl font-bold">{stats.approved}</p>
                  <p className="text-sm text-gray-600">Approved Today</p>
                </div>
              </div>
            </div>
          </div>

          <div className="card bg-base-100 shadow">
            <div className="card-body">
              <div className="flex items-center gap-3">
                <TrendingUp className="w-8 h-8 text-info" />
                <div>
                  <p className="text-2xl font-bold">{stats.avgProcessingTime}d</p>
                  <p className="text-sm text-gray-600">Avg Processing</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Search and Filters */}
        <div className="card bg-base-100 shadow mb-6">
          <div className="card-body">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="form-control">
                  <div className="input-group">
                    <input 
                      type="text" 
                      placeholder="Search by name or application ID..." 
                      className="input input-bordered flex-1"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                    />
                    <button className="btn btn-square">
                      <Search className="w-5 h-5" />
                    </button>
                  </div>
                </div>
              </div>
              
              <div className="flex gap-2">
                <select 
                  className="select select-bordered"
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                >
                  <option value="all">All Status</option>
                  <option value="submitted">Submitted</option>
                  <option value="document_review">Document Review</option>
                  <option value="background_check">Background Check</option>
                  <option value="officer_review">Officer Review</option>
                  <option value="approved">Approved</option>
                  <option value="rejected">Rejected</option>
                </select>
                
                <button className="btn btn-outline">
                  <Filter className="w-5 h-5" />
                  More Filters
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Applications Table */}
        <div className="card bg-base-100 shadow">
          <div className="card-body">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-bold">Application Queue</h3>
              <span className="badge badge-outline">{filteredApplications.length} applications</span>
            </div>

            <div className="overflow-x-auto">
              <table className="table table-zebra w-full">
                <thead>
                  <tr>
                    <th>Application ID</th>
                    <th>Applicant</th>
                    <th>Visa Type</th>
                    <th>Status</th>
                    <th>Priority</th>
                    <th>Risk Score</th>
                    <th>Submitted</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredApplications.map((app) => (
                    <tr key={app.id} className="hover">
                      <td>
                        <div className="font-mono text-sm">{app.id}</div>
                      </td>
                      <td>
                        <div className="flex items-center gap-3">
                          <div className="avatar">
                            <div className="w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center text-sm">
                              {app.applicantName.split(' ').map(n => n[0]).join('')}
                            </div>
                          </div>
                          <div>
                            <div className="font-semibold">{app.applicantName}</div>
                            <div className="text-sm text-gray-600">{app.country}</div>
                          </div>
                        </div>
                      </td>
                      <td>
                        <span className="badge badge-outline">{app.visaType}</span>
                      </td>
                      <td>
                        <span className={`badge ${getStatusColor(app.status)}`}>
                          {app.status.replace('_', ' ')}
                        </span>
                      </td>
                      <td>
                        <span className={`font-semibold ${getPriorityColor(app.priority)}`}>
                          {app.priority.toUpperCase()}
                        </span>
                      </td>
                      <td>
                        <span className={`font-bold ${getRiskColor(app.riskScore)}`}>
                          {app.riskScore}%
                        </span>
                      </td>
                      <td>
                        <div className="text-sm">
                          {app.submittedAt.toLocaleDateString()}
                        </div>
                      </td>
                      <td>
                        <button 
                          className="btn btn-sm btn-primary"
                          onClick={() => handleReviewApplication(app)}
                        >
                          <Eye className="w-4 h-4" />
                          Review
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/Embassy/EmbassyLogin.tsx">
'use client'

import { useState } from 'react'
import { 
  Shield, 
  Eye, 
  EyeOff, 
  Lock,
  User,
  Building
} from 'lucide-react'
import { LoginCredentials, Officer, MOCK_EMBASSIES, MOCK_OFFICERS } from '@/types/embassy.types'
import { api, apiUtils } from '@/utils/api'

interface EmbassyLoginProps {
  onLogin: (officer: Officer) => void
}

export default function EmbassyLogin({ onLogin }: EmbassyLoginProps) {
  const [credentials, setCredentials] = useState<LoginCredentials>({
    officerId: '',
    password: '',
    embassy: ''
  })
  const [showPassword, setShowPassword] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState('')

  const handleSubmit = async () => {
    setIsLoading(true)
    setError('')

    try {
      // Use real backend authentication
      const response = await api.officerLogin({
        officer_id: credentials.officerId,
        password: credentials.password,
        embassy: credentials.embassy
      })

      // Successful login
      onLogin({
        id: response.id,
        name: response.name,
        role: response.role,
        embassy: credentials.embassy
      })
    } catch (error: any) {
      console.error('Login error:', error)
      setError(apiUtils.formatErrorMessage(error))
    } finally {
      setIsLoading(false)
    }
  }

  const handleDemoLogin = (officerId: string) => {
    setCredentials({
      officerId,
      password: MOCK_OFFICERS[officerId as keyof typeof MOCK_OFFICERS].password,
      embassy: 'us_berlin'
    })
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-gray-50 to-blue-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full">
        {/* Header */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 bg-primary rounded-full">
              <Shield className="w-8 h-8 text-white" />
            </div>
            <h1 className="text-3xl font-bold text-gray-800">VisaVerge</h1>
          </div>
          <h2 className="text-xl font-semibold text-gray-700 mb-2">Embassy Portal</h2>
          <p className="text-gray-600">Secure access for consular officers</p>
        </div>

        {/* Login Card */}
        <div className="card bg-base-100 shadow-xl">
          <div className="card-body">
            <div className="space-y-4">
              {/* Embassy Selection */}
              <div className="form-control">
                <label className="label">
                  <span className="label-text flex items-center gap-2">
                    <Building className="w-4 h-4" />
                    Embassy Location
                  </span>
                </label>
                <select 
                  className="select select-bordered w-full"
                  value={credentials.embassy}
                  onChange={(e) => setCredentials(prev => ({ ...prev, embassy: e.target.value }))}
                  required
                >
                  <option value="">Select your embassy</option>
                  {MOCK_EMBASSIES.map(embassy => (
                    <option key={embassy.id} value={embassy.id}>
                      {embassy.name} - {embassy.location}
                    </option>
                  ))}
                </select>
              </div>

              {/* Officer ID */}
              <div className="form-control">
                <label className="label">
                  <span className="label-text flex items-center gap-2">
                    <User className="w-4 h-4" />
                    Officer ID
                  </span>
                </label>
                <input 
                  type="text" 
                  placeholder="Enter your officer ID"
                  className="input input-bordered w-full" 
                  value={credentials.officerId}
                  onChange={(e) => setCredentials(prev => ({ ...prev, officerId: e.target.value }))}
                  required
                />
              </div>

              {/* Password */}
              <div className="form-control">
                <label className="label">
                  <span className="label-text flex items-center gap-2">
                    <Lock className="w-4 h-4" />
                    Password
                  </span>
                </label>
                <div className="relative">
                  <input 
                    type={showPassword ? 'text' : 'password'}
                    placeholder="Enter your password"
                    className="input input-bordered w-full pr-12" 
                    value={credentials.password}
                    onChange={(e) => setCredentials(prev => ({ ...prev, password: e.target.value }))}
                    required
                  />
                  <button
                    type="button"
                    className="absolute right-3 top-1/2 transform -translate-y-1/2"
                    onClick={() => setShowPassword(!showPassword)}
                  >
                    {showPassword ? <EyeOff className="w-5 h-5 text-gray-400" /> : <Eye className="w-5 h-5 text-gray-400" />}
                  </button>
                </div>
              </div>

              {/* Error Message */}
              {error && (
                <div className="alert alert-error">
                  <svg xmlns="http://www.w3.org/2000/svg" className="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                  <span>{error}</span>
                </div>
              )}

              {/* Login Button */}
              <button 
                onClick={handleSubmit}
                className="btn btn-primary w-full"
                disabled={isLoading}
              >
                {isLoading ? (
                  <>
                    <span className="loading loading-spinner loading-sm"></span>
                    Authenticating...
                  </>
                ) : (
                  <>
                    <Shield className="w-5 h-5 mr-2" />
                    Secure Login
                  </>
                )}
              </button>
            </div>

            {/* Demo Credentials */}
            <div className="divider">Demo Access</div>
            
            <div className="space-y-2">
              <button 
                className="btn btn-ghost btn-sm w-full justify-start"
                onClick={() => handleDemoLogin('maria.schmidt')}
              >
                <User className="w-4 h-4 mr-2" />
                Officer Maria Schmidt (Senior)
              </button>
              <button 
                className="btn btn-ghost btn-sm w-full justify-start"
                onClick={() => handleDemoLogin('john.davis')}
              >
                <User className="w-4 h-4 mr-2" />
                Officer John Davis (Standard)
              </button>
              <button 
                className="btn btn-ghost btn-sm w-full justify-start"
                onClick={() => handleDemoLogin('admin')}
              >
                <Shield className="w-4 h-4 mr-2" />
                Administrator Access
              </button>
            </div>
          </div>
        </div>

        {/* Security Notice */}
        <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-start gap-3">
            <Shield className="w-5 h-5 text-blue-600 mt-0.5" />
            <div>
              <h4 className="font-semibold text-blue-900 text-sm">Security Notice</h4>
              <p className="text-blue-800 text-xs mt-1">
                This is a secure government system. All activities are logged and monitored.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/frontend/visaverge-user/components/ChatInterface.tsx">
'use client'

import { useState, useRef, useEffect } from 'react'
import { Send, Bot, User, Sparkles } from 'lucide-react'
import { Message, VisaType } from '@/types'
import { api, apiUtils } from '@/utils/api'
import { Button, Badge } from '@/components/UI'
import { useAlertStore } from '@/lib/stores/alert.store'

interface ChatInterfaceProps {
  onVisaTypeSelected?: (visaType: VisaType) => void
}

export default function ChatInterface({ onVisaTypeSelected }: ChatInterfaceProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: "Hi! I'm AVA, your AI visa assistant. I can help you find the right visa and guide you through the application process. What type of travel are you planning? 🛂✈️",
      sender: 'ava',
      timestamp: new Date()
    }
  ])
  const [input, setInput] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [sessionId] = useState(() => apiUtils.generateSessionId())
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const { showError, showSuccess } = useAlertStore()
  const [isBackendAvailable, setIsBackendAvailable] = useState(true)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  // Check backend availability on component mount
  useEffect(() => {
    checkBackendHealth()
  }, [])

  const checkBackendHealth = async () => {
    const available = await apiUtils.isBackendAvailable()
    setIsBackendAvailable(available)
    
    if (!available) {
      showError('Backend not available - using demo mode')
    }
  }

  const sendMessage = async () => {
    if (!input.trim() || isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: input.trim(),
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInput('')
    setIsLoading(true)

    try {
      if (!isBackendAvailable) {
        // Fallback to mock response
        const mockResponse = getMockChatResponse(input.trim())
        const avaMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: mockResponse.response,
          sender: 'ava',
          timestamp: new Date(),
          metadata: {
            suggestedVisaType: mockResponse.suggestedVisaType,
            nextAction: mockResponse.nextAction,
            confidence: mockResponse.confidence
          }
        }
        setMessages(prev => [...prev, avaMessage])
        
        // Trigger visa type selection if needed
        if (mockResponse.nextAction === 'start_form' && mockResponse.suggestedVisaType && onVisaTypeSelected) {
          setTimeout(() => {
            onVisaTypeSelected(mockResponse.suggestedVisaType!)
          }, 1000)
        }
      } else {
        // Use real backend
        const response = await api.chat(input.trim(), sessionId)
        
        const avaMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: response.response,
          sender: 'ava',
          timestamp: new Date(),
          metadata: {
            suggestedVisaType: response.suggestedVisaType,
            nextAction: response.nextAction,
            confidence: response.confidence
          }
        }

        setMessages(prev => [...prev, avaMessage])

        // If AVA suggests starting a form, trigger the callback
        if (response.nextAction === 'start_form' && response.suggestedVisaType && onVisaTypeSelected) {
          showSuccess(`Starting ${response.suggestedVisaType} visa application!`)
          setTimeout(() => {
            onVisaTypeSelected(response.suggestedVisaType!)
          }, 1000)
        }
      }
    } catch (error) {
      console.error('Error sending message:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: "I'm sorry, I'm having trouble connecting right now. Please try again in a moment.",
        sender: 'ava',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
      showError('Failed to send message - please try again')
    } finally {
      setIsLoading(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      sendMessage()
    }
  }

  const quickReplies = [
    "I need a tourist visa",
    "Business visa application", 
    "Student visa help",
    "Family visit visa"
  ]

  const handleQuickReply = (reply: string) => {
    setInput(reply)
    setTimeout(() => sendMessage(), 100)
  }

  return (
    <div className="flex flex-col h-full bg-base-100 rounded-lg shadow-lg overflow-hidden border border-base-300">
      {/* Header */}
      <div className="bg-gradient-to-r from-primary to-secondary text-white p-4">
        <div className="flex items-center gap-3">
          <div className="relative">
            <div className="avatar">
              <div className="w-10 rounded-full bg-base-100">
                <Bot className="w-6 h-6 text-primary m-2" />
              </div>
            </div>
            <div className={`absolute -top-1 -right-1 w-3 h-3 rounded-full animate-pulse ${
              isBackendAvailable ? 'bg-success' : 'bg-warning'
            }`} />
          </div>
          <div>
            <h3 className="font-semibold text-lg flex items-center gap-2">
              AVA - AI Visa Assistant
              <Badge variant="ghost" className="text-xs bg-white/20 text-white border-white/30">
                <Sparkles className="w-3 h-3 mr-1" />
                {isBackendAvailable ? 'AI' : 'Demo'}
              </Badge>
            </h3>
            <p className="text-primary-content/70 text-sm">
              {isBackendAvailable ? 'Online • Ready to help' : 'Demo mode • Limited functionality'}
            </p>
          </div>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 bg-base-50">
        {messages.map(message => (
          <div
            key={message.id}
            className={`chat ${message.sender === 'user' ? 'chat-end' : 'chat-start'} chat-message`}
          >
            <div className="chat-image avatar">
              <div className="w-8 rounded-full">
                {message.sender === 'ava' ? (
                  <div className="bg-primary text-white rounded-full flex items-center justify-center w-8 h-8">
                    <Bot className="w-5 h-5" />
                  </div>
                ) : (
                  <div className="bg-neutral text-white rounded-full flex items-center justify-center w-8 h-8">
                    <User className="w-5 h-5" />
                  </div>
                )}
              </div>
            </div>
            
            <div className={`chat-bubble ${
              message.sender === 'user' 
                ? 'chat-bubble-primary' 
                : 'chat-bubble-secondary'
            }`}>
              <p className="whitespace-pre-wrap leading-relaxed">{message.text}</p>
              
              {/* Show confidence for AVA messages */}
              {message.sender === 'ava' && message.metadata?.confidence && (
                <div className="mt-2 pt-2 border-t border-white/20">
                  <Badge variant="ghost" size="xs" className="bg-white/20 text-white border-white/30">
                    <Sparkles className="w-3 h-3 mr-1" />
                    {Math.round(message.metadata.confidence * 100)}% confident
                  </Badge>
                </div>
              )}
            </div>
            
            <div className="chat-footer opacity-50 text-xs">
              {message.timestamp.toLocaleTimeString()}
            </div>
          </div>
        ))}

        {/* Loading indicator */}
        {isLoading && (
          <div className="chat chat-start">
            <div className="chat-image avatar">
              <div className="w-8 rounded-full">
                <div className="bg-primary text-white rounded-full flex items-center justify-center w-8 h-8">
                  <Bot className="w-5 h-5" />
                </div>
              </div>
            </div>
            <div className="chat-bubble chat-bubble-secondary">
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-current rounded-full animate-bounce" />
                <div 
                  className="w-2 h-2 bg-current rounded-full animate-bounce" 
                  style={{ animationDelay: '0.1s' }} 
                />
                <div 
                  className="w-2 h-2 bg-current rounded-full animate-bounce" 
                  style={{ animationDelay: '0.2s' }} 
                />
              </div>
            </div>
          </div>
        )}
        
        <div ref={messagesEndRef} />
      </div>

      {/* Quick Replies */}
      {messages.length === 1 && (
        <div className="px-4 py-3 bg-base-200 border-t border-base-300">
          <p className="text-xs opacity-60 mb-2">Quick options:</p>
          <div className="flex flex-wrap gap-2">
            {quickReplies.map((reply, index) => (
              <Button
                key={index}
                variant="ghost"
                size="xs"
                onClick={() => handleQuickReply(reply)}
                className="text-xs"
              >
                {reply}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Input Area */}
      <div className="p-4 bg-base-100 border-t border-base-300">
        <div className="flex gap-2">
          <div className="flex-1">
            <textarea
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Ask AVA anything about visas..."
              className="textarea textarea-bordered w-full resize-none"
              rows={1}
              disabled={isLoading}
            />
          </div>
          <Button
            onClick={sendMessage}
            disabled={!input.trim() || isLoading}
            loading={isLoading}
            className="btn-circle"
          >
            <Send className="w-4 h-4" />
          </Button>
        </div>
        <p className="text-xs opacity-50 mt-2 text-center">
          AVA can make mistakes. Please verify important information.
          {!isBackendAvailable && ' • Currently in demo mode'}
        </p>
      </div>
    </div>
  )
}

// Mock chat response for fallback
function getMockChatResponse(message: string): any {
  const lowerMessage = message.toLowerCase()
  
  if (lowerMessage.includes('tourist') || lowerMessage.includes('vacation') || lowerMessage.includes('holiday')) {
    return {
      response: "Perfect! For a tourist visa, you'll typically need a passport, bank statements, travel insurance, and a travel itinerary. The process usually takes 5-10 business days. Would you like me to start your application?",
      suggestedVisaType: 'tourist',
      nextAction: 'start_form',
      confidence: 0.9
    }
  }
  
  if (lowerMessage.includes('business') || lowerMessage.includes('work') || lowerMessage.includes('conference')) {
    return {
      response: "Great! For a business visa, you'll need an invitation letter from the company, your employment details, and proof of business activities. This typically takes 7-15 business days. Shall we begin your application?",
      suggestedVisaType: 'business',
      nextAction: 'start_form',
      confidence: 0.85
    }
  }
  
  return {
    response: "I'm running in demo mode. I can help you with tourist, business, student, work, or family visit visas. What type of travel are you planning?",
    nextAction: 'continue_chat',
    confidence: 0.5
  }
}
</file>

<file path="app/frontend/visaverge-user/types/index.ts">
// types/index.ts

export interface Message {
  id: string
  text: string
  sender: 'user' | 'ava'
  timestamp: Date
  metadata?: {
    suggestedVisaType?: string
    nextAction?: string
    confidence?: number
  }
}

export interface Question {
  id: string
  text: string
  type: 'text' | 'select' | 'number' | 'date' | 'file'
  options?: string[]
  required?: boolean
  validation?: {
    min?: number
    max?: number
    pattern?: string
    message?: string
  }
  dependsOn?: {
    questionId: string
    value: any
  }
}

export interface VisaApplication {
  id: string
  userId: string
  visaType: string
  status: ApplicationStatus
  answers: Record<string, any>
  documents: Document[]
  createdAt: Date
  updatedAt: Date
  submittedAt?: Date
  estimatedDecision?: Date
  approvalProbability?: number
}

export interface Document {
  id: string
  name: string
  type: DocumentType
  size: number
  uploadedAt: Date
  verified: boolean
  url?: string
}

export type ApplicationStatus = 
  | 'draft'
  | 'submitted' 
  | 'document_review'
  | 'background_check'
  | 'officer_review'
  | 'approved'
  | 'rejected'
  | 'requires_interview'

export type DocumentType = 
  | 'passport'
  | 'photo'
  | 'bank_statement'
  | 'invitation_letter'
  | 'travel_insurance'
  | 'employment_letter'
  | 'flight_itinerary'

export type VisaType = 
  | 'tourist'
  | 'business' 
  | 'student'
  | 'work'
  | 'family_visit'
  | 'transit'

export interface ChatResponse {
  response: string
  suggestedVisaType?: VisaType
  nextAction: 'continue_chat' | 'start_form' | 'upload_documents' | 'submit_application'
  confidence?: number
  followUpQuestions?: string[]
}

export * from './embassy.types'
</file>

<file path="app/frontend/visaverge-user/utils/api.ts">
// app/frontend/visaverge-user/utils/api.ts - Updated API integration with new flow

import { ChatResponse, Question, VisaApplication, VisaType } from '@/types'

const API_BASE = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api'

// API Client with error handling
class APIClient {
  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<T> {
    const url = `${API_BASE}${endpoint}`
    
    const config: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
      ...options,
    }

    try {
      const response = await fetch(url, config)
      
      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}))
        throw new Error(errorData.detail || `HTTP ${response.status}: ${response.statusText}`)
      }
      
      return await response.json()
    } catch (error) {
      console.error(`API Error [${endpoint}]:`, error)
      throw error
    }
  }

  // Chat with AVA
  async chat(message: string, sessionId?: string): Promise<ChatResponse> {
    const response = await this.request<any>('/chat/', {
      method: 'POST',
      body: JSON.stringify({ 
        message,
        session_id: sessionId 
      }),
    })

    // Transform backend response to frontend format
    return {
      response: response.response,
      suggestedVisaType: response.suggested_visa_type,
      nextAction: response.next_action,
      confidence: response.confidence,
      followUpQuestions: response.follow_up_questions || []
    }
  }

  // Get form questions for a visa type
  async getFormQuestions(visaType: VisaType, currentAnswers: Record<string, any> = {}): Promise<Question[]> {
    const response = await this.request<{ questions: Question[] }>(`/applications/${visaType}/questions`, {
      method: 'GET'
    })
    
    return response.questions
  }

  // Submit visa application (NEW: without requiring documents)
  async submitApplication(application: {
    visaType: VisaType
    answers: Record<string, any>
    documents?: any[]
    password?: string
  }): Promise<VisaApplication> {
    const response = await this.request<any>('/applications/', {
      method: 'POST',
      body: JSON.stringify({
        visa_type: application.visaType,
        answers: application.answers,
        documents: application.documents || [], // Empty array if no documents
        password: application.password // Store password for later access
      }),
    })

    // Transform backend response to frontend format
    return this.transformApplicationResponse(response)
  }

  // Upload documents to existing application (NEW)
  async uploadDocumentsToApplication(
    applicationId: string,
    documents: Array<{ file: File; type: string }>
  ): Promise<any[]> {
    const uploadPromises = documents.map(async ({ file, type }) => {
      const formData = new FormData()
      formData.append('file', file)
      formData.append('application_id', applicationId)
      formData.append('document_type', type)

      const response = await fetch(`${API_BASE}/documents/upload`, {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error(`Upload failed for ${file.name}: ${response.statusText}`)
      }

      return await response.json()
    })

    return await Promise.all(uploadPromises)
  }

  // Get application status with password validation (NEW)
  async getApplicationWithPassword(applicationId: string, password: string): Promise<VisaApplication> {
    const response = await this.request<any>(`/applications/${applicationId}/verify`, {
      method: 'POST',
      body: JSON.stringify({ password }),
    })
    return this.transformApplicationResponse(response)
  }

  // Get application status (existing)
  async getApplicationStatus(applicationId: string): Promise<VisaApplication> {
    const response = await this.request<any>(`/applications/${applicationId}`)
    return this.transformApplicationResponse(response)
  }

  // Get all applications (for embassy dashboard)
  async getApplications(filters: { status?: string; search?: string } = {}): Promise<VisaApplication[]> {
    const params = new URLSearchParams()
    if (filters.status) params.append('status', filters.status)
    if (filters.search) params.append('search', filters.search)
    
    const queryString = params.toString()
    const endpoint = queryString ? `/applications/?${queryString}` : '/applications/'
    
    const response = await this.request<any[]>(endpoint)
    return response.map(app => this.transformApplicationResponse(app))
  }

  // Update application status (embassy officer)
  async updateApplicationStatus(
    applicationId: string, 
    update: { status?: string; notes?: string; officer_id?: string }
  ): Promise<VisaApplication> {
    const response = await this.request<any>(`/applications/${applicationId}`, {
      method: 'PUT',
      body: JSON.stringify(update),
    })
    
    return this.transformApplicationResponse(response)
  }

  // Officer authentication
  async officerLogin(credentials: {
    officer_id: string
    password: string
    embassy: string
  }): Promise<any> {
    return await this.request<any>('/officers/login', {
      method: 'POST',
      body: JSON.stringify(credentials),
    })
  }

  // Get analytics data
  async getAnalytics(filters: { embassy_id?: string; days?: number } = {}): Promise<any> {
    const params = new URLSearchParams()
    if (filters.embassy_id) params.append('embassy_id', filters.embassy_id)
    if (filters.days) params.append('days', filters.days.toString())
    
    const queryString = params.toString()
    const endpoint = queryString ? `/analytics/dashboard?${queryString}` : '/analytics/dashboard'
    
    return await this.request<any>(endpoint)
  }

  // Upload single document (legacy support)
  async uploadDocument(
    applicationId: string,
    documentType: string,
    file: File
  ): Promise<any> {
    const formData = new FormData()
    formData.append('file', file)
    formData.append('application_id', applicationId)
    formData.append('document_type', documentType)

    const response = await fetch(`${API_BASE}/documents/upload`, {
      method: 'POST',
      body: formData,
    })

    if (!response.ok) {
      throw new Error(`Upload failed: ${response.statusText}`)
    }

    return await response.json()
  }

  // Get chat history
  async getChatHistory(sessionId: string): Promise<any[]> {
    return await this.request<any[]>(`/chat/history/${sessionId}`)
  }

  // Health check
  async healthCheck(): Promise<{ status: string }> {
    return await this.request<{ status: string }>('/health')
  }

  // Generate QR code data (NEW)
  generateQRCodeData(applicationId: string): string {
    const baseUrl = typeof window !== 'undefined' ? window.location.origin : 'https://visaverge.com'
    return `${baseUrl}/status?id=${applicationId}`
  }

  // Validate application access (NEW)
  validateApplicationAccess(applicationId: string, password: string): boolean {
    // In a real app, this would make an API call
    // For demo, we check localStorage
    if (typeof window !== 'undefined') {
      const storedPassword = localStorage.getItem(`app_${applicationId}_password`)
      return storedPassword === password
    }
    return false
  }

  // Store application credentials (NEW)
  storeApplicationCredentials(applicationId: string, password: string): void {
    if (typeof window !== 'undefined') {
      localStorage.setItem(`app_${applicationId}_password`, password)
      localStorage.setItem(`app_${applicationId}_created`, new Date().toISOString())
    }
  }

  // Clear application credentials (NEW)
  clearApplicationCredentials(applicationId: string): void {
    if (typeof window !== 'undefined') {
      localStorage.removeItem(`app_${applicationId}_password`)
      localStorage.removeItem(`app_${applicationId}_created`)
    }
  }

  // Transform backend application response to frontend format
  private transformApplicationResponse(backendApp: any): VisaApplication {
    return {
      id: backendApp.id,
      userId: backendApp.user_id,
      visaType: backendApp.visa_type,
      status: backendApp.status,
      answers: backendApp.answers || {},
      documents: backendApp.documents || [],
      createdAt: new Date(backendApp.submitted_at),
      updatedAt: new Date(backendApp.updated_at),
      submittedAt: backendApp.submitted_at ? new Date(backendApp.submitted_at) : undefined,
      estimatedDecision: backendApp.estimated_decision ? new Date(backendApp.estimated_decision) : undefined,
      approvalProbability: backendApp.approval_probability,
      
      // Additional fields from backend
      applicantName: backendApp.applicant_name || backendApp.answers?.applicant_name,
      country: backendApp.country || backendApp.answers?.destination_country,
      priority: backendApp.priority,
      riskScore: backendApp.risk_score,
      documentsCount: backendApp.documents_count || (backendApp.documents?.length || 0),
      estimatedDays: backendApp.estimated_days,
      lastActivity: backendApp.last_activity ? new Date(backendApp.last_activity) : new Date(backendApp.updated_at)
    }
  }
}

// Create API instance
export const api = new APIClient()

// Export additional utilities
export const apiUtils = {
  // Check if backend is available
  async isBackendAvailable(): Promise<boolean> {
    try {
      await api.healthCheck()
      return true
    } catch (error) {
      console.warn('Backend not available, falling back to mock data')
      return false
    }
  },

  // Generate session ID for chat
  generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
  },

  // Generate application ID (NEW)
  generateApplicationId(): string {
    const timestamp = Date.now().toString().slice(-6)
    const random = Math.random().toString(36).substring(2, 6).toUpperCase()
    return `VSV-${new Date().getFullYear()}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(new Date().getDate()).padStart(2, '0')}-${random}`
  },

  // Generate secure password (NEW)
  generateSecurePassword(): string {
    const adjectives = ['Swift', 'Bright', 'Clear', 'Quick', 'Smart', 'Safe', 'Fast', 'Bold', 'Strong', 'Secure']
    const nouns = ['Lion', 'Eagle', 'Tiger', 'Star', 'Moon', 'Sun', 'Wave', 'Wind', 'Rock', 'Tree']
    const numbers = Math.floor(Math.random() * 999) + 100
    
    const adj = adjectives[Math.floor(Math.random() * adjectives.length)]
    const noun = nouns[Math.floor(Math.random() * nouns.length)]
    
    return `${adj}${noun}${numbers}`
  },

  // Format error messages for users
  formatErrorMessage(error: any): string {
    if (error.message) {
      return error.message
    }
    
    if (typeof error === 'string') {
      return error
    }
    
    return 'An unexpected error occurred. Please try again.'
  },

  // Get status color helper (for UI components)
  getStatusColor(status: string): string {
    switch (status) {
      case 'approved':
        return 'text-green-600'
      case 'rejected':
        return 'text-red-600'
      case 'requires_interview':
        return 'text-yellow-600'
      case 'submitted':
        return 'text-blue-600'
      case 'document_review':
      case 'background_check':
      case 'officer_review':
        return 'text-purple-600'
      default:
        return 'text-gray-600'
    }
  },

  // Get priority color helper
  getPriorityColor(priority: string): string {
    switch (priority) {
      case 'urgent':
        return 'text-red-600'
      case 'high':
        return 'text-orange-600'
      case 'normal':
        return 'text-blue-600'
      default:
        return 'text-gray-600'
    }
  },

  // Get risk score color helper
  getRiskColor(score: number): string {
    if (score < 10) return 'text-green-600'
    if (score < 20) return 'text-yellow-600'
    return 'text-red-600'
  },

  // Create QR code URL (NEW)
  createQRCodeUrl(data: string, size: number = 200): string {
    return `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(data)}`
  },

  // Estimate processing time (NEW)
  estimateProcessingTime(visaType: VisaType, hasDocuments: boolean = false): number {
    const baseDays = {
      tourist: 7,
      business: 10,
      student: 21,
      work: 30,
      family_visit: 14,
      transit: 3
    }
    
    let days = baseDays[visaType] || 10
    
    // Reduce time if documents are provided
    if (hasDocuments) {
      days = Math.max(days - 2, 1)
    }
    
    return days
  },

  // Calculate approval probability (NEW)
  calculateApprovalProbability(
    visaType: VisaType, 
    answers: Record<string, any>, 
    documentCount: number = 0
  ): number {
    let probability = 70 // Base probability
    
    // Visa type factor
    const typeBonus = {
      tourist: 5,
      business: 0,
      student: -5,
      work: -10,
      family_visit: 5,
      transit: 10
    }
    
    probability += typeBonus[visaType] || 0
    
    // Document bonus
    probability += documentCount * 3
    
    // Answer quality (simplified)
    if (answers.employment_status === 'employed') probability += 5
    if (answers.previous_violations === false) probability += 10
    
    // Random factor for demo
    probability += Math.random() * 10 - 5
    
    return Math.max(Math.min(Math.round(probability), 95), 60)
  }
}
</file>

<file path=".gitignore">
./app/uploads/*


# Node.js dependencies across all projects
**/node_modules/
**/npm-debug.log*
**/yarn-debug.log*
**/yarn-error.log*
**/pnpm-debug.log*
**/.pnpm-debug.log*
**/package-lock.json
**/yarn.lock
**/pnpm-lock.yaml

# Environment variables
**/.env*
!**/.env.example
!**/.env.template

# Build outputs
**/dist/
**/build/
**/.next/
**/out/
**/.nuxt/
**/.output/
**/.vite/
**/.svelte-kit/

# Cache directories
**/.cache/
**/.tmp/
**/.temp/
**/tmp/
**/.turbo/
**/.nx/cache/

# TypeScript
**/*.tsbuildinfo
**/next-env.d.ts

# Testing
**/coverage/
**/.nyc_output/
**/test-results/
**/playwright-report/
**/test-results.xml

# Logs
**/logs/
**/*.log

# IDE and Editor files
.vscode/
.idea/
**/*.swp
**/*.swo
**/*~
**/.project
**/.classpath
**/.settings/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
**/Thumbs.db
**/.DS_Store

# Database files
**/*.db
**/*.sqlite
**/*.sqlite3

# Docker
**/.dockerignore
**/Dockerfile.dev
docker-compose.override.yml
.docker/

# Deployment
.vercel/
.netlify/
.firebase/

# Python (if you have Python services)
**/__pycache__/
**/*.pyc
**/*.pyo
**/*.pyd
**/.Python
**/pip-log.txt
**/pip-delete-this-directory.txt
**/.venv/
**/venv/
**/env/

# Go (if you have Go services)
**/vendor/

# Rust (if you have Rust services)
**/target/

# Java (if you have Java services)
**/*.class
**/*.jar
**/*.war
**/*.ear
**/target/

# Documentation builds
**/docs/_build/
**/site/

# Temporary files
**/*.tmp
**/*.temp
**/*.swp
**/*.swo
**/*.bak
**/*.backup

# Archive files
**/*.zip
**/*.tar.gz
**/*.rar
**/*.7z

# Security and secrets
**/secrets/
**/private/
**/*.pem
**/*.key
**/*.crt
**/*.p12
**/*.pfx

# Terraform (if you use IaC)
**/*.tfstate
**/*.tfstate.backup
**/.terraform/
**/.terraform.lock.hcl

# Kubernetes (if you use k8s)
**/secrets.yaml
**/secrets.yml

# Local configuration
**/config.local.*
**/local.config.*

# Monitoring and analytics
**/.sentry-native/
**/sentry.properties

# Miscellaneous
**/.eslintcache
**/.stylelintcache
**/.parcel-cache
**/.svelte-kit
**/.astro

# Custom project directories (add your own)
# /private/
# /internal/
# /experiments/
</file>

</files>
